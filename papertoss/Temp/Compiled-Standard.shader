// Compiled shader for iPhone, iPod Touch and iPad

//////////////////////////////////////////////////////////////////////////
// 
// NOTE: This is *not* a valid shader file, the contents are provided just
// for information and for debugging purposes only.
// 
//////////////////////////////////////////////////////////////////////////
// Skipping shader variants that would not be included into build of current scene.

Shader "Standard" {
Properties {
 _Color ("Color", Color) = (30.000000,60.000000,1.000000,1.000000)
 _MainTex ("Albedo", 2D) = "white" { }
 _Cutoff ("Alpha Cutoff", Range(0.000000,1.000000)) = 0.500000
 _Glossiness ("Smoothness", Range(0.000000,1.000000)) = 0.500000
 _GlossMapScale ("Smoothness Scale", Range(0.000000,1.000000)) = 1.000000
[Enum(Metallic Alpha,0,Albedo Alpha,1)]  _SmoothnessTextureChannel ("Smoothness texture channel", Float) = 0.000000
[Gamma]  _Metallic ("Metallic", Range(0.000000,1.000000)) = 0.000000
 _MetallicGlossMap ("Metallic", 2D) = "white" { }
[ToggleOff]  _SpecularHighlights ("Specular Highlights", Float) = 1.000000
[ToggleOff]  _GlossyReflections ("Glossy Reflections", Float) = 1.000000
 _BumpScale ("Scale", Float) = 1.000000
 _BumpMap ("Normal Map", 2D) = "bump" { }
 _Parallax ("Height Scale", Range(0.005000,0.080000)) = 0.020000
 _ParallaxMap ("Height Map", 2D) = "black" { }
 _OcclusionStrength ("Strength", Range(0.000000,1.000000)) = 1.000000
 _OcclusionMap ("Occlusion", 2D) = "white" { }
 _EmissionColor ("Color", Color) = (0.000000,0.000000,0.000000,1.000000)
 _EmissionMap ("Emission", 2D) = "white" { }
 _DetailMask ("Detail Mask", 2D) = "white" { }
 _DetailAlbedoMap ("Detail Albedo x2", 2D) = "grey" { }
 _DetailNormalMapScale ("Scale", Float) = 1.000000
 _DetailNormalMap ("Normal Map", 2D) = "bump" { }
[Enum(UV0,0,UV1,1)]  _UVSec ("UV Set for secondary textures", Float) = 0.000000
[HideInInspector]  _Mode ("__mode", Float) = 0.000000
[HideInInspector]  _SrcBlend ("__src", Float) = 1.000000
[HideInInspector]  _DstBlend ("__dst", Float) = 0.000000
[HideInInspector]  _ZWrite ("__zw", Float) = 1.000000
}
SubShader { 
 LOD 300
 Tags { "RenderType"="Opaque" "PerformanceChecks"="False" }
 Pass {
  Name "FORWARD"
  Tags { "LIGHTMODE"="FORWARDBASE" "SHADOWSUPPORT"="true" "RenderType"="Opaque" "PerformanceChecks"="False" }
  ZWrite [_ZWrite]
  Blend [_SrcBlend] [_DstBlend]
  //////////////////////////////////
  //                              //
  //      Compiled programs       //
  //                              //
  //////////////////////////////////
//////////////////////////////////////////////////////
Keywords set in this variant: DIRECTIONAL 
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"
Uses vertex data channel "TexCoord0"

Constant Buffer "Globals" (274 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 48
  Matrix4x4 unity_WorldToObject at 112
  Matrix4x4 unity_MatrixVP at 176
  Vector3 _WorldSpaceCameraPos at 0
  VectorHalf4 unity_SHBr at 16
  VectorHalf4 unity_SHBg at 24
  VectorHalf4 unity_SHBb at 32
  VectorHalf4 unity_SHC at 40
  Vector4 _MainTex_ST at 240
  Vector4 _DetailAlbedoMap_ST at 256
  ScalarHalf _UVSec at 272
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    float4 _DetailAlbedoMap_ST;
    half _UVSec;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    half3 NORMAL0 [[ attribute(1) ]] ;
    float2 TEXCOORD0 [[ attribute(2) ]] ;
    float2 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    half4 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float2 TEXCOORD6 [[ user(TEXCOORD6) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    half4 u_xlat16_0;
    bool u_xlatb0;
    float4 u_xlat1;
    half u_xlat16_2;
    half3 u_xlat16_3;
    float u_xlat13;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0] * input.POSITION0.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2] * input.POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    output.mtl_Position = Globals.hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlatb0 = Globals._UVSec==half(0.0);
    u_xlat0.xy = (bool(u_xlatb0)) ? input.TEXCOORD0.xy : input.TEXCOORD1.xy;
    output.TEXCOORD0.zw = u_xlat0.xy * Globals._DetailAlbedoMap_ST.xy + Globals._DetailAlbedoMap_ST.zw;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy * Globals._MainTex_ST.xy + Globals._MainTex_ST.zw;
    u_xlat0.xyz = input.POSITION0.yyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * input.POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * input.POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyw = Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * input.POSITION0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyw + (-Globals._WorldSpaceCameraPos.xyzx.xyz);
    output.TEXCOORD1.xyz = half3(u_xlat1.xyz);
    output.TEXCOORD2.w = half(u_xlat0.x);
    output.TEXCOORD2.xyz = half3(0.0, 0.0, 0.0);
    output.TEXCOORD3.w = half(u_xlat0.y);
    output.TEXCOORD3.xyz = half3(0.0, 0.0, 0.0);
    u_xlat1.x = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = rsqrt(u_xlat13);
    u_xlat0.xyz = float3(u_xlat13) * u_xlat1.xyz;
    output.TEXCOORD4 = half4(u_xlat0);
    u_xlat16_2 = half(u_xlat0.y * u_xlat0.y);
    u_xlat16_2 = half(u_xlat0.x * u_xlat0.x + (-float(u_xlat16_2)));
    u_xlat16_0 = half4(u_xlat0.yzzx * u_xlat0.xyzz);
    u_xlat16_3.x = dot(Globals.unity_SHBr, u_xlat16_0);
    u_xlat16_3.y = dot(Globals.unity_SHBg, u_xlat16_0);
    u_xlat16_3.z = dot(Globals.unity_SHBb, u_xlat16_0);
    output.TEXCOORD5.xyz = Globals.unity_SHC.xyz * half3(u_xlat16_2) + u_xlat16_3.xyz;
    output.TEXCOORD5.w = half(0.0);
    output.TEXCOORD6.xy = float2(0.0, 0.0);
    return output;
}


-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0 sampler slot 2
Set 2D Texture "_OcclusionMap" to slot 1 sampler slot 3
Set 2D Texture "unity_NHxRoughness" to slot 2 sampler slot 1
Set CUBE Texture "unity_SpecCube0" to slot 3 sampler slot 0

Constant Buffer "Globals" (62 bytes) on slot 0 {
  VectorHalf4 _WorldSpaceLightPos0 at 0
  VectorHalf4 unity_SHAr at 8
  VectorHalf4 unity_SHAg at 16
  VectorHalf4 unity_SHAb at 24
  VectorHalf4 unity_SpecCube0_HDR at 32
  VectorHalf4 _LightColor0 at 40
  VectorHalf4 _Color at 48
  ScalarHalf _Metallic at 56
  ScalarHalf _Glossiness at 58
  ScalarHalf _OcclusionStrength at 60
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    half4 _WorldSpaceLightPos0;
    half4 unity_SHAr;
    half4 unity_SHAg;
    half4 unity_SHAb;
    half4 unity_SpecCube0_HDR;
    half4 _LightColor0;
    half4 _Color;
    half _Metallic;
    half _Glossiness;
    half _OcclusionStrength;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    half4 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(0) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    sampler samplerunity_SpecCube0 [[ sampler (0) ]],
    sampler samplerunity_NHxRoughness [[ sampler (1) ]],
    sampler sampler_MainTex [[ sampler (2) ]],
    sampler sampler_OcclusionMap [[ sampler (3) ]],
    texture2d<half, access::sample > _MainTex [[ texture (0) ]] ,
    texture2d<half, access::sample > _OcclusionMap [[ texture (1) ]] ,
    texture2d<half, access::sample > unity_NHxRoughness [[ texture (2) ]] ,
    texturecube<half, access::sample > unity_SpecCube0 [[ texture (3) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half4 u_xlat16_0;
    half3 u_xlat16_1;
    half4 u_xlat16_2;
    half4 u_xlat16_3;
    half4 u_xlat16_4;
    half3 u_xlat16_5;
    half3 u_xlat16_6;
    half3 u_xlat16_7;
    half3 u_xlat16_9;
    half u_xlat16_10;
    half u_xlat16_17;
    half u_xlat16_26;
    u_xlat16_0.x = _OcclusionMap.sample(sampler_OcclusionMap, input.TEXCOORD0.xy).y;
    u_xlat16_1.x = (-Globals._OcclusionStrength) + half(1.0);
    u_xlat16_1.x = u_xlat16_0.x * Globals._OcclusionStrength + u_xlat16_1.x;
    u_xlat16_0.xw = (-half2(Globals._Glossiness)) + half2(1.0, 1.0);
    u_xlat16_9.x = (-u_xlat16_0.x) * half(0.699999988) + half(1.70000005);
    u_xlat16_9.x = u_xlat16_0.x * u_xlat16_9.x;
    u_xlat16_9.x = u_xlat16_9.x * half(6.0);
    u_xlat16_17 = dot(input.TEXCOORD1.xyz, input.TEXCOORD1.xyz);
    u_xlat16_17 = rsqrt(u_xlat16_17);
    u_xlat16_2.xyz = half3(u_xlat16_17) * input.TEXCOORD1.xyz;
    u_xlat16_17 = dot(input.TEXCOORD4.xyz, input.TEXCOORD4.xyz);
    u_xlat16_17 = rsqrt(u_xlat16_17);
    u_xlat16_3.xyz = half3(u_xlat16_17) * input.TEXCOORD4.xyz;
    u_xlat16_17 = dot(u_xlat16_2.xyz, u_xlat16_3.xyz);
    u_xlat16_17 = u_xlat16_17 + u_xlat16_17;
    u_xlat16_4.xyz = u_xlat16_3.xyz * (-half3(u_xlat16_17)) + u_xlat16_2.xyz;
    u_xlat16_4 = unity_SpecCube0.sample(samplerunity_SpecCube0, float3(u_xlat16_4.xyz), level(float(u_xlat16_9.x)));
    u_xlat16_9.x = u_xlat16_4.w + half(-1.0);
    u_xlat16_9.x = Globals.unity_SpecCube0_HDR.w * u_xlat16_9.x + half(1.0);
    u_xlat16_9.x = u_xlat16_9.x * Globals.unity_SpecCube0_HDR.x;
    u_xlat16_9.xyz = u_xlat16_4.xyz * u_xlat16_9.xxx;
    u_xlat16_9.xyz = u_xlat16_1.xxx * u_xlat16_9.xyz;
    u_xlat16_26 = dot((-u_xlat16_2.xyz), u_xlat16_3.xyz);
    u_xlat16_5.x = u_xlat16_26 + u_xlat16_26;
    u_xlat16_26 = u_xlat16_26;
    u_xlat16_26 = clamp(u_xlat16_26, 0.0h, 1.0h);
    u_xlat16_6.y = (-u_xlat16_26) + half(1.0);
    u_xlat16_2.xyz = u_xlat16_3.xyz * (-u_xlat16_5.xxx) + (-u_xlat16_2.xyz);
    u_xlat16_6.x = dot(u_xlat16_2.xyz, Globals._WorldSpaceLightPos0.xyz);
    u_xlat16_2.xy = u_xlat16_6.xy * u_xlat16_6.xy;
    u_xlat16_0.yz = u_xlat16_2.xy * u_xlat16_2.xy;
    u_xlat16_2.x = (-Globals._Metallic) * half(0.779083729) + half(0.779083729);
    u_xlat16_10 = (-u_xlat16_2.x) + Globals._Glossiness;
    u_xlat16_10 = u_xlat16_10 + half(1.0);
    u_xlat16_10 = clamp(u_xlat16_10, 0.0h, 1.0h);
    u_xlat16_7.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_5.xyz = Globals._Color.xyz * u_xlat16_7.xyz + half3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat16_7.xyz = u_xlat16_7.xyz * Globals._Color.xyz;
    u_xlat16_2.xzw = u_xlat16_2.xxx * u_xlat16_7.xyz;
    u_xlat16_5.xyz = half3(Globals._Metallic) * u_xlat16_5.xyz + half3(0.220916301, 0.220916301, 0.220916301);
    u_xlat16_6.xyz = half3(u_xlat16_10) + (-u_xlat16_5.xyz);
    u_xlat16_6.xyz = u_xlat16_0.zzz * u_xlat16_6.xyz + u_xlat16_5.xyz;
    u_xlat16_7.x = unity_NHxRoughness.sample(samplerunity_NHxRoughness, float2(u_xlat16_0.yw)).w;
    u_xlat16_7.x = u_xlat16_7.x * half(16.0);
    u_xlat16_5.xyz = u_xlat16_7.xxx * u_xlat16_5.xyz + u_xlat16_2.xzw;
    u_xlat16_9.xyz = u_xlat16_9.xyz * u_xlat16_6.xyz;
    u_xlat16_3.w = half(1.0);
    u_xlat16_6.x = dot(Globals.unity_SHAr, u_xlat16_3);
    u_xlat16_6.y = dot(Globals.unity_SHAg, u_xlat16_3);
    u_xlat16_6.z = dot(Globals.unity_SHAb, u_xlat16_3);
    u_xlat16_10 = dot(u_xlat16_3.xyz, Globals._WorldSpaceLightPos0.xyz);
    u_xlat16_10 = clamp(u_xlat16_10, 0.0h, 1.0h);
    u_xlat16_3.xyz = half3(u_xlat16_10) * Globals._LightColor0.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz + input.TEXCOORD5.xyz;
    u_xlat16_6.xyz = max(u_xlat16_6.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_7.xyz = log2(u_xlat16_6.xyz);
    u_xlat16_7.xyz = u_xlat16_7.xyz * half3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_7.xyz = exp2(u_xlat16_7.xyz);
    u_xlat16_7.xyz = u_xlat16_7.xyz * half3(1.05499995, 1.05499995, 1.05499995) + half3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_7.xyz = max(u_xlat16_7.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_6.xyz = u_xlat16_1.xxx * u_xlat16_7.xyz;
    u_xlat16_1.xyz = u_xlat16_6.xyz * u_xlat16_2.xzw + u_xlat16_9.xyz;
    output.SV_Target0.xyz = u_xlat16_5.xyz * u_xlat16_3.xyz + u_xlat16_1.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}


-- Hardware tier variant: Tier 2
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"
Uses vertex data channel "TexCoord0"

Constant Buffer "Globals" (274 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 48
  Matrix4x4 unity_WorldToObject at 112
  Matrix4x4 unity_MatrixVP at 176
  Vector3 _WorldSpaceCameraPos at 0
  VectorHalf4 unity_SHBr at 16
  VectorHalf4 unity_SHBg at 24
  VectorHalf4 unity_SHBb at 32
  VectorHalf4 unity_SHC at 40
  Vector4 _MainTex_ST at 240
  Vector4 _DetailAlbedoMap_ST at 256
  ScalarHalf _UVSec at 272
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    float4 _DetailAlbedoMap_ST;
    half _UVSec;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    half3 NORMAL0 [[ attribute(1) ]] ;
    float2 TEXCOORD0 [[ attribute(2) ]] ;
    float2 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    half4 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float2 TEXCOORD6 [[ user(TEXCOORD6) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    half4 u_xlat16_0;
    bool u_xlatb0;
    float4 u_xlat1;
    half u_xlat16_2;
    half3 u_xlat16_3;
    float u_xlat13;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0] * input.POSITION0.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2] * input.POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    output.mtl_Position = Globals.hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlatb0 = Globals._UVSec==half(0.0);
    u_xlat0.xy = (bool(u_xlatb0)) ? input.TEXCOORD0.xy : input.TEXCOORD1.xy;
    output.TEXCOORD0.zw = u_xlat0.xy * Globals._DetailAlbedoMap_ST.xy + Globals._DetailAlbedoMap_ST.zw;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy * Globals._MainTex_ST.xy + Globals._MainTex_ST.zw;
    u_xlat0.xyz = input.POSITION0.yyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * input.POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * input.POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyw = Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * input.POSITION0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyw + (-Globals._WorldSpaceCameraPos.xyzx.xyz);
    output.TEXCOORD1.xyz = half3(u_xlat1.xyz);
    output.TEXCOORD2.w = half(u_xlat0.x);
    output.TEXCOORD2.xyz = half3(0.0, 0.0, 0.0);
    output.TEXCOORD3.w = half(u_xlat0.y);
    output.TEXCOORD3.xyz = half3(0.0, 0.0, 0.0);
    u_xlat1.x = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = rsqrt(u_xlat13);
    u_xlat0.xyz = float3(u_xlat13) * u_xlat1.xyz;
    output.TEXCOORD4 = half4(u_xlat0);
    u_xlat16_2 = half(u_xlat0.y * u_xlat0.y);
    u_xlat16_2 = half(u_xlat0.x * u_xlat0.x + (-float(u_xlat16_2)));
    u_xlat16_0 = half4(u_xlat0.yzzx * u_xlat0.xyzz);
    u_xlat16_3.x = dot(Globals.unity_SHBr, u_xlat16_0);
    u_xlat16_3.y = dot(Globals.unity_SHBg, u_xlat16_0);
    u_xlat16_3.z = dot(Globals.unity_SHBb, u_xlat16_0);
    output.TEXCOORD5.xyz = Globals.unity_SHC.xyz * half3(u_xlat16_2) + u_xlat16_3.xyz;
    output.TEXCOORD5.w = half(0.0);
    output.TEXCOORD6.xy = float2(0.0, 0.0);
    return output;
}


-- Hardware tier variant: Tier 2
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0 sampler slot 1
Set 2D Texture "_OcclusionMap" to slot 1 sampler slot 2
Set CUBE Texture "unity_SpecCube0" to slot 2 sampler slot 0

Constant Buffer "Globals" (62 bytes) on slot 0 {
  VectorHalf4 _WorldSpaceLightPos0 at 0
  VectorHalf4 unity_SHAr at 8
  VectorHalf4 unity_SHAg at 16
  VectorHalf4 unity_SHAb at 24
  VectorHalf4 unity_SpecCube0_HDR at 32
  VectorHalf4 _LightColor0 at 40
  VectorHalf4 _Color at 48
  ScalarHalf _Metallic at 56
  ScalarHalf _Glossiness at 58
  ScalarHalf _OcclusionStrength at 60
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    half4 _WorldSpaceLightPos0;
    half4 unity_SHAr;
    half4 unity_SHAg;
    half4 unity_SHAb;
    half4 unity_SpecCube0_HDR;
    half4 _LightColor0;
    half4 _Color;
    half _Metallic;
    half _Glossiness;
    half _OcclusionStrength;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    half4 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(0) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    sampler samplerunity_SpecCube0 [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_OcclusionMap [[ sampler (2) ]],
    texture2d<half, access::sample > _MainTex [[ texture (0) ]] ,
    texture2d<half, access::sample > _OcclusionMap [[ texture (1) ]] ,
    texturecube<half, access::sample > unity_SpecCube0 [[ texture (2) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half4 u_xlat16_0;
    half3 u_xlat16_1;
    half4 u_xlat16_2;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    half3 u_xlat16_6;
    half3 u_xlat16_7;
    half3 u_xlat16_8;
    half u_xlat16_11;
    half u_xlat16_27;
    half u_xlat16_28;
    half u_xlat16_29;
    half u_xlat16_31;
    half u_xlat16_32;
    u_xlat16_0.w = half(1.0);
    u_xlat16_1.x = dot(input.TEXCOORD4.xyz, input.TEXCOORD4.xyz);
    u_xlat16_1.x = rsqrt(u_xlat16_1.x);
    u_xlat16_0.xyz = u_xlat16_1.xxx * input.TEXCOORD4.xyz;
    u_xlat16_1.x = dot(Globals.unity_SHAr, u_xlat16_0);
    u_xlat16_1.y = dot(Globals.unity_SHAg, u_xlat16_0);
    u_xlat16_1.z = dot(Globals.unity_SHAb, u_xlat16_0);
    u_xlat16_1.xyz = u_xlat16_1.xyz + input.TEXCOORD5.xyz;
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = log2(u_xlat16_1.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * half3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * half3(1.05499995, 1.05499995, 1.05499995) + half3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_29 = _OcclusionMap.sample(sampler_OcclusionMap, input.TEXCOORD0.xy).y;
    u_xlat16_27 = (-Globals._OcclusionStrength) + half(1.0);
    u_xlat16_27 = u_xlat16_29 * Globals._OcclusionStrength + u_xlat16_27;
    u_xlat16_1.xyz = half3(u_xlat16_27) * u_xlat16_2.xyz;
    u_xlat16_2.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_2.xyz * Globals._Color.xyz;
    u_xlat16_4.xyz = Globals._Color.xyz * u_xlat16_2.xyz + half3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat16_4.xyz = half3(Globals._Metallic) * u_xlat16_4.xyz + half3(0.220916301, 0.220916301, 0.220916301);
    u_xlat16_28 = (-Globals._Metallic) * half(0.779083729) + half(0.779083729);
    u_xlat16_5.xyz = half3(u_xlat16_28) * u_xlat16_3.xyz;
    u_xlat16_28 = (-u_xlat16_28) + Globals._Glossiness;
    u_xlat16_28 = u_xlat16_28 + half(1.0);
    u_xlat16_28 = clamp(u_xlat16_28, 0.0h, 1.0h);
    u_xlat16_6.xyz = (-u_xlat16_4.xyz) + half3(u_xlat16_28);
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_5.xyz;
    u_xlat16_28 = dot(input.TEXCOORD1.xyz, input.TEXCOORD1.xyz);
    u_xlat16_28 = rsqrt(u_xlat16_28);
    u_xlat16_7.xyz = (-input.TEXCOORD1.xyz) * half3(u_xlat16_28) + Globals._WorldSpaceLightPos0.xyz;
    u_xlat16_8.xyz = half3(u_xlat16_28) * input.TEXCOORD1.xyz;
    u_xlat16_28 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_2.x = max(u_xlat16_28, half(0.00100000005));
    u_xlat16_28 = rsqrt(u_xlat16_2.x);
    u_xlat16_7.xyz = half3(u_xlat16_28) * u_xlat16_7.xyz;
    u_xlat16_28 = dot(Globals._WorldSpaceLightPos0.xyz, u_xlat16_7.xyz);
    u_xlat16_28 = clamp(u_xlat16_28, 0.0h, 1.0h);
    u_xlat16_31 = dot(u_xlat16_0.xyz, u_xlat16_7.xyz);
    u_xlat16_31 = clamp(u_xlat16_31, 0.0h, 1.0h);
    u_xlat16_31 = u_xlat16_31 * u_xlat16_31;
    u_xlat16_2.x = max(u_xlat16_28, half(0.319999993));
    u_xlat16_28 = (-Globals._Glossiness) + half(1.0);
    u_xlat16_11 = u_xlat16_28 * u_xlat16_28 + half(1.5);
    u_xlat16_2.x = u_xlat16_11 * u_xlat16_2.x;
    u_xlat16_32 = u_xlat16_28 * u_xlat16_28;
    u_xlat16_11 = u_xlat16_32 * u_xlat16_32 + half(-1.0);
    u_xlat16_11 = u_xlat16_31 * u_xlat16_11 + half(1.00001001);
    u_xlat16_2.x = u_xlat16_11 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_32 / u_xlat16_2.x;
    u_xlat16_31 = u_xlat16_28 * u_xlat16_32;
    u_xlat16_31 = (-u_xlat16_31) * half(0.280000001) + half(1.0);
    u_xlat16_2.x = u_xlat16_2.x + half(-9.99999975e-05);
    u_xlat16_32 = max(u_xlat16_2.x, half(0.0));
    u_xlat16_32 = min(u_xlat16_32, half(100.0));
    u_xlat16_5.xyz = half3(u_xlat16_32) * u_xlat16_4.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * Globals._LightColor0.xyz;
    u_xlat16_32 = dot(u_xlat16_0.xyz, Globals._WorldSpaceLightPos0.xyz);
    u_xlat16_32 = clamp(u_xlat16_32, 0.0h, 1.0h);
    u_xlat16_1.xyz = u_xlat16_5.xyz * half3(u_xlat16_32) + u_xlat16_1.xyz;
    u_xlat16_5.x = (-u_xlat16_28) * half(0.699999988) + half(1.70000005);
    u_xlat16_28 = u_xlat16_28 * u_xlat16_5.x;
    u_xlat16_28 = u_xlat16_28 * half(6.0);
    u_xlat16_5.x = dot(u_xlat16_8.xyz, u_xlat16_0.xyz);
    u_xlat16_5.x = u_xlat16_5.x + u_xlat16_5.x;
    u_xlat16_5.xyz = u_xlat16_0.xyz * (-u_xlat16_5.xxx) + u_xlat16_8.xyz;
    u_xlat16_0.x = dot(u_xlat16_0.xyz, (-u_xlat16_8.xyz));
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0h, 1.0h);
    u_xlat16_0.x = (-u_xlat16_0.x) + half(1.0);
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_6.xyz + u_xlat16_4.xyz;
    u_xlat16_2 = unity_SpecCube0.sample(samplerunity_SpecCube0, float3(u_xlat16_5.xyz), level(float(u_xlat16_28)));
    u_xlat16_28 = u_xlat16_2.w + half(-1.0);
    u_xlat16_28 = Globals.unity_SpecCube0_HDR.w * u_xlat16_28 + half(1.0);
    u_xlat16_28 = u_xlat16_28 * Globals.unity_SpecCube0_HDR.x;
    u_xlat16_4.xyz = u_xlat16_2.xyz * half3(u_xlat16_28);
    u_xlat16_4.xyz = half3(u_xlat16_27) * u_xlat16_4.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * half3(u_xlat16_31);
    output.SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}


-- Hardware tier variant: Tier 3
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"
Uses vertex data channel "TexCoord0"

Constant Buffer "Globals" (274 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 48
  Matrix4x4 unity_WorldToObject at 112
  Matrix4x4 unity_MatrixVP at 176
  Vector3 _WorldSpaceCameraPos at 0
  VectorHalf4 unity_SHBr at 16
  VectorHalf4 unity_SHBg at 24
  VectorHalf4 unity_SHBb at 32
  VectorHalf4 unity_SHC at 40
  Vector4 _MainTex_ST at 240
  Vector4 _DetailAlbedoMap_ST at 256
  ScalarHalf _UVSec at 272
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    float4 _DetailAlbedoMap_ST;
    half _UVSec;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    half3 NORMAL0 [[ attribute(1) ]] ;
    float2 TEXCOORD0 [[ attribute(2) ]] ;
    float2 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    half4 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float2 TEXCOORD6 [[ user(TEXCOORD6) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    half4 u_xlat16_0;
    bool u_xlatb0;
    float4 u_xlat1;
    half u_xlat16_2;
    half3 u_xlat16_3;
    float u_xlat13;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0] * input.POSITION0.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2] * input.POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    output.mtl_Position = Globals.hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlatb0 = Globals._UVSec==half(0.0);
    u_xlat0.xy = (bool(u_xlatb0)) ? input.TEXCOORD0.xy : input.TEXCOORD1.xy;
    output.TEXCOORD0.zw = u_xlat0.xy * Globals._DetailAlbedoMap_ST.xy + Globals._DetailAlbedoMap_ST.zw;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy * Globals._MainTex_ST.xy + Globals._MainTex_ST.zw;
    u_xlat0.xyz = input.POSITION0.yyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * input.POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * input.POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyw = Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * input.POSITION0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyw + (-Globals._WorldSpaceCameraPos.xyzx.xyz);
    output.TEXCOORD1.xyz = half3(u_xlat1.xyz);
    output.TEXCOORD2.w = half(u_xlat0.x);
    output.TEXCOORD2.xyz = half3(0.0, 0.0, 0.0);
    output.TEXCOORD3.w = half(u_xlat0.y);
    output.TEXCOORD3.xyz = half3(0.0, 0.0, 0.0);
    u_xlat1.x = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = rsqrt(u_xlat13);
    u_xlat0.xyz = float3(u_xlat13) * u_xlat1.xyz;
    output.TEXCOORD4 = half4(u_xlat0);
    u_xlat16_2 = half(u_xlat0.y * u_xlat0.y);
    u_xlat16_2 = half(u_xlat0.x * u_xlat0.x + (-float(u_xlat16_2)));
    u_xlat16_0 = half4(u_xlat0.yzzx * u_xlat0.xyzz);
    u_xlat16_3.x = dot(Globals.unity_SHBr, u_xlat16_0);
    u_xlat16_3.y = dot(Globals.unity_SHBg, u_xlat16_0);
    u_xlat16_3.z = dot(Globals.unity_SHBb, u_xlat16_0);
    output.TEXCOORD5.xyz = Globals.unity_SHC.xyz * half3(u_xlat16_2) + u_xlat16_3.xyz;
    output.TEXCOORD5.w = half(0.0);
    output.TEXCOORD6.xy = float2(0.0, 0.0);
    return output;
}


-- Hardware tier variant: Tier 3
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0 sampler slot 1
Set 2D Texture "_OcclusionMap" to slot 1 sampler slot 2
Set CUBE Texture "unity_SpecCube0" to slot 2 sampler slot 0

Constant Buffer "Globals" (62 bytes) on slot 0 {
  VectorHalf4 _WorldSpaceLightPos0 at 0
  VectorHalf4 unity_SHAr at 8
  VectorHalf4 unity_SHAg at 16
  VectorHalf4 unity_SHAb at 24
  VectorHalf4 unity_SpecCube0_HDR at 32
  VectorHalf4 _LightColor0 at 40
  VectorHalf4 _Color at 48
  ScalarHalf _Metallic at 56
  ScalarHalf _Glossiness at 58
  ScalarHalf _OcclusionStrength at 60
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    half4 _WorldSpaceLightPos0;
    half4 unity_SHAr;
    half4 unity_SHAg;
    half4 unity_SHAb;
    half4 unity_SpecCube0_HDR;
    half4 _LightColor0;
    half4 _Color;
    half _Metallic;
    half _Glossiness;
    half _OcclusionStrength;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    half4 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(0) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    sampler samplerunity_SpecCube0 [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_OcclusionMap [[ sampler (2) ]],
    texture2d<half, access::sample > _MainTex [[ texture (0) ]] ,
    texture2d<half, access::sample > _OcclusionMap [[ texture (1) ]] ,
    texturecube<half, access::sample > unity_SpecCube0 [[ texture (2) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half4 u_xlat16_0;
    half3 u_xlat16_1;
    half4 u_xlat16_2;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    half3 u_xlat16_6;
    half3 u_xlat16_7;
    half3 u_xlat16_8;
    half u_xlat16_11;
    half u_xlat16_27;
    half u_xlat16_28;
    half u_xlat16_29;
    half u_xlat16_31;
    half u_xlat16_32;
    u_xlat16_0.w = half(1.0);
    u_xlat16_1.x = dot(input.TEXCOORD4.xyz, input.TEXCOORD4.xyz);
    u_xlat16_1.x = rsqrt(u_xlat16_1.x);
    u_xlat16_0.xyz = u_xlat16_1.xxx * input.TEXCOORD4.xyz;
    u_xlat16_1.x = dot(Globals.unity_SHAr, u_xlat16_0);
    u_xlat16_1.y = dot(Globals.unity_SHAg, u_xlat16_0);
    u_xlat16_1.z = dot(Globals.unity_SHAb, u_xlat16_0);
    u_xlat16_1.xyz = u_xlat16_1.xyz + input.TEXCOORD5.xyz;
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = log2(u_xlat16_1.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * half3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * half3(1.05499995, 1.05499995, 1.05499995) + half3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_29 = _OcclusionMap.sample(sampler_OcclusionMap, input.TEXCOORD0.xy).y;
    u_xlat16_27 = (-Globals._OcclusionStrength) + half(1.0);
    u_xlat16_27 = u_xlat16_29 * Globals._OcclusionStrength + u_xlat16_27;
    u_xlat16_1.xyz = half3(u_xlat16_27) * u_xlat16_2.xyz;
    u_xlat16_2.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_2.xyz * Globals._Color.xyz;
    u_xlat16_4.xyz = Globals._Color.xyz * u_xlat16_2.xyz + half3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat16_4.xyz = half3(Globals._Metallic) * u_xlat16_4.xyz + half3(0.220916301, 0.220916301, 0.220916301);
    u_xlat16_28 = (-Globals._Metallic) * half(0.779083729) + half(0.779083729);
    u_xlat16_5.xyz = half3(u_xlat16_28) * u_xlat16_3.xyz;
    u_xlat16_28 = (-u_xlat16_28) + Globals._Glossiness;
    u_xlat16_28 = u_xlat16_28 + half(1.0);
    u_xlat16_28 = clamp(u_xlat16_28, 0.0h, 1.0h);
    u_xlat16_6.xyz = (-u_xlat16_4.xyz) + half3(u_xlat16_28);
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_5.xyz;
    u_xlat16_28 = dot(input.TEXCOORD1.xyz, input.TEXCOORD1.xyz);
    u_xlat16_28 = rsqrt(u_xlat16_28);
    u_xlat16_7.xyz = (-input.TEXCOORD1.xyz) * half3(u_xlat16_28) + Globals._WorldSpaceLightPos0.xyz;
    u_xlat16_8.xyz = half3(u_xlat16_28) * input.TEXCOORD1.xyz;
    u_xlat16_28 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_2.x = max(u_xlat16_28, half(0.00100000005));
    u_xlat16_28 = rsqrt(u_xlat16_2.x);
    u_xlat16_7.xyz = half3(u_xlat16_28) * u_xlat16_7.xyz;
    u_xlat16_28 = dot(Globals._WorldSpaceLightPos0.xyz, u_xlat16_7.xyz);
    u_xlat16_28 = clamp(u_xlat16_28, 0.0h, 1.0h);
    u_xlat16_31 = dot(u_xlat16_0.xyz, u_xlat16_7.xyz);
    u_xlat16_31 = clamp(u_xlat16_31, 0.0h, 1.0h);
    u_xlat16_31 = u_xlat16_31 * u_xlat16_31;
    u_xlat16_2.x = max(u_xlat16_28, half(0.319999993));
    u_xlat16_28 = (-Globals._Glossiness) + half(1.0);
    u_xlat16_11 = u_xlat16_28 * u_xlat16_28 + half(1.5);
    u_xlat16_2.x = u_xlat16_11 * u_xlat16_2.x;
    u_xlat16_32 = u_xlat16_28 * u_xlat16_28;
    u_xlat16_11 = u_xlat16_32 * u_xlat16_32 + half(-1.0);
    u_xlat16_11 = u_xlat16_31 * u_xlat16_11 + half(1.00001001);
    u_xlat16_2.x = u_xlat16_11 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_32 / u_xlat16_2.x;
    u_xlat16_31 = u_xlat16_28 * u_xlat16_32;
    u_xlat16_31 = (-u_xlat16_31) * half(0.280000001) + half(1.0);
    u_xlat16_2.x = u_xlat16_2.x + half(-9.99999975e-05);
    u_xlat16_32 = max(u_xlat16_2.x, half(0.0));
    u_xlat16_32 = min(u_xlat16_32, half(100.0));
    u_xlat16_5.xyz = half3(u_xlat16_32) * u_xlat16_4.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * Globals._LightColor0.xyz;
    u_xlat16_32 = dot(u_xlat16_0.xyz, Globals._WorldSpaceLightPos0.xyz);
    u_xlat16_32 = clamp(u_xlat16_32, 0.0h, 1.0h);
    u_xlat16_1.xyz = u_xlat16_5.xyz * half3(u_xlat16_32) + u_xlat16_1.xyz;
    u_xlat16_5.x = (-u_xlat16_28) * half(0.699999988) + half(1.70000005);
    u_xlat16_28 = u_xlat16_28 * u_xlat16_5.x;
    u_xlat16_28 = u_xlat16_28 * half(6.0);
    u_xlat16_5.x = dot(u_xlat16_8.xyz, u_xlat16_0.xyz);
    u_xlat16_5.x = u_xlat16_5.x + u_xlat16_5.x;
    u_xlat16_5.xyz = u_xlat16_0.xyz * (-u_xlat16_5.xxx) + u_xlat16_8.xyz;
    u_xlat16_0.x = dot(u_xlat16_0.xyz, (-u_xlat16_8.xyz));
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0h, 1.0h);
    u_xlat16_0.x = (-u_xlat16_0.x) + half(1.0);
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_6.xyz + u_xlat16_4.xyz;
    u_xlat16_2 = unity_SpecCube0.sample(samplerunity_SpecCube0, float3(u_xlat16_5.xyz), level(float(u_xlat16_28)));
    u_xlat16_28 = u_xlat16_2.w + half(-1.0);
    u_xlat16_28 = Globals.unity_SpecCube0_HDR.w * u_xlat16_28 + half(1.0);
    u_xlat16_28 = u_xlat16_28 * Globals.unity_SpecCube0_HDR.x;
    u_xlat16_4.xyz = u_xlat16_2.xyz * half3(u_xlat16_28);
    u_xlat16_4.xyz = half3(u_xlat16_27) * u_xlat16_4.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * half3(u_xlat16_31);
    output.SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}


//////////////////////////////////////////////////////
Keywords set in this variant: DIRECTIONAL SHADOWS_SCREEN _EMISSION 
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"
Uses vertex data channel "TexCoord0"

Constant Buffer "Globals" (274 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 48
  Matrix4x4 unity_WorldToObject at 112
  Matrix4x4 unity_MatrixVP at 176
  Vector3 _WorldSpaceCameraPos at 0
  VectorHalf4 unity_SHBr at 16
  VectorHalf4 unity_SHBg at 24
  VectorHalf4 unity_SHBb at 32
  VectorHalf4 unity_SHC at 40
  Vector4 _MainTex_ST at 240
  Vector4 _DetailAlbedoMap_ST at 256
  ScalarHalf _UVSec at 272
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    float4 _DetailAlbedoMap_ST;
    half _UVSec;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    half3 NORMAL0 [[ attribute(1) ]] ;
    float2 TEXCOORD0 [[ attribute(2) ]] ;
    float2 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    half4 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float2 TEXCOORD6 [[ user(TEXCOORD6) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    half4 u_xlat16_0;
    bool u_xlatb0;
    float4 u_xlat1;
    half u_xlat16_2;
    half3 u_xlat16_3;
    float u_xlat13;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0] * input.POSITION0.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2] * input.POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    output.mtl_Position = Globals.hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlatb0 = Globals._UVSec==half(0.0);
    u_xlat0.xy = (bool(u_xlatb0)) ? input.TEXCOORD0.xy : input.TEXCOORD1.xy;
    output.TEXCOORD0.zw = u_xlat0.xy * Globals._DetailAlbedoMap_ST.xy + Globals._DetailAlbedoMap_ST.zw;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy * Globals._MainTex_ST.xy + Globals._MainTex_ST.zw;
    u_xlat0.xyz = input.POSITION0.yyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * input.POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * input.POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyw = Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * input.POSITION0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyw + (-Globals._WorldSpaceCameraPos.xyzx.xyz);
    output.TEXCOORD1.xyz = half3(u_xlat1.xyz);
    output.TEXCOORD2.w = half(u_xlat0.x);
    output.TEXCOORD2.xyz = half3(0.0, 0.0, 0.0);
    output.TEXCOORD3.w = half(u_xlat0.y);
    output.TEXCOORD3.xyz = half3(0.0, 0.0, 0.0);
    u_xlat1.x = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = rsqrt(u_xlat13);
    u_xlat0.xyz = float3(u_xlat13) * u_xlat1.xyz;
    output.TEXCOORD4 = half4(u_xlat0);
    u_xlat16_2 = half(u_xlat0.y * u_xlat0.y);
    u_xlat16_2 = half(u_xlat0.x * u_xlat0.x + (-float(u_xlat16_2)));
    u_xlat16_0 = half4(u_xlat0.yzzx * u_xlat0.xyzz);
    u_xlat16_3.x = dot(Globals.unity_SHBr, u_xlat16_0);
    u_xlat16_3.y = dot(Globals.unity_SHBg, u_xlat16_0);
    u_xlat16_3.z = dot(Globals.unity_SHBb, u_xlat16_0);
    output.TEXCOORD5.xyz = Globals.unity_SHC.xyz * half3(u_xlat16_2) + u_xlat16_3.xyz;
    output.TEXCOORD5.w = half(0.0);
    output.TEXCOORD6.xy = float2(0.0, 0.0);
    return output;
}


-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0 sampler slot 2
Set 2D Texture "_OcclusionMap" to slot 1 sampler slot 3
Set 2D Texture "unity_NHxRoughness" to slot 2 sampler slot 1
Set 2D Texture "_EmissionMap" to slot 3 sampler slot 4
Set CUBE Texture "unity_SpecCube0" to slot 4 sampler slot 0
Set 2D Texture "_ShadowMapTexture" to slot 5

Constant Buffer "Globals" (440 bytes) on slot 0 {
  Matrix4x4 unity_WorldToShadow[4] at 48
  Matrix4x4 unity_MatrixV at 336
  Vector3 _WorldSpaceCameraPos at 0
  VectorHalf4 _WorldSpaceLightPos0 at 16
  VectorHalf4 unity_SHAr at 24
  VectorHalf4 unity_SHAg at 32
  VectorHalf4 unity_SHAb at 40
  VectorHalf4 _LightShadowData at 304
  Vector4 unity_ShadowFadeCenterAndType at 320
  VectorHalf4 unity_SpecCube0_HDR at 400
  VectorHalf4 _LightColor0 at 408
  VectorHalf4 _Color at 416
  ScalarHalf _Metallic at 424
  ScalarHalf _Glossiness at 426
  ScalarHalf _OcclusionStrength at 428
  VectorHalf4 _EmissionColor at 432
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    half4 _WorldSpaceLightPos0;
    half4 unity_SHAr;
    half4 unity_SHAg;
    half4 unity_SHAb;
    float4 hlslcc_mtx4x4unity_WorldToShadow[16];
    half4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    half4 unity_SpecCube0_HDR;
    half4 _LightColor0;
    half4 _Color;
    half _Metallic;
    half _Glossiness;
    half _OcclusionStrength;
    half4 _EmissionColor;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    half4 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(0) ]];
};

constexpr sampler _mtl_xl_shadow_sampler(address::clamp_to_edge, filter::linear, compare_func::greater_equal);
fragment Mtl_FragmentOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    sampler samplerunity_SpecCube0 [[ sampler (0) ]],
    sampler samplerunity_NHxRoughness [[ sampler (1) ]],
    sampler sampler_MainTex [[ sampler (2) ]],
    sampler sampler_OcclusionMap [[ sampler (3) ]],
    sampler sampler_EmissionMap [[ sampler (4) ]],
    sampler sampler_ShadowMapTexture [[ sampler (5) ]],
    texture2d<half, access::sample > _MainTex [[ texture (0) ]] ,
    texture2d<half, access::sample > _OcclusionMap [[ texture (1) ]] ,
    texture2d<half, access::sample > unity_NHxRoughness [[ texture (2) ]] ,
    texture2d<half, access::sample > _EmissionMap [[ texture (3) ]] ,
    texturecube<half, access::sample > unity_SpecCube0 [[ texture (4) ]] ,
    depth2d<float, access::sample > _ShadowMapTexture [[ texture (5) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half4 u_xlat16_0;
    half3 u_xlat16_1;
    half4 u_xlat16_2;
    half4 u_xlat16_3;
    half4 u_xlat16_4;
    half3 u_xlat16_5;
    half3 u_xlat16_6;
    float3 u_xlat7;
    half3 u_xlat16_7;
    float3 u_xlat8;
    float3 u_xlat9;
    half3 u_xlat16_11;
    half u_xlat16_12;
    float3 u_xlat17;
    half u_xlat16_17;
    half u_xlat16_21;
    half u_xlat16_31;
    half u_xlat16_32;
    float u_xlat37;
    u_xlat16_0.x = _OcclusionMap.sample(sampler_OcclusionMap, input.TEXCOORD0.xy).y;
    u_xlat16_1.x = (-Globals._OcclusionStrength) + half(1.0);
    u_xlat16_1.x = u_xlat16_0.x * Globals._OcclusionStrength + u_xlat16_1.x;
    u_xlat16_0.xw = (-half2(Globals._Glossiness)) + half2(1.0, 1.0);
    u_xlat16_11.x = (-u_xlat16_0.x) * half(0.699999988) + half(1.70000005);
    u_xlat16_11.x = u_xlat16_0.x * u_xlat16_11.x;
    u_xlat16_11.x = u_xlat16_11.x * half(6.0);
    u_xlat16_21 = dot(input.TEXCOORD1.xyz, input.TEXCOORD1.xyz);
    u_xlat16_21 = rsqrt(u_xlat16_21);
    u_xlat16_2.xyz = half3(u_xlat16_21) * input.TEXCOORD1.xyz;
    u_xlat16_21 = dot(input.TEXCOORD4.xyz, input.TEXCOORD4.xyz);
    u_xlat16_21 = rsqrt(u_xlat16_21);
    u_xlat16_3.xyz = half3(u_xlat16_21) * input.TEXCOORD4.xyz;
    u_xlat16_21 = dot(u_xlat16_2.xyz, u_xlat16_3.xyz);
    u_xlat16_21 = u_xlat16_21 + u_xlat16_21;
    u_xlat16_4.xyz = u_xlat16_3.xyz * (-half3(u_xlat16_21)) + u_xlat16_2.xyz;
    u_xlat16_4 = unity_SpecCube0.sample(samplerunity_SpecCube0, float3(u_xlat16_4.xyz), level(float(u_xlat16_11.x)));
    u_xlat16_11.x = u_xlat16_4.w + half(-1.0);
    u_xlat16_11.x = Globals.unity_SpecCube0_HDR.w * u_xlat16_11.x + half(1.0);
    u_xlat16_11.x = u_xlat16_11.x * Globals.unity_SpecCube0_HDR.x;
    u_xlat16_11.xyz = u_xlat16_4.xyz * u_xlat16_11.xxx;
    u_xlat16_11.xyz = u_xlat16_1.xxx * u_xlat16_11.xyz;
    u_xlat16_32 = dot((-u_xlat16_2.xyz), u_xlat16_3.xyz);
    u_xlat16_5.x = u_xlat16_32 + u_xlat16_32;
    u_xlat16_32 = u_xlat16_32;
    u_xlat16_32 = clamp(u_xlat16_32, 0.0h, 1.0h);
    u_xlat16_6.y = (-u_xlat16_32) + half(1.0);
    u_xlat16_2.xyz = u_xlat16_3.xyz * (-u_xlat16_5.xxx) + (-u_xlat16_2.xyz);
    u_xlat16_6.x = dot(u_xlat16_2.xyz, Globals._WorldSpaceLightPos0.xyz);
    u_xlat16_2.xy = u_xlat16_6.xy * u_xlat16_6.xy;
    u_xlat16_0.yz = u_xlat16_2.xy * u_xlat16_2.xy;
    u_xlat16_2.x = (-Globals._Metallic) * half(0.779083729) + half(0.779083729);
    u_xlat16_12 = (-u_xlat16_2.x) + Globals._Glossiness;
    u_xlat16_12 = u_xlat16_12 + half(1.0);
    u_xlat16_12 = clamp(u_xlat16_12, 0.0h, 1.0h);
    u_xlat16_7.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_5.xyz = Globals._Color.xyz * u_xlat16_7.xyz + half3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat16_7.xyz = u_xlat16_7.xyz * Globals._Color.xyz;
    u_xlat16_2.xzw = u_xlat16_2.xxx * u_xlat16_7.xyz;
    u_xlat16_5.xyz = half3(Globals._Metallic) * u_xlat16_5.xyz + half3(0.220916301, 0.220916301, 0.220916301);
    u_xlat16_6.xyz = half3(u_xlat16_12) + (-u_xlat16_5.xyz);
    u_xlat16_6.xyz = u_xlat16_0.zzz * u_xlat16_6.xyz + u_xlat16_5.xyz;
    u_xlat16_7.x = unity_NHxRoughness.sample(samplerunity_NHxRoughness, float2(u_xlat16_0.yw)).w;
    u_xlat16_7.x = u_xlat16_7.x * half(16.0);
    u_xlat16_5.xyz = u_xlat16_7.xxx * u_xlat16_5.xyz + u_xlat16_2.xzw;
    u_xlat16_11.xyz = u_xlat16_11.xyz * u_xlat16_6.xyz;
    u_xlat16_3.w = half(1.0);
    u_xlat16_6.x = dot(Globals.unity_SHAr, u_xlat16_3);
    u_xlat16_6.y = dot(Globals.unity_SHAg, u_xlat16_3);
    u_xlat16_6.z = dot(Globals.unity_SHAb, u_xlat16_3);
    u_xlat16_12 = dot(u_xlat16_3.xyz, Globals._WorldSpaceLightPos0.xyz);
    u_xlat16_12 = clamp(u_xlat16_12, 0.0h, 1.0h);
    u_xlat16_3.xyz = u_xlat16_6.xyz + input.TEXCOORD5.xyz;
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_7.xyz = log2(u_xlat16_3.xyz);
    u_xlat16_7.xyz = u_xlat16_7.xyz * half3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_7.xyz = exp2(u_xlat16_7.xyz);
    u_xlat16_7.xyz = u_xlat16_7.xyz * half3(1.05499995, 1.05499995, 1.05499995) + half3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_7.xyz = max(u_xlat16_7.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_3.xyz = u_xlat16_1.xxx * u_xlat16_7.xyz;
    u_xlat16_1.xyz = u_xlat16_3.xyz * u_xlat16_2.xzw + u_xlat16_11.xyz;
    u_xlat7.x = Globals.hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat7.y = Globals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat7.z = Globals.hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat16_3.x = input.TEXCOORD2.w;
    u_xlat16_3.y = input.TEXCOORD3.w;
    u_xlat16_3.z = input.TEXCOORD4.w;
    u_xlat8.xyz = (-float3(u_xlat16_3.xyz)) + Globals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat9.xyz = float3(u_xlat16_3.xyz) + (-Globals.unity_ShadowFadeCenterAndType.xyz);
    u_xlat37 = dot(u_xlat9.xyz, u_xlat9.xyz);
    u_xlat37 = sqrt(u_xlat37);
    u_xlat7.x = dot(u_xlat8.xyz, u_xlat7.xyz);
    u_xlat17.x = (-u_xlat7.x) + u_xlat37;
    u_xlat7.x = Globals.unity_ShadowFadeCenterAndType.w * u_xlat17.x + u_xlat7.x;
    u_xlat7.x = u_xlat7.x * float(Globals._LightShadowData.z) + float(Globals._LightShadowData.w);
    u_xlat7.x = clamp(u_xlat7.x, 0.0f, 1.0f);
    u_xlat17.xyz = float3(input.TEXCOORD3.www) * Globals.hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
    u_xlat17.xyz = Globals.hlslcc_mtx4x4unity_WorldToShadow[0].xyz * float3(input.TEXCOORD2.www) + u_xlat17.xyz;
    u_xlat17.xyz = Globals.hlslcc_mtx4x4unity_WorldToShadow[2].xyz * float3(input.TEXCOORD4.www) + u_xlat17.xyz;
    u_xlat17.xyz = u_xlat17.xyz + Globals.hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
    u_xlat16_17 = _ShadowMapTexture.sample_compare(_mtl_xl_shadow_sampler, u_xlat17.xy, saturate(u_xlat17.z), level(0.0));
    u_xlat16_31 = (-Globals._LightShadowData.x) + half(1.0);
    u_xlat16_31 = u_xlat16_17 * u_xlat16_31 + Globals._LightShadowData.x;
    u_xlat16_31 = half(u_xlat7.x + float(u_xlat16_31));
    u_xlat16_31 = clamp(u_xlat16_31, 0.0h, 1.0h);
    u_xlat16_2.xzw = half3(u_xlat16_31) * Globals._LightColor0.xyz;
    u_xlat16_2.xyz = half3(u_xlat16_12) * u_xlat16_2.xzw;
    u_xlat16_1.xyz = u_xlat16_5.xyz * u_xlat16_2.xyz + u_xlat16_1.xyz;
    u_xlat16_7.xyz = _EmissionMap.sample(sampler_EmissionMap, input.TEXCOORD0.xy).xyz;
    output.SV_Target0.xyz = u_xlat16_7.xyz * Globals._EmissionColor.xyz + u_xlat16_1.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}


-- Hardware tier variant: Tier 2
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"
Uses vertex data channel "TexCoord0"

Constant Buffer "Globals" (274 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 48
  Matrix4x4 unity_WorldToObject at 112
  Matrix4x4 unity_MatrixVP at 176
  Vector3 _WorldSpaceCameraPos at 0
  VectorHalf4 unity_SHBr at 16
  VectorHalf4 unity_SHBg at 24
  VectorHalf4 unity_SHBb at 32
  VectorHalf4 unity_SHC at 40
  Vector4 _MainTex_ST at 240
  Vector4 _DetailAlbedoMap_ST at 256
  ScalarHalf _UVSec at 272
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    float4 _DetailAlbedoMap_ST;
    half _UVSec;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    half3 NORMAL0 [[ attribute(1) ]] ;
    float2 TEXCOORD0 [[ attribute(2) ]] ;
    float2 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    half4 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float2 TEXCOORD6 [[ user(TEXCOORD6) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    half4 u_xlat16_0;
    bool u_xlatb0;
    float4 u_xlat1;
    half u_xlat16_2;
    half3 u_xlat16_3;
    float u_xlat13;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0] * input.POSITION0.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2] * input.POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    output.mtl_Position = Globals.hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlatb0 = Globals._UVSec==half(0.0);
    u_xlat0.xy = (bool(u_xlatb0)) ? input.TEXCOORD0.xy : input.TEXCOORD1.xy;
    output.TEXCOORD0.zw = u_xlat0.xy * Globals._DetailAlbedoMap_ST.xy + Globals._DetailAlbedoMap_ST.zw;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy * Globals._MainTex_ST.xy + Globals._MainTex_ST.zw;
    u_xlat0.xyz = input.POSITION0.yyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * input.POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * input.POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyw = Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * input.POSITION0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyw + (-Globals._WorldSpaceCameraPos.xyzx.xyz);
    output.TEXCOORD1.xyz = half3(u_xlat1.xyz);
    output.TEXCOORD2.w = half(u_xlat0.x);
    output.TEXCOORD2.xyz = half3(0.0, 0.0, 0.0);
    output.TEXCOORD3.w = half(u_xlat0.y);
    output.TEXCOORD3.xyz = half3(0.0, 0.0, 0.0);
    u_xlat1.x = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = rsqrt(u_xlat13);
    u_xlat0.xyz = float3(u_xlat13) * u_xlat1.xyz;
    output.TEXCOORD4 = half4(u_xlat0);
    u_xlat16_2 = half(u_xlat0.y * u_xlat0.y);
    u_xlat16_2 = half(u_xlat0.x * u_xlat0.x + (-float(u_xlat16_2)));
    u_xlat16_0 = half4(u_xlat0.yzzx * u_xlat0.xyzz);
    u_xlat16_3.x = dot(Globals.unity_SHBr, u_xlat16_0);
    u_xlat16_3.y = dot(Globals.unity_SHBg, u_xlat16_0);
    u_xlat16_3.z = dot(Globals.unity_SHBb, u_xlat16_0);
    output.TEXCOORD5.xyz = Globals.unity_SHC.xyz * half3(u_xlat16_2) + u_xlat16_3.xyz;
    output.TEXCOORD5.w = half(0.0);
    output.TEXCOORD6.xy = float2(0.0, 0.0);
    return output;
}


-- Hardware tier variant: Tier 2
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0 sampler slot 1
Set 2D Texture "_OcclusionMap" to slot 1 sampler slot 2
Set 2D Texture "_EmissionMap" to slot 2 sampler slot 3
Set CUBE Texture "unity_SpecCube0" to slot 3 sampler slot 0
Set 2D Texture "_ShadowMapTexture" to slot 4

Constant Buffer "Globals" (440 bytes) on slot 0 {
  Matrix4x4 unity_WorldToShadow[4] at 48
  Matrix4x4 unity_MatrixV at 336
  Vector3 _WorldSpaceCameraPos at 0
  VectorHalf4 _WorldSpaceLightPos0 at 16
  VectorHalf4 unity_SHAr at 24
  VectorHalf4 unity_SHAg at 32
  VectorHalf4 unity_SHAb at 40
  VectorHalf4 _LightShadowData at 304
  Vector4 unity_ShadowFadeCenterAndType at 320
  VectorHalf4 unity_SpecCube0_HDR at 400
  VectorHalf4 _LightColor0 at 408
  VectorHalf4 _Color at 416
  ScalarHalf _Metallic at 424
  ScalarHalf _Glossiness at 426
  ScalarHalf _OcclusionStrength at 428
  VectorHalf4 _EmissionColor at 432
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    half4 _WorldSpaceLightPos0;
    half4 unity_SHAr;
    half4 unity_SHAg;
    half4 unity_SHAb;
    float4 hlslcc_mtx4x4unity_WorldToShadow[16];
    half4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    half4 unity_SpecCube0_HDR;
    half4 _LightColor0;
    half4 _Color;
    half _Metallic;
    half _Glossiness;
    half _OcclusionStrength;
    half4 _EmissionColor;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    half4 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(0) ]];
};

constexpr sampler _mtl_xl_shadow_sampler(address::clamp_to_edge, filter::linear, compare_func::greater_equal);
fragment Mtl_FragmentOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    sampler samplerunity_SpecCube0 [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_OcclusionMap [[ sampler (2) ]],
    sampler sampler_EmissionMap [[ sampler (3) ]],
    sampler sampler_ShadowMapTexture [[ sampler (4) ]],
    texture2d<half, access::sample > _MainTex [[ texture (0) ]] ,
    texture2d<half, access::sample > _OcclusionMap [[ texture (1) ]] ,
    texture2d<half, access::sample > _EmissionMap [[ texture (2) ]] ,
    texturecube<half, access::sample > unity_SpecCube0 [[ texture (3) ]] ,
    depth2d<float, access::sample > _ShadowMapTexture [[ texture (4) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half4 u_xlat16_0;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half4 u_xlat16_2;
    float3 u_xlat3;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    half3 u_xlat16_6;
    half3 u_xlat16_7;
    half3 u_xlat16_8;
    half3 u_xlat16_9;
    float3 u_xlat10;
    half u_xlat16_10;
    half3 u_xlat16_14;
    half u_xlat16_24;
    float u_xlat30;
    half u_xlat16_30;
    half u_xlat16_31;
    half u_xlat16_34;
    u_xlat0.x = Globals.hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat0.y = Globals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.z = Globals.hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat16_1.x = input.TEXCOORD2.w;
    u_xlat16_1.y = input.TEXCOORD3.w;
    u_xlat16_1.z = input.TEXCOORD4.w;
    u_xlat2.xyz = (-float3(u_xlat16_1.xyz)) + Globals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat3.xyz = float3(u_xlat16_1.xyz) + (-Globals.unity_ShadowFadeCenterAndType.xyz);
    u_xlat30 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat30 = sqrt(u_xlat30);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat10.x = (-u_xlat0.x) + u_xlat30;
    u_xlat0.x = Globals.unity_ShadowFadeCenterAndType.w * u_xlat10.x + u_xlat0.x;
    u_xlat0.x = u_xlat0.x * float(Globals._LightShadowData.z) + float(Globals._LightShadowData.w);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat10.xyz = float3(input.TEXCOORD3.www) * Globals.hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
    u_xlat10.xyz = Globals.hlslcc_mtx4x4unity_WorldToShadow[0].xyz * float3(input.TEXCOORD2.www) + u_xlat10.xyz;
    u_xlat10.xyz = Globals.hlslcc_mtx4x4unity_WorldToShadow[2].xyz * float3(input.TEXCOORD4.www) + u_xlat10.xyz;
    u_xlat10.xyz = u_xlat10.xyz + Globals.hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
    u_xlat16_10 = _ShadowMapTexture.sample_compare(_mtl_xl_shadow_sampler, u_xlat10.xy, saturate(u_xlat10.z), level(0.0));
    u_xlat16_1.x = (-Globals._LightShadowData.x) + half(1.0);
    u_xlat16_1.x = u_xlat16_10 * u_xlat16_1.x + Globals._LightShadowData.x;
    u_xlat16_1.x = half(u_xlat0.x + float(u_xlat16_1.x));
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0h, 1.0h);
    u_xlat16_1.xyz = u_xlat16_1.xxx * Globals._LightColor0.xyz;
    u_xlat16_31 = dot(input.TEXCOORD1.xyz, input.TEXCOORD1.xyz);
    u_xlat16_31 = rsqrt(u_xlat16_31);
    u_xlat16_4.xyz = (-input.TEXCOORD1.xyz) * half3(u_xlat16_31) + Globals._WorldSpaceLightPos0.xyz;
    u_xlat16_5.xyz = half3(u_xlat16_31) * input.TEXCOORD1.xyz;
    u_xlat16_31 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
    u_xlat16_0.x = max(u_xlat16_31, half(0.00100000005));
    u_xlat16_31 = rsqrt(u_xlat16_0.x);
    u_xlat16_4.xyz = half3(u_xlat16_31) * u_xlat16_4.xyz;
    u_xlat16_31 = dot(Globals._WorldSpaceLightPos0.xyz, u_xlat16_4.xyz);
    u_xlat16_31 = clamp(u_xlat16_31, 0.0h, 1.0h);
    u_xlat16_0.x = max(u_xlat16_31, half(0.319999993));
    u_xlat16_31 = (-Globals._Glossiness) + half(1.0);
    u_xlat16_10 = u_xlat16_31 * u_xlat16_31 + half(1.5);
    u_xlat16_0.x = u_xlat16_10 * u_xlat16_0.x;
    u_xlat16_34 = dot(input.TEXCOORD4.xyz, input.TEXCOORD4.xyz);
    u_xlat16_34 = rsqrt(u_xlat16_34);
    u_xlat16_2.xyz = half3(u_xlat16_34) * input.TEXCOORD4.xyz;
    u_xlat16_4.x = dot(u_xlat16_2.xyz, u_xlat16_4.xyz);
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0h, 1.0h);
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_14.x = u_xlat16_31 * u_xlat16_31;
    u_xlat16_10 = u_xlat16_14.x * u_xlat16_14.x + half(-1.0);
    u_xlat16_10 = u_xlat16_4.x * u_xlat16_10 + half(1.00001001);
    u_xlat16_0.x = u_xlat16_10 * u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_14.x / u_xlat16_0.x;
    u_xlat16_4.x = u_xlat16_31 * u_xlat16_14.x;
    u_xlat16_4.x = (-u_xlat16_4.x) * half(0.280000001) + half(1.0);
    u_xlat16_0.x = u_xlat16_0.x + half(-9.99999975e-05);
    u_xlat16_14.x = max(u_xlat16_0.x, half(0.0));
    u_xlat16_14.x = min(u_xlat16_14.x, half(100.0));
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_0.xyz * Globals._Color.xyz;
    u_xlat16_6.xyz = Globals._Color.xyz * u_xlat16_0.xyz + half3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat16_6.xyz = half3(Globals._Metallic) * u_xlat16_6.xyz + half3(0.220916301, 0.220916301, 0.220916301);
    u_xlat16_24 = (-Globals._Metallic) * half(0.779083729) + half(0.779083729);
    u_xlat16_7.xyz = u_xlat16_3.xyz * half3(u_xlat16_24);
    u_xlat16_24 = (-u_xlat16_24) + Globals._Glossiness;
    u_xlat16_24 = u_xlat16_24 + half(1.0);
    u_xlat16_24 = clamp(u_xlat16_24, 0.0h, 1.0h);
    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + half3(u_xlat16_24);
    u_xlat16_14.xyz = u_xlat16_14.xxx * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_14.xyz;
    u_xlat16_2.w = half(1.0);
    u_xlat16_9.x = dot(Globals.unity_SHAr, u_xlat16_2);
    u_xlat16_9.y = dot(Globals.unity_SHAg, u_xlat16_2);
    u_xlat16_9.z = dot(Globals.unity_SHAb, u_xlat16_2);
    u_xlat16_14.xyz = u_xlat16_9.xyz + input.TEXCOORD5.xyz;
    u_xlat16_14.xyz = max(u_xlat16_14.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_0.xyz = log2(u_xlat16_14.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * half3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * half3(1.05499995, 1.05499995, 1.05499995) + half3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_0.xyz = max(u_xlat16_0.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_30 = _OcclusionMap.sample(sampler_OcclusionMap, input.TEXCOORD0.xy).y;
    u_xlat16_14.x = (-Globals._OcclusionStrength) + half(1.0);
    u_xlat16_14.x = u_xlat16_30 * Globals._OcclusionStrength + u_xlat16_14.x;
    u_xlat16_9.xyz = u_xlat16_0.xyz * u_xlat16_14.xxx;
    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_9.xyz;
    u_xlat16_24 = dot(u_xlat16_2.xyz, Globals._WorldSpaceLightPos0.xyz);
    u_xlat16_24 = clamp(u_xlat16_24, 0.0h, 1.0h);
    u_xlat16_1.xyz = u_xlat16_1.xyz * half3(u_xlat16_24) + u_xlat16_7.xyz;
    u_xlat16_24 = (-u_xlat16_31) * half(0.699999988) + half(1.70000005);
    u_xlat16_31 = u_xlat16_31 * u_xlat16_24;
    u_xlat16_31 = u_xlat16_31 * half(6.0);
    u_xlat16_24 = dot(u_xlat16_5.xyz, u_xlat16_2.xyz);
    u_xlat16_24 = u_xlat16_24 + u_xlat16_24;
    u_xlat16_7.xyz = u_xlat16_2.xyz * (-half3(u_xlat16_24)) + u_xlat16_5.xyz;
    u_xlat16_24 = dot(u_xlat16_2.xyz, (-u_xlat16_5.xyz));
    u_xlat16_24 = clamp(u_xlat16_24, 0.0h, 1.0h);
    u_xlat16_24 = (-u_xlat16_24) + half(1.0);
    u_xlat16_24 = u_xlat16_24 * u_xlat16_24;
    u_xlat16_24 = u_xlat16_24 * u_xlat16_24;
    u_xlat16_5.xyz = half3(u_xlat16_24) * u_xlat16_8.xyz + u_xlat16_6.xyz;
    u_xlat16_0 = unity_SpecCube0.sample(samplerunity_SpecCube0, float3(u_xlat16_7.xyz), level(float(u_xlat16_31)));
    u_xlat16_31 = u_xlat16_0.w + half(-1.0);
    u_xlat16_31 = Globals.unity_SpecCube0_HDR.w * u_xlat16_31 + half(1.0);
    u_xlat16_31 = u_xlat16_31 * Globals.unity_SpecCube0_HDR.x;
    u_xlat16_6.xyz = u_xlat16_0.xyz * half3(u_xlat16_31);
    u_xlat16_14.xyz = u_xlat16_14.xxx * u_xlat16_6.xyz;
    u_xlat16_4.xyz = u_xlat16_14.xyz * u_xlat16_4.xxx;
    u_xlat16_1.xyz = u_xlat16_4.xyz * u_xlat16_5.xyz + u_xlat16_1.xyz;
    u_xlat16_0.xyz = _EmissionMap.sample(sampler_EmissionMap, input.TEXCOORD0.xy).xyz;
    output.SV_Target0.xyz = u_xlat16_0.xyz * Globals._EmissionColor.xyz + u_xlat16_1.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}


-- Hardware tier variant: Tier 3
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"
Uses vertex data channel "TexCoord0"

Constant Buffer "Globals" (274 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 48
  Matrix4x4 unity_WorldToObject at 112
  Matrix4x4 unity_MatrixVP at 176
  Vector3 _WorldSpaceCameraPos at 0
  VectorHalf4 unity_SHBr at 16
  VectorHalf4 unity_SHBg at 24
  VectorHalf4 unity_SHBb at 32
  VectorHalf4 unity_SHC at 40
  Vector4 _MainTex_ST at 240
  Vector4 _DetailAlbedoMap_ST at 256
  ScalarHalf _UVSec at 272
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    float4 _DetailAlbedoMap_ST;
    half _UVSec;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    half3 NORMAL0 [[ attribute(1) ]] ;
    float2 TEXCOORD0 [[ attribute(2) ]] ;
    float2 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    half4 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float2 TEXCOORD6 [[ user(TEXCOORD6) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    half4 u_xlat16_0;
    bool u_xlatb0;
    float4 u_xlat1;
    half u_xlat16_2;
    half3 u_xlat16_3;
    float u_xlat13;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0] * input.POSITION0.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2] * input.POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    output.mtl_Position = Globals.hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlatb0 = Globals._UVSec==half(0.0);
    u_xlat0.xy = (bool(u_xlatb0)) ? input.TEXCOORD0.xy : input.TEXCOORD1.xy;
    output.TEXCOORD0.zw = u_xlat0.xy * Globals._DetailAlbedoMap_ST.xy + Globals._DetailAlbedoMap_ST.zw;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy * Globals._MainTex_ST.xy + Globals._MainTex_ST.zw;
    u_xlat0.xyz = input.POSITION0.yyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * input.POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * input.POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyw = Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * input.POSITION0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyw + (-Globals._WorldSpaceCameraPos.xyzx.xyz);
    output.TEXCOORD1.xyz = half3(u_xlat1.xyz);
    output.TEXCOORD2.w = half(u_xlat0.x);
    output.TEXCOORD2.xyz = half3(0.0, 0.0, 0.0);
    output.TEXCOORD3.w = half(u_xlat0.y);
    output.TEXCOORD3.xyz = half3(0.0, 0.0, 0.0);
    u_xlat1.x = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = rsqrt(u_xlat13);
    u_xlat0.xyz = float3(u_xlat13) * u_xlat1.xyz;
    output.TEXCOORD4 = half4(u_xlat0);
    u_xlat16_2 = half(u_xlat0.y * u_xlat0.y);
    u_xlat16_2 = half(u_xlat0.x * u_xlat0.x + (-float(u_xlat16_2)));
    u_xlat16_0 = half4(u_xlat0.yzzx * u_xlat0.xyzz);
    u_xlat16_3.x = dot(Globals.unity_SHBr, u_xlat16_0);
    u_xlat16_3.y = dot(Globals.unity_SHBg, u_xlat16_0);
    u_xlat16_3.z = dot(Globals.unity_SHBb, u_xlat16_0);
    output.TEXCOORD5.xyz = Globals.unity_SHC.xyz * half3(u_xlat16_2) + u_xlat16_3.xyz;
    output.TEXCOORD5.w = half(0.0);
    output.TEXCOORD6.xy = float2(0.0, 0.0);
    return output;
}


-- Hardware tier variant: Tier 3
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0 sampler slot 1
Set 2D Texture "_OcclusionMap" to slot 1 sampler slot 2
Set 2D Texture "_EmissionMap" to slot 2 sampler slot 3
Set CUBE Texture "unity_SpecCube0" to slot 3 sampler slot 0
Set 2D Texture "_ShadowMapTexture" to slot 4

Constant Buffer "Globals" (440 bytes) on slot 0 {
  Matrix4x4 unity_WorldToShadow[4] at 48
  Matrix4x4 unity_MatrixV at 336
  Vector3 _WorldSpaceCameraPos at 0
  VectorHalf4 _WorldSpaceLightPos0 at 16
  VectorHalf4 unity_SHAr at 24
  VectorHalf4 unity_SHAg at 32
  VectorHalf4 unity_SHAb at 40
  VectorHalf4 _LightShadowData at 304
  Vector4 unity_ShadowFadeCenterAndType at 320
  VectorHalf4 unity_SpecCube0_HDR at 400
  VectorHalf4 _LightColor0 at 408
  VectorHalf4 _Color at 416
  ScalarHalf _Metallic at 424
  ScalarHalf _Glossiness at 426
  ScalarHalf _OcclusionStrength at 428
  VectorHalf4 _EmissionColor at 432
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    half4 _WorldSpaceLightPos0;
    half4 unity_SHAr;
    half4 unity_SHAg;
    half4 unity_SHAb;
    float4 hlslcc_mtx4x4unity_WorldToShadow[16];
    half4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    half4 unity_SpecCube0_HDR;
    half4 _LightColor0;
    half4 _Color;
    half _Metallic;
    half _Glossiness;
    half _OcclusionStrength;
    half4 _EmissionColor;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    half4 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(0) ]];
};

constexpr sampler _mtl_xl_shadow_sampler(address::clamp_to_edge, filter::linear, compare_func::greater_equal);
fragment Mtl_FragmentOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    sampler samplerunity_SpecCube0 [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_OcclusionMap [[ sampler (2) ]],
    sampler sampler_EmissionMap [[ sampler (3) ]],
    sampler sampler_ShadowMapTexture [[ sampler (4) ]],
    texture2d<half, access::sample > _MainTex [[ texture (0) ]] ,
    texture2d<half, access::sample > _OcclusionMap [[ texture (1) ]] ,
    texture2d<half, access::sample > _EmissionMap [[ texture (2) ]] ,
    texturecube<half, access::sample > unity_SpecCube0 [[ texture (3) ]] ,
    depth2d<float, access::sample > _ShadowMapTexture [[ texture (4) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half4 u_xlat16_0;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half4 u_xlat16_2;
    float3 u_xlat3;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    half3 u_xlat16_6;
    half3 u_xlat16_7;
    half3 u_xlat16_8;
    half3 u_xlat16_9;
    float3 u_xlat10;
    half u_xlat16_10;
    half3 u_xlat16_14;
    half u_xlat16_24;
    float u_xlat30;
    half u_xlat16_30;
    half u_xlat16_31;
    half u_xlat16_34;
    u_xlat0.x = Globals.hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat0.y = Globals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.z = Globals.hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat16_1.x = input.TEXCOORD2.w;
    u_xlat16_1.y = input.TEXCOORD3.w;
    u_xlat16_1.z = input.TEXCOORD4.w;
    u_xlat2.xyz = (-float3(u_xlat16_1.xyz)) + Globals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat3.xyz = float3(u_xlat16_1.xyz) + (-Globals.unity_ShadowFadeCenterAndType.xyz);
    u_xlat30 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat30 = sqrt(u_xlat30);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat10.x = (-u_xlat0.x) + u_xlat30;
    u_xlat0.x = Globals.unity_ShadowFadeCenterAndType.w * u_xlat10.x + u_xlat0.x;
    u_xlat0.x = u_xlat0.x * float(Globals._LightShadowData.z) + float(Globals._LightShadowData.w);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat10.xyz = float3(input.TEXCOORD3.www) * Globals.hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
    u_xlat10.xyz = Globals.hlslcc_mtx4x4unity_WorldToShadow[0].xyz * float3(input.TEXCOORD2.www) + u_xlat10.xyz;
    u_xlat10.xyz = Globals.hlslcc_mtx4x4unity_WorldToShadow[2].xyz * float3(input.TEXCOORD4.www) + u_xlat10.xyz;
    u_xlat10.xyz = u_xlat10.xyz + Globals.hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
    u_xlat16_10 = _ShadowMapTexture.sample_compare(_mtl_xl_shadow_sampler, u_xlat10.xy, saturate(u_xlat10.z), level(0.0));
    u_xlat16_1.x = (-Globals._LightShadowData.x) + half(1.0);
    u_xlat16_1.x = u_xlat16_10 * u_xlat16_1.x + Globals._LightShadowData.x;
    u_xlat16_1.x = half(u_xlat0.x + float(u_xlat16_1.x));
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0h, 1.0h);
    u_xlat16_1.xyz = u_xlat16_1.xxx * Globals._LightColor0.xyz;
    u_xlat16_31 = dot(input.TEXCOORD1.xyz, input.TEXCOORD1.xyz);
    u_xlat16_31 = rsqrt(u_xlat16_31);
    u_xlat16_4.xyz = (-input.TEXCOORD1.xyz) * half3(u_xlat16_31) + Globals._WorldSpaceLightPos0.xyz;
    u_xlat16_5.xyz = half3(u_xlat16_31) * input.TEXCOORD1.xyz;
    u_xlat16_31 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
    u_xlat16_0.x = max(u_xlat16_31, half(0.00100000005));
    u_xlat16_31 = rsqrt(u_xlat16_0.x);
    u_xlat16_4.xyz = half3(u_xlat16_31) * u_xlat16_4.xyz;
    u_xlat16_31 = dot(Globals._WorldSpaceLightPos0.xyz, u_xlat16_4.xyz);
    u_xlat16_31 = clamp(u_xlat16_31, 0.0h, 1.0h);
    u_xlat16_0.x = max(u_xlat16_31, half(0.319999993));
    u_xlat16_31 = (-Globals._Glossiness) + half(1.0);
    u_xlat16_10 = u_xlat16_31 * u_xlat16_31 + half(1.5);
    u_xlat16_0.x = u_xlat16_10 * u_xlat16_0.x;
    u_xlat16_34 = dot(input.TEXCOORD4.xyz, input.TEXCOORD4.xyz);
    u_xlat16_34 = rsqrt(u_xlat16_34);
    u_xlat16_2.xyz = half3(u_xlat16_34) * input.TEXCOORD4.xyz;
    u_xlat16_4.x = dot(u_xlat16_2.xyz, u_xlat16_4.xyz);
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0h, 1.0h);
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_14.x = u_xlat16_31 * u_xlat16_31;
    u_xlat16_10 = u_xlat16_14.x * u_xlat16_14.x + half(-1.0);
    u_xlat16_10 = u_xlat16_4.x * u_xlat16_10 + half(1.00001001);
    u_xlat16_0.x = u_xlat16_10 * u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_14.x / u_xlat16_0.x;
    u_xlat16_4.x = u_xlat16_31 * u_xlat16_14.x;
    u_xlat16_4.x = (-u_xlat16_4.x) * half(0.280000001) + half(1.0);
    u_xlat16_0.x = u_xlat16_0.x + half(-9.99999975e-05);
    u_xlat16_14.x = max(u_xlat16_0.x, half(0.0));
    u_xlat16_14.x = min(u_xlat16_14.x, half(100.0));
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_0.xyz * Globals._Color.xyz;
    u_xlat16_6.xyz = Globals._Color.xyz * u_xlat16_0.xyz + half3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat16_6.xyz = half3(Globals._Metallic) * u_xlat16_6.xyz + half3(0.220916301, 0.220916301, 0.220916301);
    u_xlat16_24 = (-Globals._Metallic) * half(0.779083729) + half(0.779083729);
    u_xlat16_7.xyz = u_xlat16_3.xyz * half3(u_xlat16_24);
    u_xlat16_24 = (-u_xlat16_24) + Globals._Glossiness;
    u_xlat16_24 = u_xlat16_24 + half(1.0);
    u_xlat16_24 = clamp(u_xlat16_24, 0.0h, 1.0h);
    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + half3(u_xlat16_24);
    u_xlat16_14.xyz = u_xlat16_14.xxx * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_14.xyz;
    u_xlat16_2.w = half(1.0);
    u_xlat16_9.x = dot(Globals.unity_SHAr, u_xlat16_2);
    u_xlat16_9.y = dot(Globals.unity_SHAg, u_xlat16_2);
    u_xlat16_9.z = dot(Globals.unity_SHAb, u_xlat16_2);
    u_xlat16_14.xyz = u_xlat16_9.xyz + input.TEXCOORD5.xyz;
    u_xlat16_14.xyz = max(u_xlat16_14.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_0.xyz = log2(u_xlat16_14.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * half3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * half3(1.05499995, 1.05499995, 1.05499995) + half3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_0.xyz = max(u_xlat16_0.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_30 = _OcclusionMap.sample(sampler_OcclusionMap, input.TEXCOORD0.xy).y;
    u_xlat16_14.x = (-Globals._OcclusionStrength) + half(1.0);
    u_xlat16_14.x = u_xlat16_30 * Globals._OcclusionStrength + u_xlat16_14.x;
    u_xlat16_9.xyz = u_xlat16_0.xyz * u_xlat16_14.xxx;
    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_9.xyz;
    u_xlat16_24 = dot(u_xlat16_2.xyz, Globals._WorldSpaceLightPos0.xyz);
    u_xlat16_24 = clamp(u_xlat16_24, 0.0h, 1.0h);
    u_xlat16_1.xyz = u_xlat16_1.xyz * half3(u_xlat16_24) + u_xlat16_7.xyz;
    u_xlat16_24 = (-u_xlat16_31) * half(0.699999988) + half(1.70000005);
    u_xlat16_31 = u_xlat16_31 * u_xlat16_24;
    u_xlat16_31 = u_xlat16_31 * half(6.0);
    u_xlat16_24 = dot(u_xlat16_5.xyz, u_xlat16_2.xyz);
    u_xlat16_24 = u_xlat16_24 + u_xlat16_24;
    u_xlat16_7.xyz = u_xlat16_2.xyz * (-half3(u_xlat16_24)) + u_xlat16_5.xyz;
    u_xlat16_24 = dot(u_xlat16_2.xyz, (-u_xlat16_5.xyz));
    u_xlat16_24 = clamp(u_xlat16_24, 0.0h, 1.0h);
    u_xlat16_24 = (-u_xlat16_24) + half(1.0);
    u_xlat16_24 = u_xlat16_24 * u_xlat16_24;
    u_xlat16_24 = u_xlat16_24 * u_xlat16_24;
    u_xlat16_5.xyz = half3(u_xlat16_24) * u_xlat16_8.xyz + u_xlat16_6.xyz;
    u_xlat16_0 = unity_SpecCube0.sample(samplerunity_SpecCube0, float3(u_xlat16_7.xyz), level(float(u_xlat16_31)));
    u_xlat16_31 = u_xlat16_0.w + half(-1.0);
    u_xlat16_31 = Globals.unity_SpecCube0_HDR.w * u_xlat16_31 + half(1.0);
    u_xlat16_31 = u_xlat16_31 * Globals.unity_SpecCube0_HDR.x;
    u_xlat16_6.xyz = u_xlat16_0.xyz * half3(u_xlat16_31);
    u_xlat16_14.xyz = u_xlat16_14.xxx * u_xlat16_6.xyz;
    u_xlat16_4.xyz = u_xlat16_14.xyz * u_xlat16_4.xxx;
    u_xlat16_1.xyz = u_xlat16_4.xyz * u_xlat16_5.xyz + u_xlat16_1.xyz;
    u_xlat16_0.xyz = _EmissionMap.sample(sampler_EmissionMap, input.TEXCOORD0.xy).xyz;
    output.SV_Target0.xyz = u_xlat16_0.xyz * Globals._EmissionColor.xyz + u_xlat16_1.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}


-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"
Uses vertex data channel "TexCoord0"

Constant Buffer "Globals" (274 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 48
  Matrix4x4 unity_WorldToObject at 112
  Matrix4x4 unity_MatrixVP at 176
  Vector3 _WorldSpaceCameraPos at 0
  VectorHalf4 unity_SHBr at 16
  VectorHalf4 unity_SHBg at 24
  VectorHalf4 unity_SHBb at 32
  VectorHalf4 unity_SHC at 40
  Vector4 _MainTex_ST at 240
  Vector4 _DetailAlbedoMap_ST at 256
  ScalarHalf _UVSec at 272
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    float4 _DetailAlbedoMap_ST;
    half _UVSec;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    half3 NORMAL0 [[ attribute(1) ]] ;
    float2 TEXCOORD0 [[ attribute(2) ]] ;
    float2 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    half4 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float2 TEXCOORD6 [[ user(TEXCOORD6) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    half4 u_xlat16_0;
    bool u_xlatb0;
    float4 u_xlat1;
    half u_xlat16_2;
    half3 u_xlat16_3;
    float u_xlat13;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0] * input.POSITION0.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2] * input.POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    output.mtl_Position = Globals.hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlatb0 = Globals._UVSec==half(0.0);
    u_xlat0.xy = (bool(u_xlatb0)) ? input.TEXCOORD0.xy : input.TEXCOORD1.xy;
    output.TEXCOORD0.zw = u_xlat0.xy * Globals._DetailAlbedoMap_ST.xy + Globals._DetailAlbedoMap_ST.zw;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy * Globals._MainTex_ST.xy + Globals._MainTex_ST.zw;
    u_xlat0.xyz = input.POSITION0.yyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * input.POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * input.POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyw = Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * input.POSITION0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyw + (-Globals._WorldSpaceCameraPos.xyzx.xyz);
    output.TEXCOORD1.xyz = half3(u_xlat1.xyz);
    output.TEXCOORD2.w = half(u_xlat0.x);
    output.TEXCOORD2.xyz = half3(0.0, 0.0, 0.0);
    output.TEXCOORD3.w = half(u_xlat0.y);
    output.TEXCOORD3.xyz = half3(0.0, 0.0, 0.0);
    u_xlat1.x = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = rsqrt(u_xlat13);
    u_xlat0.xyz = float3(u_xlat13) * u_xlat1.xyz;
    output.TEXCOORD4 = half4(u_xlat0);
    u_xlat16_2 = half(u_xlat0.y * u_xlat0.y);
    u_xlat16_2 = half(u_xlat0.x * u_xlat0.x + (-float(u_xlat16_2)));
    u_xlat16_0 = half4(u_xlat0.yzzx * u_xlat0.xyzz);
    u_xlat16_3.x = dot(Globals.unity_SHBr, u_xlat16_0);
    u_xlat16_3.y = dot(Globals.unity_SHBg, u_xlat16_0);
    u_xlat16_3.z = dot(Globals.unity_SHBb, u_xlat16_0);
    output.TEXCOORD5.xyz = Globals.unity_SHC.xyz * half3(u_xlat16_2) + u_xlat16_3.xyz;
    output.TEXCOORD5.w = half(0.0);
    output.TEXCOORD6.xy = float2(0.0, 0.0);
    return output;
}


-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0 sampler slot 2
Set 2D Texture "_OcclusionMap" to slot 1 sampler slot 3
Set 2D Texture "unity_NHxRoughness" to slot 2 sampler slot 1
Set CUBE Texture "unity_SpecCube0" to slot 3 sampler slot 0
Set 2D Texture "_ShadowMapTexture" to slot 4

Constant Buffer "Globals" (430 bytes) on slot 0 {
  Matrix4x4 unity_WorldToShadow[4] at 48
  Matrix4x4 unity_MatrixV at 336
  Vector3 _WorldSpaceCameraPos at 0
  VectorHalf4 _WorldSpaceLightPos0 at 16
  VectorHalf4 unity_SHAr at 24
  VectorHalf4 unity_SHAg at 32
  VectorHalf4 unity_SHAb at 40
  VectorHalf4 _LightShadowData at 304
  Vector4 unity_ShadowFadeCenterAndType at 320
  VectorHalf4 unity_SpecCube0_HDR at 400
  VectorHalf4 _LightColor0 at 408
  VectorHalf4 _Color at 416
  ScalarHalf _Metallic at 424
  ScalarHalf _Glossiness at 426
  ScalarHalf _OcclusionStrength at 428
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    half4 _WorldSpaceLightPos0;
    half4 unity_SHAr;
    half4 unity_SHAg;
    half4 unity_SHAb;
    float4 hlslcc_mtx4x4unity_WorldToShadow[16];
    half4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    half4 unity_SpecCube0_HDR;
    half4 _LightColor0;
    half4 _Color;
    half _Metallic;
    half _Glossiness;
    half _OcclusionStrength;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    half4 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(0) ]];
};

constexpr sampler _mtl_xl_shadow_sampler(address::clamp_to_edge, filter::linear, compare_func::greater_equal);
fragment Mtl_FragmentOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    sampler samplerunity_SpecCube0 [[ sampler (0) ]],
    sampler samplerunity_NHxRoughness [[ sampler (1) ]],
    sampler sampler_MainTex [[ sampler (2) ]],
    sampler sampler_OcclusionMap [[ sampler (3) ]],
    sampler sampler_ShadowMapTexture [[ sampler (4) ]],
    texture2d<half, access::sample > _MainTex [[ texture (0) ]] ,
    texture2d<half, access::sample > _OcclusionMap [[ texture (1) ]] ,
    texture2d<half, access::sample > unity_NHxRoughness [[ texture (2) ]] ,
    texturecube<half, access::sample > unity_SpecCube0 [[ texture (3) ]] ,
    depth2d<float, access::sample > _ShadowMapTexture [[ texture (4) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half4 u_xlat16_0;
    half3 u_xlat16_1;
    half4 u_xlat16_2;
    half4 u_xlat16_3;
    half4 u_xlat16_4;
    half3 u_xlat16_5;
    half3 u_xlat16_6;
    float3 u_xlat7;
    half3 u_xlat16_7;
    float3 u_xlat8;
    float3 u_xlat9;
    half3 u_xlat16_11;
    half u_xlat16_12;
    float3 u_xlat17;
    half u_xlat16_17;
    half u_xlat16_21;
    half u_xlat16_31;
    half u_xlat16_32;
    float u_xlat37;
    u_xlat16_0.x = _OcclusionMap.sample(sampler_OcclusionMap, input.TEXCOORD0.xy).y;
    u_xlat16_1.x = (-Globals._OcclusionStrength) + half(1.0);
    u_xlat16_1.x = u_xlat16_0.x * Globals._OcclusionStrength + u_xlat16_1.x;
    u_xlat16_0.xw = (-half2(Globals._Glossiness)) + half2(1.0, 1.0);
    u_xlat16_11.x = (-u_xlat16_0.x) * half(0.699999988) + half(1.70000005);
    u_xlat16_11.x = u_xlat16_0.x * u_xlat16_11.x;
    u_xlat16_11.x = u_xlat16_11.x * half(6.0);
    u_xlat16_21 = dot(input.TEXCOORD1.xyz, input.TEXCOORD1.xyz);
    u_xlat16_21 = rsqrt(u_xlat16_21);
    u_xlat16_2.xyz = half3(u_xlat16_21) * input.TEXCOORD1.xyz;
    u_xlat16_21 = dot(input.TEXCOORD4.xyz, input.TEXCOORD4.xyz);
    u_xlat16_21 = rsqrt(u_xlat16_21);
    u_xlat16_3.xyz = half3(u_xlat16_21) * input.TEXCOORD4.xyz;
    u_xlat16_21 = dot(u_xlat16_2.xyz, u_xlat16_3.xyz);
    u_xlat16_21 = u_xlat16_21 + u_xlat16_21;
    u_xlat16_4.xyz = u_xlat16_3.xyz * (-half3(u_xlat16_21)) + u_xlat16_2.xyz;
    u_xlat16_4 = unity_SpecCube0.sample(samplerunity_SpecCube0, float3(u_xlat16_4.xyz), level(float(u_xlat16_11.x)));
    u_xlat16_11.x = u_xlat16_4.w + half(-1.0);
    u_xlat16_11.x = Globals.unity_SpecCube0_HDR.w * u_xlat16_11.x + half(1.0);
    u_xlat16_11.x = u_xlat16_11.x * Globals.unity_SpecCube0_HDR.x;
    u_xlat16_11.xyz = u_xlat16_4.xyz * u_xlat16_11.xxx;
    u_xlat16_11.xyz = u_xlat16_1.xxx * u_xlat16_11.xyz;
    u_xlat16_32 = dot((-u_xlat16_2.xyz), u_xlat16_3.xyz);
    u_xlat16_5.x = u_xlat16_32 + u_xlat16_32;
    u_xlat16_32 = u_xlat16_32;
    u_xlat16_32 = clamp(u_xlat16_32, 0.0h, 1.0h);
    u_xlat16_6.y = (-u_xlat16_32) + half(1.0);
    u_xlat16_2.xyz = u_xlat16_3.xyz * (-u_xlat16_5.xxx) + (-u_xlat16_2.xyz);
    u_xlat16_6.x = dot(u_xlat16_2.xyz, Globals._WorldSpaceLightPos0.xyz);
    u_xlat16_2.xy = u_xlat16_6.xy * u_xlat16_6.xy;
    u_xlat16_0.yz = u_xlat16_2.xy * u_xlat16_2.xy;
    u_xlat16_2.x = (-Globals._Metallic) * half(0.779083729) + half(0.779083729);
    u_xlat16_12 = (-u_xlat16_2.x) + Globals._Glossiness;
    u_xlat16_12 = u_xlat16_12 + half(1.0);
    u_xlat16_12 = clamp(u_xlat16_12, 0.0h, 1.0h);
    u_xlat16_7.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_5.xyz = Globals._Color.xyz * u_xlat16_7.xyz + half3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat16_7.xyz = u_xlat16_7.xyz * Globals._Color.xyz;
    u_xlat16_2.xzw = u_xlat16_2.xxx * u_xlat16_7.xyz;
    u_xlat16_5.xyz = half3(Globals._Metallic) * u_xlat16_5.xyz + half3(0.220916301, 0.220916301, 0.220916301);
    u_xlat16_6.xyz = half3(u_xlat16_12) + (-u_xlat16_5.xyz);
    u_xlat16_6.xyz = u_xlat16_0.zzz * u_xlat16_6.xyz + u_xlat16_5.xyz;
    u_xlat16_7.x = unity_NHxRoughness.sample(samplerunity_NHxRoughness, float2(u_xlat16_0.yw)).w;
    u_xlat16_7.x = u_xlat16_7.x * half(16.0);
    u_xlat16_5.xyz = u_xlat16_7.xxx * u_xlat16_5.xyz + u_xlat16_2.xzw;
    u_xlat16_11.xyz = u_xlat16_11.xyz * u_xlat16_6.xyz;
    u_xlat16_3.w = half(1.0);
    u_xlat16_6.x = dot(Globals.unity_SHAr, u_xlat16_3);
    u_xlat16_6.y = dot(Globals.unity_SHAg, u_xlat16_3);
    u_xlat16_6.z = dot(Globals.unity_SHAb, u_xlat16_3);
    u_xlat16_12 = dot(u_xlat16_3.xyz, Globals._WorldSpaceLightPos0.xyz);
    u_xlat16_12 = clamp(u_xlat16_12, 0.0h, 1.0h);
    u_xlat16_3.xyz = u_xlat16_6.xyz + input.TEXCOORD5.xyz;
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_7.xyz = log2(u_xlat16_3.xyz);
    u_xlat16_7.xyz = u_xlat16_7.xyz * half3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_7.xyz = exp2(u_xlat16_7.xyz);
    u_xlat16_7.xyz = u_xlat16_7.xyz * half3(1.05499995, 1.05499995, 1.05499995) + half3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_7.xyz = max(u_xlat16_7.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_3.xyz = u_xlat16_1.xxx * u_xlat16_7.xyz;
    u_xlat16_1.xyz = u_xlat16_3.xyz * u_xlat16_2.xzw + u_xlat16_11.xyz;
    u_xlat7.x = Globals.hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat7.y = Globals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat7.z = Globals.hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat16_3.x = input.TEXCOORD2.w;
    u_xlat16_3.y = input.TEXCOORD3.w;
    u_xlat16_3.z = input.TEXCOORD4.w;
    u_xlat8.xyz = (-float3(u_xlat16_3.xyz)) + Globals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat9.xyz = float3(u_xlat16_3.xyz) + (-Globals.unity_ShadowFadeCenterAndType.xyz);
    u_xlat37 = dot(u_xlat9.xyz, u_xlat9.xyz);
    u_xlat37 = sqrt(u_xlat37);
    u_xlat7.x = dot(u_xlat8.xyz, u_xlat7.xyz);
    u_xlat17.x = (-u_xlat7.x) + u_xlat37;
    u_xlat7.x = Globals.unity_ShadowFadeCenterAndType.w * u_xlat17.x + u_xlat7.x;
    u_xlat7.x = u_xlat7.x * float(Globals._LightShadowData.z) + float(Globals._LightShadowData.w);
    u_xlat7.x = clamp(u_xlat7.x, 0.0f, 1.0f);
    u_xlat17.xyz = float3(input.TEXCOORD3.www) * Globals.hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
    u_xlat17.xyz = Globals.hlslcc_mtx4x4unity_WorldToShadow[0].xyz * float3(input.TEXCOORD2.www) + u_xlat17.xyz;
    u_xlat17.xyz = Globals.hlslcc_mtx4x4unity_WorldToShadow[2].xyz * float3(input.TEXCOORD4.www) + u_xlat17.xyz;
    u_xlat17.xyz = u_xlat17.xyz + Globals.hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
    u_xlat16_17 = _ShadowMapTexture.sample_compare(_mtl_xl_shadow_sampler, u_xlat17.xy, saturate(u_xlat17.z), level(0.0));
    u_xlat16_31 = (-Globals._LightShadowData.x) + half(1.0);
    u_xlat16_31 = u_xlat16_17 * u_xlat16_31 + Globals._LightShadowData.x;
    u_xlat16_31 = half(u_xlat7.x + float(u_xlat16_31));
    u_xlat16_31 = clamp(u_xlat16_31, 0.0h, 1.0h);
    u_xlat16_2.xzw = half3(u_xlat16_31) * Globals._LightColor0.xyz;
    u_xlat16_2.xyz = half3(u_xlat16_12) * u_xlat16_2.xzw;
    output.SV_Target0.xyz = u_xlat16_5.xyz * u_xlat16_2.xyz + u_xlat16_1.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}


-- Hardware tier variant: Tier 2
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"
Uses vertex data channel "TexCoord0"

Constant Buffer "Globals" (274 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 48
  Matrix4x4 unity_WorldToObject at 112
  Matrix4x4 unity_MatrixVP at 176
  Vector3 _WorldSpaceCameraPos at 0
  VectorHalf4 unity_SHBr at 16
  VectorHalf4 unity_SHBg at 24
  VectorHalf4 unity_SHBb at 32
  VectorHalf4 unity_SHC at 40
  Vector4 _MainTex_ST at 240
  Vector4 _DetailAlbedoMap_ST at 256
  ScalarHalf _UVSec at 272
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    float4 _DetailAlbedoMap_ST;
    half _UVSec;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    half3 NORMAL0 [[ attribute(1) ]] ;
    float2 TEXCOORD0 [[ attribute(2) ]] ;
    float2 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    half4 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float2 TEXCOORD6 [[ user(TEXCOORD6) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    half4 u_xlat16_0;
    bool u_xlatb0;
    float4 u_xlat1;
    half u_xlat16_2;
    half3 u_xlat16_3;
    float u_xlat13;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0] * input.POSITION0.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2] * input.POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    output.mtl_Position = Globals.hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlatb0 = Globals._UVSec==half(0.0);
    u_xlat0.xy = (bool(u_xlatb0)) ? input.TEXCOORD0.xy : input.TEXCOORD1.xy;
    output.TEXCOORD0.zw = u_xlat0.xy * Globals._DetailAlbedoMap_ST.xy + Globals._DetailAlbedoMap_ST.zw;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy * Globals._MainTex_ST.xy + Globals._MainTex_ST.zw;
    u_xlat0.xyz = input.POSITION0.yyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * input.POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * input.POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyw = Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * input.POSITION0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyw + (-Globals._WorldSpaceCameraPos.xyzx.xyz);
    output.TEXCOORD1.xyz = half3(u_xlat1.xyz);
    output.TEXCOORD2.w = half(u_xlat0.x);
    output.TEXCOORD2.xyz = half3(0.0, 0.0, 0.0);
    output.TEXCOORD3.w = half(u_xlat0.y);
    output.TEXCOORD3.xyz = half3(0.0, 0.0, 0.0);
    u_xlat1.x = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = rsqrt(u_xlat13);
    u_xlat0.xyz = float3(u_xlat13) * u_xlat1.xyz;
    output.TEXCOORD4 = half4(u_xlat0);
    u_xlat16_2 = half(u_xlat0.y * u_xlat0.y);
    u_xlat16_2 = half(u_xlat0.x * u_xlat0.x + (-float(u_xlat16_2)));
    u_xlat16_0 = half4(u_xlat0.yzzx * u_xlat0.xyzz);
    u_xlat16_3.x = dot(Globals.unity_SHBr, u_xlat16_0);
    u_xlat16_3.y = dot(Globals.unity_SHBg, u_xlat16_0);
    u_xlat16_3.z = dot(Globals.unity_SHBb, u_xlat16_0);
    output.TEXCOORD5.xyz = Globals.unity_SHC.xyz * half3(u_xlat16_2) + u_xlat16_3.xyz;
    output.TEXCOORD5.w = half(0.0);
    output.TEXCOORD6.xy = float2(0.0, 0.0);
    return output;
}


-- Hardware tier variant: Tier 2
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0 sampler slot 1
Set 2D Texture "_OcclusionMap" to slot 1 sampler slot 2
Set CUBE Texture "unity_SpecCube0" to slot 2 sampler slot 0
Set 2D Texture "_ShadowMapTexture" to slot 3

Constant Buffer "Globals" (430 bytes) on slot 0 {
  Matrix4x4 unity_WorldToShadow[4] at 48
  Matrix4x4 unity_MatrixV at 336
  Vector3 _WorldSpaceCameraPos at 0
  VectorHalf4 _WorldSpaceLightPos0 at 16
  VectorHalf4 unity_SHAr at 24
  VectorHalf4 unity_SHAg at 32
  VectorHalf4 unity_SHAb at 40
  VectorHalf4 _LightShadowData at 304
  Vector4 unity_ShadowFadeCenterAndType at 320
  VectorHalf4 unity_SpecCube0_HDR at 400
  VectorHalf4 _LightColor0 at 408
  VectorHalf4 _Color at 416
  ScalarHalf _Metallic at 424
  ScalarHalf _Glossiness at 426
  ScalarHalf _OcclusionStrength at 428
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    half4 _WorldSpaceLightPos0;
    half4 unity_SHAr;
    half4 unity_SHAg;
    half4 unity_SHAb;
    float4 hlslcc_mtx4x4unity_WorldToShadow[16];
    half4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    half4 unity_SpecCube0_HDR;
    half4 _LightColor0;
    half4 _Color;
    half _Metallic;
    half _Glossiness;
    half _OcclusionStrength;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    half4 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(0) ]];
};

constexpr sampler _mtl_xl_shadow_sampler(address::clamp_to_edge, filter::linear, compare_func::greater_equal);
fragment Mtl_FragmentOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    sampler samplerunity_SpecCube0 [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_OcclusionMap [[ sampler (2) ]],
    sampler sampler_ShadowMapTexture [[ sampler (3) ]],
    texture2d<half, access::sample > _MainTex [[ texture (0) ]] ,
    texture2d<half, access::sample > _OcclusionMap [[ texture (1) ]] ,
    texturecube<half, access::sample > unity_SpecCube0 [[ texture (2) ]] ,
    depth2d<float, access::sample > _ShadowMapTexture [[ texture (3) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half4 u_xlat16_0;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half4 u_xlat16_2;
    float3 u_xlat3;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    half3 u_xlat16_6;
    half3 u_xlat16_7;
    half3 u_xlat16_8;
    half3 u_xlat16_9;
    float3 u_xlat10;
    half u_xlat16_10;
    half3 u_xlat16_14;
    half u_xlat16_24;
    float u_xlat30;
    half u_xlat16_30;
    half u_xlat16_31;
    half u_xlat16_34;
    u_xlat0.x = Globals.hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat0.y = Globals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.z = Globals.hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat16_1.x = input.TEXCOORD2.w;
    u_xlat16_1.y = input.TEXCOORD3.w;
    u_xlat16_1.z = input.TEXCOORD4.w;
    u_xlat2.xyz = (-float3(u_xlat16_1.xyz)) + Globals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat3.xyz = float3(u_xlat16_1.xyz) + (-Globals.unity_ShadowFadeCenterAndType.xyz);
    u_xlat30 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat30 = sqrt(u_xlat30);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat10.x = (-u_xlat0.x) + u_xlat30;
    u_xlat0.x = Globals.unity_ShadowFadeCenterAndType.w * u_xlat10.x + u_xlat0.x;
    u_xlat0.x = u_xlat0.x * float(Globals._LightShadowData.z) + float(Globals._LightShadowData.w);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat10.xyz = float3(input.TEXCOORD3.www) * Globals.hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
    u_xlat10.xyz = Globals.hlslcc_mtx4x4unity_WorldToShadow[0].xyz * float3(input.TEXCOORD2.www) + u_xlat10.xyz;
    u_xlat10.xyz = Globals.hlslcc_mtx4x4unity_WorldToShadow[2].xyz * float3(input.TEXCOORD4.www) + u_xlat10.xyz;
    u_xlat10.xyz = u_xlat10.xyz + Globals.hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
    u_xlat16_10 = _ShadowMapTexture.sample_compare(_mtl_xl_shadow_sampler, u_xlat10.xy, saturate(u_xlat10.z), level(0.0));
    u_xlat16_1.x = (-Globals._LightShadowData.x) + half(1.0);
    u_xlat16_1.x = u_xlat16_10 * u_xlat16_1.x + Globals._LightShadowData.x;
    u_xlat16_1.x = half(u_xlat0.x + float(u_xlat16_1.x));
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0h, 1.0h);
    u_xlat16_1.xyz = u_xlat16_1.xxx * Globals._LightColor0.xyz;
    u_xlat16_31 = dot(input.TEXCOORD1.xyz, input.TEXCOORD1.xyz);
    u_xlat16_31 = rsqrt(u_xlat16_31);
    u_xlat16_4.xyz = (-input.TEXCOORD1.xyz) * half3(u_xlat16_31) + Globals._WorldSpaceLightPos0.xyz;
    u_xlat16_5.xyz = half3(u_xlat16_31) * input.TEXCOORD1.xyz;
    u_xlat16_31 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
    u_xlat16_0.x = max(u_xlat16_31, half(0.00100000005));
    u_xlat16_31 = rsqrt(u_xlat16_0.x);
    u_xlat16_4.xyz = half3(u_xlat16_31) * u_xlat16_4.xyz;
    u_xlat16_31 = dot(Globals._WorldSpaceLightPos0.xyz, u_xlat16_4.xyz);
    u_xlat16_31 = clamp(u_xlat16_31, 0.0h, 1.0h);
    u_xlat16_0.x = max(u_xlat16_31, half(0.319999993));
    u_xlat16_31 = (-Globals._Glossiness) + half(1.0);
    u_xlat16_10 = u_xlat16_31 * u_xlat16_31 + half(1.5);
    u_xlat16_0.x = u_xlat16_10 * u_xlat16_0.x;
    u_xlat16_34 = dot(input.TEXCOORD4.xyz, input.TEXCOORD4.xyz);
    u_xlat16_34 = rsqrt(u_xlat16_34);
    u_xlat16_2.xyz = half3(u_xlat16_34) * input.TEXCOORD4.xyz;
    u_xlat16_4.x = dot(u_xlat16_2.xyz, u_xlat16_4.xyz);
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0h, 1.0h);
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_14.x = u_xlat16_31 * u_xlat16_31;
    u_xlat16_10 = u_xlat16_14.x * u_xlat16_14.x + half(-1.0);
    u_xlat16_10 = u_xlat16_4.x * u_xlat16_10 + half(1.00001001);
    u_xlat16_0.x = u_xlat16_10 * u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_14.x / u_xlat16_0.x;
    u_xlat16_4.x = u_xlat16_31 * u_xlat16_14.x;
    u_xlat16_4.x = (-u_xlat16_4.x) * half(0.280000001) + half(1.0);
    u_xlat16_0.x = u_xlat16_0.x + half(-9.99999975e-05);
    u_xlat16_14.x = max(u_xlat16_0.x, half(0.0));
    u_xlat16_14.x = min(u_xlat16_14.x, half(100.0));
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_0.xyz * Globals._Color.xyz;
    u_xlat16_6.xyz = Globals._Color.xyz * u_xlat16_0.xyz + half3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat16_6.xyz = half3(Globals._Metallic) * u_xlat16_6.xyz + half3(0.220916301, 0.220916301, 0.220916301);
    u_xlat16_24 = (-Globals._Metallic) * half(0.779083729) + half(0.779083729);
    u_xlat16_7.xyz = u_xlat16_3.xyz * half3(u_xlat16_24);
    u_xlat16_24 = (-u_xlat16_24) + Globals._Glossiness;
    u_xlat16_24 = u_xlat16_24 + half(1.0);
    u_xlat16_24 = clamp(u_xlat16_24, 0.0h, 1.0h);
    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + half3(u_xlat16_24);
    u_xlat16_14.xyz = u_xlat16_14.xxx * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_14.xyz;
    u_xlat16_2.w = half(1.0);
    u_xlat16_9.x = dot(Globals.unity_SHAr, u_xlat16_2);
    u_xlat16_9.y = dot(Globals.unity_SHAg, u_xlat16_2);
    u_xlat16_9.z = dot(Globals.unity_SHAb, u_xlat16_2);
    u_xlat16_14.xyz = u_xlat16_9.xyz + input.TEXCOORD5.xyz;
    u_xlat16_14.xyz = max(u_xlat16_14.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_0.xyz = log2(u_xlat16_14.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * half3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * half3(1.05499995, 1.05499995, 1.05499995) + half3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_0.xyz = max(u_xlat16_0.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_30 = _OcclusionMap.sample(sampler_OcclusionMap, input.TEXCOORD0.xy).y;
    u_xlat16_14.x = (-Globals._OcclusionStrength) + half(1.0);
    u_xlat16_14.x = u_xlat16_30 * Globals._OcclusionStrength + u_xlat16_14.x;
    u_xlat16_9.xyz = u_xlat16_0.xyz * u_xlat16_14.xxx;
    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_9.xyz;
    u_xlat16_24 = dot(u_xlat16_2.xyz, Globals._WorldSpaceLightPos0.xyz);
    u_xlat16_24 = clamp(u_xlat16_24, 0.0h, 1.0h);
    u_xlat16_1.xyz = u_xlat16_1.xyz * half3(u_xlat16_24) + u_xlat16_7.xyz;
    u_xlat16_24 = (-u_xlat16_31) * half(0.699999988) + half(1.70000005);
    u_xlat16_31 = u_xlat16_31 * u_xlat16_24;
    u_xlat16_31 = u_xlat16_31 * half(6.0);
    u_xlat16_24 = dot(u_xlat16_5.xyz, u_xlat16_2.xyz);
    u_xlat16_24 = u_xlat16_24 + u_xlat16_24;
    u_xlat16_7.xyz = u_xlat16_2.xyz * (-half3(u_xlat16_24)) + u_xlat16_5.xyz;
    u_xlat16_24 = dot(u_xlat16_2.xyz, (-u_xlat16_5.xyz));
    u_xlat16_24 = clamp(u_xlat16_24, 0.0h, 1.0h);
    u_xlat16_24 = (-u_xlat16_24) + half(1.0);
    u_xlat16_24 = u_xlat16_24 * u_xlat16_24;
    u_xlat16_24 = u_xlat16_24 * u_xlat16_24;
    u_xlat16_5.xyz = half3(u_xlat16_24) * u_xlat16_8.xyz + u_xlat16_6.xyz;
    u_xlat16_0 = unity_SpecCube0.sample(samplerunity_SpecCube0, float3(u_xlat16_7.xyz), level(float(u_xlat16_31)));
    u_xlat16_31 = u_xlat16_0.w + half(-1.0);
    u_xlat16_31 = Globals.unity_SpecCube0_HDR.w * u_xlat16_31 + half(1.0);
    u_xlat16_31 = u_xlat16_31 * Globals.unity_SpecCube0_HDR.x;
    u_xlat16_6.xyz = u_xlat16_0.xyz * half3(u_xlat16_31);
    u_xlat16_14.xyz = u_xlat16_14.xxx * u_xlat16_6.xyz;
    u_xlat16_4.xyz = u_xlat16_14.xyz * u_xlat16_4.xxx;
    output.SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_5.xyz + u_xlat16_1.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}


-- Hardware tier variant: Tier 3
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"
Uses vertex data channel "TexCoord0"

Constant Buffer "Globals" (274 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 48
  Matrix4x4 unity_WorldToObject at 112
  Matrix4x4 unity_MatrixVP at 176
  Vector3 _WorldSpaceCameraPos at 0
  VectorHalf4 unity_SHBr at 16
  VectorHalf4 unity_SHBg at 24
  VectorHalf4 unity_SHBb at 32
  VectorHalf4 unity_SHC at 40
  Vector4 _MainTex_ST at 240
  Vector4 _DetailAlbedoMap_ST at 256
  ScalarHalf _UVSec at 272
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    float4 _DetailAlbedoMap_ST;
    half _UVSec;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    half3 NORMAL0 [[ attribute(1) ]] ;
    float2 TEXCOORD0 [[ attribute(2) ]] ;
    float2 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    half4 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float2 TEXCOORD6 [[ user(TEXCOORD6) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    half4 u_xlat16_0;
    bool u_xlatb0;
    float4 u_xlat1;
    half u_xlat16_2;
    half3 u_xlat16_3;
    float u_xlat13;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0] * input.POSITION0.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2] * input.POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    output.mtl_Position = Globals.hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlatb0 = Globals._UVSec==half(0.0);
    u_xlat0.xy = (bool(u_xlatb0)) ? input.TEXCOORD0.xy : input.TEXCOORD1.xy;
    output.TEXCOORD0.zw = u_xlat0.xy * Globals._DetailAlbedoMap_ST.xy + Globals._DetailAlbedoMap_ST.zw;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy * Globals._MainTex_ST.xy + Globals._MainTex_ST.zw;
    u_xlat0.xyz = input.POSITION0.yyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * input.POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * input.POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyw = Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * input.POSITION0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyw + (-Globals._WorldSpaceCameraPos.xyzx.xyz);
    output.TEXCOORD1.xyz = half3(u_xlat1.xyz);
    output.TEXCOORD2.w = half(u_xlat0.x);
    output.TEXCOORD2.xyz = half3(0.0, 0.0, 0.0);
    output.TEXCOORD3.w = half(u_xlat0.y);
    output.TEXCOORD3.xyz = half3(0.0, 0.0, 0.0);
    u_xlat1.x = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = rsqrt(u_xlat13);
    u_xlat0.xyz = float3(u_xlat13) * u_xlat1.xyz;
    output.TEXCOORD4 = half4(u_xlat0);
    u_xlat16_2 = half(u_xlat0.y * u_xlat0.y);
    u_xlat16_2 = half(u_xlat0.x * u_xlat0.x + (-float(u_xlat16_2)));
    u_xlat16_0 = half4(u_xlat0.yzzx * u_xlat0.xyzz);
    u_xlat16_3.x = dot(Globals.unity_SHBr, u_xlat16_0);
    u_xlat16_3.y = dot(Globals.unity_SHBg, u_xlat16_0);
    u_xlat16_3.z = dot(Globals.unity_SHBb, u_xlat16_0);
    output.TEXCOORD5.xyz = Globals.unity_SHC.xyz * half3(u_xlat16_2) + u_xlat16_3.xyz;
    output.TEXCOORD5.w = half(0.0);
    output.TEXCOORD6.xy = float2(0.0, 0.0);
    return output;
}


-- Hardware tier variant: Tier 3
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0 sampler slot 1
Set 2D Texture "_OcclusionMap" to slot 1 sampler slot 2
Set CUBE Texture "unity_SpecCube0" to slot 2 sampler slot 0
Set 2D Texture "_ShadowMapTexture" to slot 3

Constant Buffer "Globals" (430 bytes) on slot 0 {
  Matrix4x4 unity_WorldToShadow[4] at 48
  Matrix4x4 unity_MatrixV at 336
  Vector3 _WorldSpaceCameraPos at 0
  VectorHalf4 _WorldSpaceLightPos0 at 16
  VectorHalf4 unity_SHAr at 24
  VectorHalf4 unity_SHAg at 32
  VectorHalf4 unity_SHAb at 40
  VectorHalf4 _LightShadowData at 304
  Vector4 unity_ShadowFadeCenterAndType at 320
  VectorHalf4 unity_SpecCube0_HDR at 400
  VectorHalf4 _LightColor0 at 408
  VectorHalf4 _Color at 416
  ScalarHalf _Metallic at 424
  ScalarHalf _Glossiness at 426
  ScalarHalf _OcclusionStrength at 428
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    half4 _WorldSpaceLightPos0;
    half4 unity_SHAr;
    half4 unity_SHAg;
    half4 unity_SHAb;
    float4 hlslcc_mtx4x4unity_WorldToShadow[16];
    half4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    half4 unity_SpecCube0_HDR;
    half4 _LightColor0;
    half4 _Color;
    half _Metallic;
    half _Glossiness;
    half _OcclusionStrength;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    half4 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(0) ]];
};

constexpr sampler _mtl_xl_shadow_sampler(address::clamp_to_edge, filter::linear, compare_func::greater_equal);
fragment Mtl_FragmentOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    sampler samplerunity_SpecCube0 [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_OcclusionMap [[ sampler (2) ]],
    sampler sampler_ShadowMapTexture [[ sampler (3) ]],
    texture2d<half, access::sample > _MainTex [[ texture (0) ]] ,
    texture2d<half, access::sample > _OcclusionMap [[ texture (1) ]] ,
    texturecube<half, access::sample > unity_SpecCube0 [[ texture (2) ]] ,
    depth2d<float, access::sample > _ShadowMapTexture [[ texture (3) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half4 u_xlat16_0;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half4 u_xlat16_2;
    float3 u_xlat3;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    half3 u_xlat16_6;
    half3 u_xlat16_7;
    half3 u_xlat16_8;
    half3 u_xlat16_9;
    float3 u_xlat10;
    half u_xlat16_10;
    half3 u_xlat16_14;
    half u_xlat16_24;
    float u_xlat30;
    half u_xlat16_30;
    half u_xlat16_31;
    half u_xlat16_34;
    u_xlat0.x = Globals.hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat0.y = Globals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.z = Globals.hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat16_1.x = input.TEXCOORD2.w;
    u_xlat16_1.y = input.TEXCOORD3.w;
    u_xlat16_1.z = input.TEXCOORD4.w;
    u_xlat2.xyz = (-float3(u_xlat16_1.xyz)) + Globals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat3.xyz = float3(u_xlat16_1.xyz) + (-Globals.unity_ShadowFadeCenterAndType.xyz);
    u_xlat30 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat30 = sqrt(u_xlat30);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat10.x = (-u_xlat0.x) + u_xlat30;
    u_xlat0.x = Globals.unity_ShadowFadeCenterAndType.w * u_xlat10.x + u_xlat0.x;
    u_xlat0.x = u_xlat0.x * float(Globals._LightShadowData.z) + float(Globals._LightShadowData.w);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat10.xyz = float3(input.TEXCOORD3.www) * Globals.hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
    u_xlat10.xyz = Globals.hlslcc_mtx4x4unity_WorldToShadow[0].xyz * float3(input.TEXCOORD2.www) + u_xlat10.xyz;
    u_xlat10.xyz = Globals.hlslcc_mtx4x4unity_WorldToShadow[2].xyz * float3(input.TEXCOORD4.www) + u_xlat10.xyz;
    u_xlat10.xyz = u_xlat10.xyz + Globals.hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
    u_xlat16_10 = _ShadowMapTexture.sample_compare(_mtl_xl_shadow_sampler, u_xlat10.xy, saturate(u_xlat10.z), level(0.0));
    u_xlat16_1.x = (-Globals._LightShadowData.x) + half(1.0);
    u_xlat16_1.x = u_xlat16_10 * u_xlat16_1.x + Globals._LightShadowData.x;
    u_xlat16_1.x = half(u_xlat0.x + float(u_xlat16_1.x));
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0h, 1.0h);
    u_xlat16_1.xyz = u_xlat16_1.xxx * Globals._LightColor0.xyz;
    u_xlat16_31 = dot(input.TEXCOORD1.xyz, input.TEXCOORD1.xyz);
    u_xlat16_31 = rsqrt(u_xlat16_31);
    u_xlat16_4.xyz = (-input.TEXCOORD1.xyz) * half3(u_xlat16_31) + Globals._WorldSpaceLightPos0.xyz;
    u_xlat16_5.xyz = half3(u_xlat16_31) * input.TEXCOORD1.xyz;
    u_xlat16_31 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
    u_xlat16_0.x = max(u_xlat16_31, half(0.00100000005));
    u_xlat16_31 = rsqrt(u_xlat16_0.x);
    u_xlat16_4.xyz = half3(u_xlat16_31) * u_xlat16_4.xyz;
    u_xlat16_31 = dot(Globals._WorldSpaceLightPos0.xyz, u_xlat16_4.xyz);
    u_xlat16_31 = clamp(u_xlat16_31, 0.0h, 1.0h);
    u_xlat16_0.x = max(u_xlat16_31, half(0.319999993));
    u_xlat16_31 = (-Globals._Glossiness) + half(1.0);
    u_xlat16_10 = u_xlat16_31 * u_xlat16_31 + half(1.5);
    u_xlat16_0.x = u_xlat16_10 * u_xlat16_0.x;
    u_xlat16_34 = dot(input.TEXCOORD4.xyz, input.TEXCOORD4.xyz);
    u_xlat16_34 = rsqrt(u_xlat16_34);
    u_xlat16_2.xyz = half3(u_xlat16_34) * input.TEXCOORD4.xyz;
    u_xlat16_4.x = dot(u_xlat16_2.xyz, u_xlat16_4.xyz);
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0h, 1.0h);
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_14.x = u_xlat16_31 * u_xlat16_31;
    u_xlat16_10 = u_xlat16_14.x * u_xlat16_14.x + half(-1.0);
    u_xlat16_10 = u_xlat16_4.x * u_xlat16_10 + half(1.00001001);
    u_xlat16_0.x = u_xlat16_10 * u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_14.x / u_xlat16_0.x;
    u_xlat16_4.x = u_xlat16_31 * u_xlat16_14.x;
    u_xlat16_4.x = (-u_xlat16_4.x) * half(0.280000001) + half(1.0);
    u_xlat16_0.x = u_xlat16_0.x + half(-9.99999975e-05);
    u_xlat16_14.x = max(u_xlat16_0.x, half(0.0));
    u_xlat16_14.x = min(u_xlat16_14.x, half(100.0));
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_0.xyz * Globals._Color.xyz;
    u_xlat16_6.xyz = Globals._Color.xyz * u_xlat16_0.xyz + half3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat16_6.xyz = half3(Globals._Metallic) * u_xlat16_6.xyz + half3(0.220916301, 0.220916301, 0.220916301);
    u_xlat16_24 = (-Globals._Metallic) * half(0.779083729) + half(0.779083729);
    u_xlat16_7.xyz = u_xlat16_3.xyz * half3(u_xlat16_24);
    u_xlat16_24 = (-u_xlat16_24) + Globals._Glossiness;
    u_xlat16_24 = u_xlat16_24 + half(1.0);
    u_xlat16_24 = clamp(u_xlat16_24, 0.0h, 1.0h);
    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + half3(u_xlat16_24);
    u_xlat16_14.xyz = u_xlat16_14.xxx * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_14.xyz;
    u_xlat16_2.w = half(1.0);
    u_xlat16_9.x = dot(Globals.unity_SHAr, u_xlat16_2);
    u_xlat16_9.y = dot(Globals.unity_SHAg, u_xlat16_2);
    u_xlat16_9.z = dot(Globals.unity_SHAb, u_xlat16_2);
    u_xlat16_14.xyz = u_xlat16_9.xyz + input.TEXCOORD5.xyz;
    u_xlat16_14.xyz = max(u_xlat16_14.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_0.xyz = log2(u_xlat16_14.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * half3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * half3(1.05499995, 1.05499995, 1.05499995) + half3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_0.xyz = max(u_xlat16_0.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_30 = _OcclusionMap.sample(sampler_OcclusionMap, input.TEXCOORD0.xy).y;
    u_xlat16_14.x = (-Globals._OcclusionStrength) + half(1.0);
    u_xlat16_14.x = u_xlat16_30 * Globals._OcclusionStrength + u_xlat16_14.x;
    u_xlat16_9.xyz = u_xlat16_0.xyz * u_xlat16_14.xxx;
    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_9.xyz;
    u_xlat16_24 = dot(u_xlat16_2.xyz, Globals._WorldSpaceLightPos0.xyz);
    u_xlat16_24 = clamp(u_xlat16_24, 0.0h, 1.0h);
    u_xlat16_1.xyz = u_xlat16_1.xyz * half3(u_xlat16_24) + u_xlat16_7.xyz;
    u_xlat16_24 = (-u_xlat16_31) * half(0.699999988) + half(1.70000005);
    u_xlat16_31 = u_xlat16_31 * u_xlat16_24;
    u_xlat16_31 = u_xlat16_31 * half(6.0);
    u_xlat16_24 = dot(u_xlat16_5.xyz, u_xlat16_2.xyz);
    u_xlat16_24 = u_xlat16_24 + u_xlat16_24;
    u_xlat16_7.xyz = u_xlat16_2.xyz * (-half3(u_xlat16_24)) + u_xlat16_5.xyz;
    u_xlat16_24 = dot(u_xlat16_2.xyz, (-u_xlat16_5.xyz));
    u_xlat16_24 = clamp(u_xlat16_24, 0.0h, 1.0h);
    u_xlat16_24 = (-u_xlat16_24) + half(1.0);
    u_xlat16_24 = u_xlat16_24 * u_xlat16_24;
    u_xlat16_24 = u_xlat16_24 * u_xlat16_24;
    u_xlat16_5.xyz = half3(u_xlat16_24) * u_xlat16_8.xyz + u_xlat16_6.xyz;
    u_xlat16_0 = unity_SpecCube0.sample(samplerunity_SpecCube0, float3(u_xlat16_7.xyz), level(float(u_xlat16_31)));
    u_xlat16_31 = u_xlat16_0.w + half(-1.0);
    u_xlat16_31 = Globals.unity_SpecCube0_HDR.w * u_xlat16_31 + half(1.0);
    u_xlat16_31 = u_xlat16_31 * Globals.unity_SpecCube0_HDR.x;
    u_xlat16_6.xyz = u_xlat16_0.xyz * half3(u_xlat16_31);
    u_xlat16_14.xyz = u_xlat16_14.xxx * u_xlat16_6.xyz;
    u_xlat16_4.xyz = u_xlat16_14.xyz * u_xlat16_4.xxx;
    output.SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_5.xyz + u_xlat16_1.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}


//////////////////////////////////////////////////////
Keywords set in this variant: DIRECTIONAL _EMISSION 
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0 sampler slot 2
Set 2D Texture "_OcclusionMap" to slot 1 sampler slot 3
Set 2D Texture "unity_NHxRoughness" to slot 2 sampler slot 1
Set 2D Texture "_EmissionMap" to slot 3 sampler slot 4
Set CUBE Texture "unity_SpecCube0" to slot 4 sampler slot 0

Constant Buffer "Globals" (72 bytes) on slot 0 {
  VectorHalf4 _WorldSpaceLightPos0 at 0
  VectorHalf4 unity_SHAr at 8
  VectorHalf4 unity_SHAg at 16
  VectorHalf4 unity_SHAb at 24
  VectorHalf4 unity_SpecCube0_HDR at 32
  VectorHalf4 _LightColor0 at 40
  VectorHalf4 _Color at 48
  ScalarHalf _Metallic at 56
  ScalarHalf _Glossiness at 58
  ScalarHalf _OcclusionStrength at 60
  VectorHalf4 _EmissionColor at 64
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    half4 _WorldSpaceLightPos0;
    half4 unity_SHAr;
    half4 unity_SHAg;
    half4 unity_SHAb;
    half4 unity_SpecCube0_HDR;
    half4 _LightColor0;
    half4 _Color;
    half _Metallic;
    half _Glossiness;
    half _OcclusionStrength;
    half4 _EmissionColor;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    half4 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(0) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    sampler samplerunity_SpecCube0 [[ sampler (0) ]],
    sampler samplerunity_NHxRoughness [[ sampler (1) ]],
    sampler sampler_MainTex [[ sampler (2) ]],
    sampler sampler_OcclusionMap [[ sampler (3) ]],
    sampler sampler_EmissionMap [[ sampler (4) ]],
    texture2d<half, access::sample > _MainTex [[ texture (0) ]] ,
    texture2d<half, access::sample > _OcclusionMap [[ texture (1) ]] ,
    texture2d<half, access::sample > unity_NHxRoughness [[ texture (2) ]] ,
    texture2d<half, access::sample > _EmissionMap [[ texture (3) ]] ,
    texturecube<half, access::sample > unity_SpecCube0 [[ texture (4) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half4 u_xlat16_0;
    half3 u_xlat16_1;
    half4 u_xlat16_2;
    half4 u_xlat16_3;
    half4 u_xlat16_4;
    half3 u_xlat16_5;
    half3 u_xlat16_6;
    half3 u_xlat16_7;
    half3 u_xlat16_9;
    half u_xlat16_10;
    half u_xlat16_17;
    half u_xlat16_26;
    u_xlat16_0.x = _OcclusionMap.sample(sampler_OcclusionMap, input.TEXCOORD0.xy).y;
    u_xlat16_1.x = (-Globals._OcclusionStrength) + half(1.0);
    u_xlat16_1.x = u_xlat16_0.x * Globals._OcclusionStrength + u_xlat16_1.x;
    u_xlat16_0.xw = (-half2(Globals._Glossiness)) + half2(1.0, 1.0);
    u_xlat16_9.x = (-u_xlat16_0.x) * half(0.699999988) + half(1.70000005);
    u_xlat16_9.x = u_xlat16_0.x * u_xlat16_9.x;
    u_xlat16_9.x = u_xlat16_9.x * half(6.0);
    u_xlat16_17 = dot(input.TEXCOORD1.xyz, input.TEXCOORD1.xyz);
    u_xlat16_17 = rsqrt(u_xlat16_17);
    u_xlat16_2.xyz = half3(u_xlat16_17) * input.TEXCOORD1.xyz;
    u_xlat16_17 = dot(input.TEXCOORD4.xyz, input.TEXCOORD4.xyz);
    u_xlat16_17 = rsqrt(u_xlat16_17);
    u_xlat16_3.xyz = half3(u_xlat16_17) * input.TEXCOORD4.xyz;
    u_xlat16_17 = dot(u_xlat16_2.xyz, u_xlat16_3.xyz);
    u_xlat16_17 = u_xlat16_17 + u_xlat16_17;
    u_xlat16_4.xyz = u_xlat16_3.xyz * (-half3(u_xlat16_17)) + u_xlat16_2.xyz;
    u_xlat16_4 = unity_SpecCube0.sample(samplerunity_SpecCube0, float3(u_xlat16_4.xyz), level(float(u_xlat16_9.x)));
    u_xlat16_9.x = u_xlat16_4.w + half(-1.0);
    u_xlat16_9.x = Globals.unity_SpecCube0_HDR.w * u_xlat16_9.x + half(1.0);
    u_xlat16_9.x = u_xlat16_9.x * Globals.unity_SpecCube0_HDR.x;
    u_xlat16_9.xyz = u_xlat16_4.xyz * u_xlat16_9.xxx;
    u_xlat16_9.xyz = u_xlat16_1.xxx * u_xlat16_9.xyz;
    u_xlat16_26 = dot((-u_xlat16_2.xyz), u_xlat16_3.xyz);
    u_xlat16_5.x = u_xlat16_26 + u_xlat16_26;
    u_xlat16_26 = u_xlat16_26;
    u_xlat16_26 = clamp(u_xlat16_26, 0.0h, 1.0h);
    u_xlat16_6.y = (-u_xlat16_26) + half(1.0);
    u_xlat16_2.xyz = u_xlat16_3.xyz * (-u_xlat16_5.xxx) + (-u_xlat16_2.xyz);
    u_xlat16_6.x = dot(u_xlat16_2.xyz, Globals._WorldSpaceLightPos0.xyz);
    u_xlat16_2.xy = u_xlat16_6.xy * u_xlat16_6.xy;
    u_xlat16_0.yz = u_xlat16_2.xy * u_xlat16_2.xy;
    u_xlat16_2.x = (-Globals._Metallic) * half(0.779083729) + half(0.779083729);
    u_xlat16_10 = (-u_xlat16_2.x) + Globals._Glossiness;
    u_xlat16_10 = u_xlat16_10 + half(1.0);
    u_xlat16_10 = clamp(u_xlat16_10, 0.0h, 1.0h);
    u_xlat16_7.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_5.xyz = Globals._Color.xyz * u_xlat16_7.xyz + half3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat16_7.xyz = u_xlat16_7.xyz * Globals._Color.xyz;
    u_xlat16_2.xzw = u_xlat16_2.xxx * u_xlat16_7.xyz;
    u_xlat16_5.xyz = half3(Globals._Metallic) * u_xlat16_5.xyz + half3(0.220916301, 0.220916301, 0.220916301);
    u_xlat16_6.xyz = half3(u_xlat16_10) + (-u_xlat16_5.xyz);
    u_xlat16_6.xyz = u_xlat16_0.zzz * u_xlat16_6.xyz + u_xlat16_5.xyz;
    u_xlat16_7.x = unity_NHxRoughness.sample(samplerunity_NHxRoughness, float2(u_xlat16_0.yw)).w;
    u_xlat16_7.x = u_xlat16_7.x * half(16.0);
    u_xlat16_5.xyz = u_xlat16_7.xxx * u_xlat16_5.xyz + u_xlat16_2.xzw;
    u_xlat16_9.xyz = u_xlat16_9.xyz * u_xlat16_6.xyz;
    u_xlat16_3.w = half(1.0);
    u_xlat16_6.x = dot(Globals.unity_SHAr, u_xlat16_3);
    u_xlat16_6.y = dot(Globals.unity_SHAg, u_xlat16_3);
    u_xlat16_6.z = dot(Globals.unity_SHAb, u_xlat16_3);
    u_xlat16_10 = dot(u_xlat16_3.xyz, Globals._WorldSpaceLightPos0.xyz);
    u_xlat16_10 = clamp(u_xlat16_10, 0.0h, 1.0h);
    u_xlat16_3.xyz = half3(u_xlat16_10) * Globals._LightColor0.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz + input.TEXCOORD5.xyz;
    u_xlat16_6.xyz = max(u_xlat16_6.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_7.xyz = log2(u_xlat16_6.xyz);
    u_xlat16_7.xyz = u_xlat16_7.xyz * half3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_7.xyz = exp2(u_xlat16_7.xyz);
    u_xlat16_7.xyz = u_xlat16_7.xyz * half3(1.05499995, 1.05499995, 1.05499995) + half3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_7.xyz = max(u_xlat16_7.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_6.xyz = u_xlat16_1.xxx * u_xlat16_7.xyz;
    u_xlat16_1.xyz = u_xlat16_6.xyz * u_xlat16_2.xzw + u_xlat16_9.xyz;
    u_xlat16_1.xyz = u_xlat16_5.xyz * u_xlat16_3.xyz + u_xlat16_1.xyz;
    u_xlat16_7.xyz = _EmissionMap.sample(sampler_EmissionMap, input.TEXCOORD0.xy).xyz;
    output.SV_Target0.xyz = u_xlat16_7.xyz * Globals._EmissionColor.xyz + u_xlat16_1.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}


-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 2
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0 sampler slot 1
Set 2D Texture "_OcclusionMap" to slot 1 sampler slot 2
Set 2D Texture "_EmissionMap" to slot 2 sampler slot 3
Set CUBE Texture "unity_SpecCube0" to slot 3 sampler slot 0

Constant Buffer "Globals" (72 bytes) on slot 0 {
  VectorHalf4 _WorldSpaceLightPos0 at 0
  VectorHalf4 unity_SHAr at 8
  VectorHalf4 unity_SHAg at 16
  VectorHalf4 unity_SHAb at 24
  VectorHalf4 unity_SpecCube0_HDR at 32
  VectorHalf4 _LightColor0 at 40
  VectorHalf4 _Color at 48
  ScalarHalf _Metallic at 56
  ScalarHalf _Glossiness at 58
  ScalarHalf _OcclusionStrength at 60
  VectorHalf4 _EmissionColor at 64
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    half4 _WorldSpaceLightPos0;
    half4 unity_SHAr;
    half4 unity_SHAg;
    half4 unity_SHAb;
    half4 unity_SpecCube0_HDR;
    half4 _LightColor0;
    half4 _Color;
    half _Metallic;
    half _Glossiness;
    half _OcclusionStrength;
    half4 _EmissionColor;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    half4 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(0) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    sampler samplerunity_SpecCube0 [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_OcclusionMap [[ sampler (2) ]],
    sampler sampler_EmissionMap [[ sampler (3) ]],
    texture2d<half, access::sample > _MainTex [[ texture (0) ]] ,
    texture2d<half, access::sample > _OcclusionMap [[ texture (1) ]] ,
    texture2d<half, access::sample > _EmissionMap [[ texture (2) ]] ,
    texturecube<half, access::sample > unity_SpecCube0 [[ texture (3) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half4 u_xlat16_0;
    half3 u_xlat16_1;
    half4 u_xlat16_2;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    half3 u_xlat16_6;
    half3 u_xlat16_7;
    half3 u_xlat16_8;
    half u_xlat16_11;
    half u_xlat16_27;
    half u_xlat16_28;
    half u_xlat16_29;
    half u_xlat16_31;
    half u_xlat16_32;
    u_xlat16_0.w = half(1.0);
    u_xlat16_1.x = dot(input.TEXCOORD4.xyz, input.TEXCOORD4.xyz);
    u_xlat16_1.x = rsqrt(u_xlat16_1.x);
    u_xlat16_0.xyz = u_xlat16_1.xxx * input.TEXCOORD4.xyz;
    u_xlat16_1.x = dot(Globals.unity_SHAr, u_xlat16_0);
    u_xlat16_1.y = dot(Globals.unity_SHAg, u_xlat16_0);
    u_xlat16_1.z = dot(Globals.unity_SHAb, u_xlat16_0);
    u_xlat16_1.xyz = u_xlat16_1.xyz + input.TEXCOORD5.xyz;
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = log2(u_xlat16_1.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * half3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * half3(1.05499995, 1.05499995, 1.05499995) + half3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_29 = _OcclusionMap.sample(sampler_OcclusionMap, input.TEXCOORD0.xy).y;
    u_xlat16_27 = (-Globals._OcclusionStrength) + half(1.0);
    u_xlat16_27 = u_xlat16_29 * Globals._OcclusionStrength + u_xlat16_27;
    u_xlat16_1.xyz = half3(u_xlat16_27) * u_xlat16_2.xyz;
    u_xlat16_2.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_2.xyz * Globals._Color.xyz;
    u_xlat16_4.xyz = Globals._Color.xyz * u_xlat16_2.xyz + half3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat16_4.xyz = half3(Globals._Metallic) * u_xlat16_4.xyz + half3(0.220916301, 0.220916301, 0.220916301);
    u_xlat16_28 = (-Globals._Metallic) * half(0.779083729) + half(0.779083729);
    u_xlat16_5.xyz = half3(u_xlat16_28) * u_xlat16_3.xyz;
    u_xlat16_28 = (-u_xlat16_28) + Globals._Glossiness;
    u_xlat16_28 = u_xlat16_28 + half(1.0);
    u_xlat16_28 = clamp(u_xlat16_28, 0.0h, 1.0h);
    u_xlat16_6.xyz = (-u_xlat16_4.xyz) + half3(u_xlat16_28);
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_5.xyz;
    u_xlat16_28 = dot(input.TEXCOORD1.xyz, input.TEXCOORD1.xyz);
    u_xlat16_28 = rsqrt(u_xlat16_28);
    u_xlat16_7.xyz = (-input.TEXCOORD1.xyz) * half3(u_xlat16_28) + Globals._WorldSpaceLightPos0.xyz;
    u_xlat16_8.xyz = half3(u_xlat16_28) * input.TEXCOORD1.xyz;
    u_xlat16_28 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_2.x = max(u_xlat16_28, half(0.00100000005));
    u_xlat16_28 = rsqrt(u_xlat16_2.x);
    u_xlat16_7.xyz = half3(u_xlat16_28) * u_xlat16_7.xyz;
    u_xlat16_28 = dot(Globals._WorldSpaceLightPos0.xyz, u_xlat16_7.xyz);
    u_xlat16_28 = clamp(u_xlat16_28, 0.0h, 1.0h);
    u_xlat16_31 = dot(u_xlat16_0.xyz, u_xlat16_7.xyz);
    u_xlat16_31 = clamp(u_xlat16_31, 0.0h, 1.0h);
    u_xlat16_31 = u_xlat16_31 * u_xlat16_31;
    u_xlat16_2.x = max(u_xlat16_28, half(0.319999993));
    u_xlat16_28 = (-Globals._Glossiness) + half(1.0);
    u_xlat16_11 = u_xlat16_28 * u_xlat16_28 + half(1.5);
    u_xlat16_2.x = u_xlat16_11 * u_xlat16_2.x;
    u_xlat16_32 = u_xlat16_28 * u_xlat16_28;
    u_xlat16_11 = u_xlat16_32 * u_xlat16_32 + half(-1.0);
    u_xlat16_11 = u_xlat16_31 * u_xlat16_11 + half(1.00001001);
    u_xlat16_2.x = u_xlat16_11 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_32 / u_xlat16_2.x;
    u_xlat16_31 = u_xlat16_28 * u_xlat16_32;
    u_xlat16_31 = (-u_xlat16_31) * half(0.280000001) + half(1.0);
    u_xlat16_2.x = u_xlat16_2.x + half(-9.99999975e-05);
    u_xlat16_32 = max(u_xlat16_2.x, half(0.0));
    u_xlat16_32 = min(u_xlat16_32, half(100.0));
    u_xlat16_5.xyz = half3(u_xlat16_32) * u_xlat16_4.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * Globals._LightColor0.xyz;
    u_xlat16_32 = dot(u_xlat16_0.xyz, Globals._WorldSpaceLightPos0.xyz);
    u_xlat16_32 = clamp(u_xlat16_32, 0.0h, 1.0h);
    u_xlat16_1.xyz = u_xlat16_5.xyz * half3(u_xlat16_32) + u_xlat16_1.xyz;
    u_xlat16_5.x = (-u_xlat16_28) * half(0.699999988) + half(1.70000005);
    u_xlat16_28 = u_xlat16_28 * u_xlat16_5.x;
    u_xlat16_28 = u_xlat16_28 * half(6.0);
    u_xlat16_5.x = dot(u_xlat16_8.xyz, u_xlat16_0.xyz);
    u_xlat16_5.x = u_xlat16_5.x + u_xlat16_5.x;
    u_xlat16_5.xyz = u_xlat16_0.xyz * (-u_xlat16_5.xxx) + u_xlat16_8.xyz;
    u_xlat16_0.x = dot(u_xlat16_0.xyz, (-u_xlat16_8.xyz));
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0h, 1.0h);
    u_xlat16_0.x = (-u_xlat16_0.x) + half(1.0);
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_6.xyz + u_xlat16_4.xyz;
    u_xlat16_2 = unity_SpecCube0.sample(samplerunity_SpecCube0, float3(u_xlat16_5.xyz), level(float(u_xlat16_28)));
    u_xlat16_28 = u_xlat16_2.w + half(-1.0);
    u_xlat16_28 = Globals.unity_SpecCube0_HDR.w * u_xlat16_28 + half(1.0);
    u_xlat16_28 = u_xlat16_28 * Globals.unity_SpecCube0_HDR.x;
    u_xlat16_4.xyz = u_xlat16_2.xyz * half3(u_xlat16_28);
    u_xlat16_4.xyz = half3(u_xlat16_27) * u_xlat16_4.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * half3(u_xlat16_31);
    u_xlat16_0.xyz = u_xlat16_4.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat16_2.xyz = _EmissionMap.sample(sampler_EmissionMap, input.TEXCOORD0.xy).xyz;
    output.SV_Target0.xyz = u_xlat16_2.xyz * Globals._EmissionColor.xyz + u_xlat16_0.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}


-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 3
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0 sampler slot 1
Set 2D Texture "_OcclusionMap" to slot 1 sampler slot 2
Set 2D Texture "_EmissionMap" to slot 2 sampler slot 3
Set CUBE Texture "unity_SpecCube0" to slot 3 sampler slot 0

Constant Buffer "Globals" (72 bytes) on slot 0 {
  VectorHalf4 _WorldSpaceLightPos0 at 0
  VectorHalf4 unity_SHAr at 8
  VectorHalf4 unity_SHAg at 16
  VectorHalf4 unity_SHAb at 24
  VectorHalf4 unity_SpecCube0_HDR at 32
  VectorHalf4 _LightColor0 at 40
  VectorHalf4 _Color at 48
  ScalarHalf _Metallic at 56
  ScalarHalf _Glossiness at 58
  ScalarHalf _OcclusionStrength at 60
  VectorHalf4 _EmissionColor at 64
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    half4 _WorldSpaceLightPos0;
    half4 unity_SHAr;
    half4 unity_SHAg;
    half4 unity_SHAb;
    half4 unity_SpecCube0_HDR;
    half4 _LightColor0;
    half4 _Color;
    half _Metallic;
    half _Glossiness;
    half _OcclusionStrength;
    half4 _EmissionColor;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    half4 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(0) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    sampler samplerunity_SpecCube0 [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_OcclusionMap [[ sampler (2) ]],
    sampler sampler_EmissionMap [[ sampler (3) ]],
    texture2d<half, access::sample > _MainTex [[ texture (0) ]] ,
    texture2d<half, access::sample > _OcclusionMap [[ texture (1) ]] ,
    texture2d<half, access::sample > _EmissionMap [[ texture (2) ]] ,
    texturecube<half, access::sample > unity_SpecCube0 [[ texture (3) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half4 u_xlat16_0;
    half3 u_xlat16_1;
    half4 u_xlat16_2;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    half3 u_xlat16_6;
    half3 u_xlat16_7;
    half3 u_xlat16_8;
    half u_xlat16_11;
    half u_xlat16_27;
    half u_xlat16_28;
    half u_xlat16_29;
    half u_xlat16_31;
    half u_xlat16_32;
    u_xlat16_0.w = half(1.0);
    u_xlat16_1.x = dot(input.TEXCOORD4.xyz, input.TEXCOORD4.xyz);
    u_xlat16_1.x = rsqrt(u_xlat16_1.x);
    u_xlat16_0.xyz = u_xlat16_1.xxx * input.TEXCOORD4.xyz;
    u_xlat16_1.x = dot(Globals.unity_SHAr, u_xlat16_0);
    u_xlat16_1.y = dot(Globals.unity_SHAg, u_xlat16_0);
    u_xlat16_1.z = dot(Globals.unity_SHAb, u_xlat16_0);
    u_xlat16_1.xyz = u_xlat16_1.xyz + input.TEXCOORD5.xyz;
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = log2(u_xlat16_1.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * half3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * half3(1.05499995, 1.05499995, 1.05499995) + half3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_29 = _OcclusionMap.sample(sampler_OcclusionMap, input.TEXCOORD0.xy).y;
    u_xlat16_27 = (-Globals._OcclusionStrength) + half(1.0);
    u_xlat16_27 = u_xlat16_29 * Globals._OcclusionStrength + u_xlat16_27;
    u_xlat16_1.xyz = half3(u_xlat16_27) * u_xlat16_2.xyz;
    u_xlat16_2.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_2.xyz * Globals._Color.xyz;
    u_xlat16_4.xyz = Globals._Color.xyz * u_xlat16_2.xyz + half3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat16_4.xyz = half3(Globals._Metallic) * u_xlat16_4.xyz + half3(0.220916301, 0.220916301, 0.220916301);
    u_xlat16_28 = (-Globals._Metallic) * half(0.779083729) + half(0.779083729);
    u_xlat16_5.xyz = half3(u_xlat16_28) * u_xlat16_3.xyz;
    u_xlat16_28 = (-u_xlat16_28) + Globals._Glossiness;
    u_xlat16_28 = u_xlat16_28 + half(1.0);
    u_xlat16_28 = clamp(u_xlat16_28, 0.0h, 1.0h);
    u_xlat16_6.xyz = (-u_xlat16_4.xyz) + half3(u_xlat16_28);
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_5.xyz;
    u_xlat16_28 = dot(input.TEXCOORD1.xyz, input.TEXCOORD1.xyz);
    u_xlat16_28 = rsqrt(u_xlat16_28);
    u_xlat16_7.xyz = (-input.TEXCOORD1.xyz) * half3(u_xlat16_28) + Globals._WorldSpaceLightPos0.xyz;
    u_xlat16_8.xyz = half3(u_xlat16_28) * input.TEXCOORD1.xyz;
    u_xlat16_28 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_2.x = max(u_xlat16_28, half(0.00100000005));
    u_xlat16_28 = rsqrt(u_xlat16_2.x);
    u_xlat16_7.xyz = half3(u_xlat16_28) * u_xlat16_7.xyz;
    u_xlat16_28 = dot(Globals._WorldSpaceLightPos0.xyz, u_xlat16_7.xyz);
    u_xlat16_28 = clamp(u_xlat16_28, 0.0h, 1.0h);
    u_xlat16_31 = dot(u_xlat16_0.xyz, u_xlat16_7.xyz);
    u_xlat16_31 = clamp(u_xlat16_31, 0.0h, 1.0h);
    u_xlat16_31 = u_xlat16_31 * u_xlat16_31;
    u_xlat16_2.x = max(u_xlat16_28, half(0.319999993));
    u_xlat16_28 = (-Globals._Glossiness) + half(1.0);
    u_xlat16_11 = u_xlat16_28 * u_xlat16_28 + half(1.5);
    u_xlat16_2.x = u_xlat16_11 * u_xlat16_2.x;
    u_xlat16_32 = u_xlat16_28 * u_xlat16_28;
    u_xlat16_11 = u_xlat16_32 * u_xlat16_32 + half(-1.0);
    u_xlat16_11 = u_xlat16_31 * u_xlat16_11 + half(1.00001001);
    u_xlat16_2.x = u_xlat16_11 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_32 / u_xlat16_2.x;
    u_xlat16_31 = u_xlat16_28 * u_xlat16_32;
    u_xlat16_31 = (-u_xlat16_31) * half(0.280000001) + half(1.0);
    u_xlat16_2.x = u_xlat16_2.x + half(-9.99999975e-05);
    u_xlat16_32 = max(u_xlat16_2.x, half(0.0));
    u_xlat16_32 = min(u_xlat16_32, half(100.0));
    u_xlat16_5.xyz = half3(u_xlat16_32) * u_xlat16_4.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * Globals._LightColor0.xyz;
    u_xlat16_32 = dot(u_xlat16_0.xyz, Globals._WorldSpaceLightPos0.xyz);
    u_xlat16_32 = clamp(u_xlat16_32, 0.0h, 1.0h);
    u_xlat16_1.xyz = u_xlat16_5.xyz * half3(u_xlat16_32) + u_xlat16_1.xyz;
    u_xlat16_5.x = (-u_xlat16_28) * half(0.699999988) + half(1.70000005);
    u_xlat16_28 = u_xlat16_28 * u_xlat16_5.x;
    u_xlat16_28 = u_xlat16_28 * half(6.0);
    u_xlat16_5.x = dot(u_xlat16_8.xyz, u_xlat16_0.xyz);
    u_xlat16_5.x = u_xlat16_5.x + u_xlat16_5.x;
    u_xlat16_5.xyz = u_xlat16_0.xyz * (-u_xlat16_5.xxx) + u_xlat16_8.xyz;
    u_xlat16_0.x = dot(u_xlat16_0.xyz, (-u_xlat16_8.xyz));
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0h, 1.0h);
    u_xlat16_0.x = (-u_xlat16_0.x) + half(1.0);
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_6.xyz + u_xlat16_4.xyz;
    u_xlat16_2 = unity_SpecCube0.sample(samplerunity_SpecCube0, float3(u_xlat16_5.xyz), level(float(u_xlat16_28)));
    u_xlat16_28 = u_xlat16_2.w + half(-1.0);
    u_xlat16_28 = Globals.unity_SpecCube0_HDR.w * u_xlat16_28 + half(1.0);
    u_xlat16_28 = u_xlat16_28 * Globals.unity_SpecCube0_HDR.x;
    u_xlat16_4.xyz = u_xlat16_2.xyz * half3(u_xlat16_28);
    u_xlat16_4.xyz = half3(u_xlat16_27) * u_xlat16_4.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * half3(u_xlat16_31);
    u_xlat16_0.xyz = u_xlat16_4.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat16_2.xyz = _EmissionMap.sample(sampler_EmissionMap, input.TEXCOORD0.xy).xyz;
    output.SV_Target0.xyz = u_xlat16_2.xyz * Globals._EmissionColor.xyz + u_xlat16_0.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}


//////////////////////////////////////////////////////
Keywords set in this variant: DIRECTIONAL _EMISSION VERTEXLIGHT_ON 
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"
Uses vertex data channel "TexCoord0"

Constant Buffer "Globals" (402 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 176
  Matrix4x4 unity_WorldToObject at 240
  Matrix4x4 unity_MatrixVP at 304
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 unity_4LightPosX0 at 16
  Vector4 unity_4LightPosY0 at 32
  Vector4 unity_4LightPosZ0 at 48
  VectorHalf4 unity_4LightAtten0 at 64
  VectorHalf4 unity_LightColor[8] at 72
  VectorHalf4 unity_SHBr at 136
  VectorHalf4 unity_SHBg at 144
  VectorHalf4 unity_SHBb at 152
  VectorHalf4 unity_SHC at 160
  Vector4 _MainTex_ST at 368
  Vector4 _DetailAlbedoMap_ST at 384
  ScalarHalf _UVSec at 400
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 unity_4LightPosX0;
    float4 unity_4LightPosY0;
    float4 unity_4LightPosZ0;
    half4 unity_4LightAtten0;
    half4 unity_LightColor[8];
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    float4 _DetailAlbedoMap_ST;
    half _UVSec;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    half3 NORMAL0 [[ attribute(1) ]] ;
    float2 TEXCOORD0 [[ attribute(2) ]] ;
    float2 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    half4 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float2 TEXCOORD6 [[ user(TEXCOORD6) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool u_xlatb0;
    float4 u_xlat1;
    half4 u_xlat16_1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    half3 u_xlat16_5;
    half3 u_xlat16_6;
    float u_xlat21;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0] * input.POSITION0.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2] * input.POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    output.mtl_Position = Globals.hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlatb0 = Globals._UVSec==half(0.0);
    u_xlat0.xy = (bool(u_xlatb0)) ? input.TEXCOORD0.xy : input.TEXCOORD1.xy;
    output.TEXCOORD0.zw = u_xlat0.xy * Globals._DetailAlbedoMap_ST.xy + Globals._DetailAlbedoMap_ST.zw;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy * Globals._MainTex_ST.xy + Globals._MainTex_ST.zw;
    u_xlat0.xyz = input.POSITION0.yyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * input.POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * input.POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * input.POSITION0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-Globals._WorldSpaceCameraPos.xyzx.xyz);
    output.TEXCOORD1.xyz = half3(u_xlat1.xyz);
    output.TEXCOORD2.xyz = half3(0.0, 0.0, 0.0);
    output.TEXCOORD2.w = half(u_xlat0.x);
    output.TEXCOORD3.xyz = half3(0.0, 0.0, 0.0);
    output.TEXCOORD3.w = half(u_xlat0.y);
    u_xlat1.w = u_xlat0.z;
    u_xlat2.x = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = rsqrt(u_xlat21);
    u_xlat1.xyz = float3(u_xlat21) * u_xlat2.xyz;
    output.TEXCOORD4 = half4(u_xlat1);
    u_xlat2 = (-u_xlat0.xxxx) + Globals.unity_4LightPosX0;
    u_xlat3 = (-u_xlat0.yyyy) + Globals.unity_4LightPosY0;
    u_xlat0 = (-u_xlat0.zzzz) + Globals.unity_4LightPosZ0;
    u_xlat4 = u_xlat1.yyyy * u_xlat3;
    u_xlat3 = u_xlat3 * u_xlat3;
    u_xlat3 = u_xlat2 * u_xlat2 + u_xlat3;
    u_xlat2 = u_xlat2 * u_xlat1.xxxx + u_xlat4;
    u_xlat2 = u_xlat0 * u_xlat1.zzzz + u_xlat2;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
    u_xlat0 = max(u_xlat0, float4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat3 = rsqrt(u_xlat0);
    u_xlat0 = u_xlat0 * float4(Globals.unity_4LightAtten0) + float4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = float4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat2 = u_xlat2 * u_xlat3;
    u_xlat2 = max(u_xlat2, float4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat2;
    u_xlat2.xyz = u_xlat0.yyy * float3(Globals.unity_LightColor[1].xyz);
    u_xlat2.xyz = float3(Globals.unity_LightColor[0].xyz) * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = float3(Globals.unity_LightColor[2].xyz) * u_xlat0.zzz + u_xlat2.xyz;
    u_xlat0.xyz = float3(Globals.unity_LightColor[3].xyz) * u_xlat0.www + u_xlat0.xyz;
    u_xlat2.xyz = u_xlat0.xyz * float3(0.305306017, 0.305306017, 0.305306017) + float3(0.682171106, 0.682171106, 0.682171106);
    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + float3(0.0125228781, 0.0125228781, 0.0125228781);
    u_xlat16_5.x = half(u_xlat1.y * u_xlat1.y);
    u_xlat16_5.x = half(u_xlat1.x * u_xlat1.x + (-float(u_xlat16_5.x)));
    u_xlat16_1 = half4(u_xlat1.yzzx * u_xlat1.xyzz);
    u_xlat16_6.x = dot(Globals.unity_SHBr, u_xlat16_1);
    u_xlat16_6.y = dot(Globals.unity_SHBg, u_xlat16_1);
    u_xlat16_6.z = dot(Globals.unity_SHBb, u_xlat16_1);
    u_xlat16_5.xyz = Globals.unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
    output.TEXCOORD5.xyz = half3(u_xlat0.xyz * u_xlat2.xyz + float3(u_xlat16_5.xyz));
    output.TEXCOORD5.w = half(0.0);
    output.TEXCOORD6.xy = float2(0.0, 0.0);
    return output;
}


-- Fragment shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 2
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"
Uses vertex data channel "TexCoord0"

Constant Buffer "Globals" (402 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 176
  Matrix4x4 unity_WorldToObject at 240
  Matrix4x4 unity_MatrixVP at 304
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 unity_4LightPosX0 at 16
  Vector4 unity_4LightPosY0 at 32
  Vector4 unity_4LightPosZ0 at 48
  VectorHalf4 unity_4LightAtten0 at 64
  VectorHalf4 unity_LightColor[8] at 72
  VectorHalf4 unity_SHBr at 136
  VectorHalf4 unity_SHBg at 144
  VectorHalf4 unity_SHBb at 152
  VectorHalf4 unity_SHC at 160
  Vector4 _MainTex_ST at 368
  Vector4 _DetailAlbedoMap_ST at 384
  ScalarHalf _UVSec at 400
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 unity_4LightPosX0;
    float4 unity_4LightPosY0;
    float4 unity_4LightPosZ0;
    half4 unity_4LightAtten0;
    half4 unity_LightColor[8];
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    float4 _DetailAlbedoMap_ST;
    half _UVSec;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    half3 NORMAL0 [[ attribute(1) ]] ;
    float2 TEXCOORD0 [[ attribute(2) ]] ;
    float2 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    half4 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float2 TEXCOORD6 [[ user(TEXCOORD6) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool u_xlatb0;
    float4 u_xlat1;
    half4 u_xlat16_1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    half3 u_xlat16_5;
    half3 u_xlat16_6;
    float u_xlat21;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0] * input.POSITION0.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2] * input.POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    output.mtl_Position = Globals.hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlatb0 = Globals._UVSec==half(0.0);
    u_xlat0.xy = (bool(u_xlatb0)) ? input.TEXCOORD0.xy : input.TEXCOORD1.xy;
    output.TEXCOORD0.zw = u_xlat0.xy * Globals._DetailAlbedoMap_ST.xy + Globals._DetailAlbedoMap_ST.zw;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy * Globals._MainTex_ST.xy + Globals._MainTex_ST.zw;
    u_xlat0.xyz = input.POSITION0.yyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * input.POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * input.POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * input.POSITION0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-Globals._WorldSpaceCameraPos.xyzx.xyz);
    output.TEXCOORD1.xyz = half3(u_xlat1.xyz);
    output.TEXCOORD2.xyz = half3(0.0, 0.0, 0.0);
    output.TEXCOORD2.w = half(u_xlat0.x);
    output.TEXCOORD3.xyz = half3(0.0, 0.0, 0.0);
    output.TEXCOORD3.w = half(u_xlat0.y);
    u_xlat1.w = u_xlat0.z;
    u_xlat2.x = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = rsqrt(u_xlat21);
    u_xlat1.xyz = float3(u_xlat21) * u_xlat2.xyz;
    output.TEXCOORD4 = half4(u_xlat1);
    u_xlat2 = (-u_xlat0.xxxx) + Globals.unity_4LightPosX0;
    u_xlat3 = (-u_xlat0.yyyy) + Globals.unity_4LightPosY0;
    u_xlat0 = (-u_xlat0.zzzz) + Globals.unity_4LightPosZ0;
    u_xlat4 = u_xlat1.yyyy * u_xlat3;
    u_xlat3 = u_xlat3 * u_xlat3;
    u_xlat3 = u_xlat2 * u_xlat2 + u_xlat3;
    u_xlat2 = u_xlat2 * u_xlat1.xxxx + u_xlat4;
    u_xlat2 = u_xlat0 * u_xlat1.zzzz + u_xlat2;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
    u_xlat0 = max(u_xlat0, float4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat3 = rsqrt(u_xlat0);
    u_xlat0 = u_xlat0 * float4(Globals.unity_4LightAtten0) + float4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = float4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat2 = u_xlat2 * u_xlat3;
    u_xlat2 = max(u_xlat2, float4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat2;
    u_xlat2.xyz = u_xlat0.yyy * float3(Globals.unity_LightColor[1].xyz);
    u_xlat2.xyz = float3(Globals.unity_LightColor[0].xyz) * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = float3(Globals.unity_LightColor[2].xyz) * u_xlat0.zzz + u_xlat2.xyz;
    u_xlat0.xyz = float3(Globals.unity_LightColor[3].xyz) * u_xlat0.www + u_xlat0.xyz;
    u_xlat2.xyz = u_xlat0.xyz * float3(0.305306017, 0.305306017, 0.305306017) + float3(0.682171106, 0.682171106, 0.682171106);
    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + float3(0.0125228781, 0.0125228781, 0.0125228781);
    u_xlat16_5.x = half(u_xlat1.y * u_xlat1.y);
    u_xlat16_5.x = half(u_xlat1.x * u_xlat1.x + (-float(u_xlat16_5.x)));
    u_xlat16_1 = half4(u_xlat1.yzzx * u_xlat1.xyzz);
    u_xlat16_6.x = dot(Globals.unity_SHBr, u_xlat16_1);
    u_xlat16_6.y = dot(Globals.unity_SHBg, u_xlat16_1);
    u_xlat16_6.z = dot(Globals.unity_SHBb, u_xlat16_1);
    u_xlat16_5.xyz = Globals.unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
    output.TEXCOORD5.xyz = half3(u_xlat0.xyz * u_xlat2.xyz + float3(u_xlat16_5.xyz));
    output.TEXCOORD5.w = half(0.0);
    output.TEXCOORD6.xy = float2(0.0, 0.0);
    return output;
}


-- Fragment shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 3
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"
Uses vertex data channel "TexCoord0"

Constant Buffer "Globals" (402 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 176
  Matrix4x4 unity_WorldToObject at 240
  Matrix4x4 unity_MatrixVP at 304
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 unity_4LightPosX0 at 16
  Vector4 unity_4LightPosY0 at 32
  Vector4 unity_4LightPosZ0 at 48
  VectorHalf4 unity_4LightAtten0 at 64
  VectorHalf4 unity_LightColor[8] at 72
  VectorHalf4 unity_SHBr at 136
  VectorHalf4 unity_SHBg at 144
  VectorHalf4 unity_SHBb at 152
  VectorHalf4 unity_SHC at 160
  Vector4 _MainTex_ST at 368
  Vector4 _DetailAlbedoMap_ST at 384
  ScalarHalf _UVSec at 400
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 unity_4LightPosX0;
    float4 unity_4LightPosY0;
    float4 unity_4LightPosZ0;
    half4 unity_4LightAtten0;
    half4 unity_LightColor[8];
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    float4 _DetailAlbedoMap_ST;
    half _UVSec;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    half3 NORMAL0 [[ attribute(1) ]] ;
    float2 TEXCOORD0 [[ attribute(2) ]] ;
    float2 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    half4 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float2 TEXCOORD6 [[ user(TEXCOORD6) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool u_xlatb0;
    float4 u_xlat1;
    half4 u_xlat16_1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    half3 u_xlat16_5;
    half3 u_xlat16_6;
    float u_xlat21;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0] * input.POSITION0.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2] * input.POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    output.mtl_Position = Globals.hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlatb0 = Globals._UVSec==half(0.0);
    u_xlat0.xy = (bool(u_xlatb0)) ? input.TEXCOORD0.xy : input.TEXCOORD1.xy;
    output.TEXCOORD0.zw = u_xlat0.xy * Globals._DetailAlbedoMap_ST.xy + Globals._DetailAlbedoMap_ST.zw;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy * Globals._MainTex_ST.xy + Globals._MainTex_ST.zw;
    u_xlat0.xyz = input.POSITION0.yyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * input.POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * input.POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * input.POSITION0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-Globals._WorldSpaceCameraPos.xyzx.xyz);
    output.TEXCOORD1.xyz = half3(u_xlat1.xyz);
    output.TEXCOORD2.xyz = half3(0.0, 0.0, 0.0);
    output.TEXCOORD2.w = half(u_xlat0.x);
    output.TEXCOORD3.xyz = half3(0.0, 0.0, 0.0);
    output.TEXCOORD3.w = half(u_xlat0.y);
    u_xlat1.w = u_xlat0.z;
    u_xlat2.x = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = rsqrt(u_xlat21);
    u_xlat1.xyz = float3(u_xlat21) * u_xlat2.xyz;
    output.TEXCOORD4 = half4(u_xlat1);
    u_xlat2 = (-u_xlat0.xxxx) + Globals.unity_4LightPosX0;
    u_xlat3 = (-u_xlat0.yyyy) + Globals.unity_4LightPosY0;
    u_xlat0 = (-u_xlat0.zzzz) + Globals.unity_4LightPosZ0;
    u_xlat4 = u_xlat1.yyyy * u_xlat3;
    u_xlat3 = u_xlat3 * u_xlat3;
    u_xlat3 = u_xlat2 * u_xlat2 + u_xlat3;
    u_xlat2 = u_xlat2 * u_xlat1.xxxx + u_xlat4;
    u_xlat2 = u_xlat0 * u_xlat1.zzzz + u_xlat2;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
    u_xlat0 = max(u_xlat0, float4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat3 = rsqrt(u_xlat0);
    u_xlat0 = u_xlat0 * float4(Globals.unity_4LightAtten0) + float4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = float4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat2 = u_xlat2 * u_xlat3;
    u_xlat2 = max(u_xlat2, float4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat2;
    u_xlat2.xyz = u_xlat0.yyy * float3(Globals.unity_LightColor[1].xyz);
    u_xlat2.xyz = float3(Globals.unity_LightColor[0].xyz) * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = float3(Globals.unity_LightColor[2].xyz) * u_xlat0.zzz + u_xlat2.xyz;
    u_xlat0.xyz = float3(Globals.unity_LightColor[3].xyz) * u_xlat0.www + u_xlat0.xyz;
    u_xlat2.xyz = u_xlat0.xyz * float3(0.305306017, 0.305306017, 0.305306017) + float3(0.682171106, 0.682171106, 0.682171106);
    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + float3(0.0125228781, 0.0125228781, 0.0125228781);
    u_xlat16_5.x = half(u_xlat1.y * u_xlat1.y);
    u_xlat16_5.x = half(u_xlat1.x * u_xlat1.x + (-float(u_xlat16_5.x)));
    u_xlat16_1 = half4(u_xlat1.yzzx * u_xlat1.xyzz);
    u_xlat16_6.x = dot(Globals.unity_SHBr, u_xlat16_1);
    u_xlat16_6.y = dot(Globals.unity_SHBg, u_xlat16_1);
    u_xlat16_6.z = dot(Globals.unity_SHBb, u_xlat16_1);
    u_xlat16_5.xyz = Globals.unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
    output.TEXCOORD5.xyz = half3(u_xlat0.xyz * u_xlat2.xyz + float3(u_xlat16_5.xyz));
    output.TEXCOORD5.w = half(0.0);
    output.TEXCOORD6.xy = float2(0.0, 0.0);
    return output;
}


-- Fragment shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"
Uses vertex data channel "TexCoord0"

Constant Buffer "Globals" (402 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 176
  Matrix4x4 unity_WorldToObject at 240
  Matrix4x4 unity_MatrixVP at 304
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 unity_4LightPosX0 at 16
  Vector4 unity_4LightPosY0 at 32
  Vector4 unity_4LightPosZ0 at 48
  VectorHalf4 unity_4LightAtten0 at 64
  VectorHalf4 unity_LightColor[8] at 72
  VectorHalf4 unity_SHBr at 136
  VectorHalf4 unity_SHBg at 144
  VectorHalf4 unity_SHBb at 152
  VectorHalf4 unity_SHC at 160
  Vector4 _MainTex_ST at 368
  Vector4 _DetailAlbedoMap_ST at 384
  ScalarHalf _UVSec at 400
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 unity_4LightPosX0;
    float4 unity_4LightPosY0;
    float4 unity_4LightPosZ0;
    half4 unity_4LightAtten0;
    half4 unity_LightColor[8];
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    float4 _DetailAlbedoMap_ST;
    half _UVSec;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    half3 NORMAL0 [[ attribute(1) ]] ;
    float2 TEXCOORD0 [[ attribute(2) ]] ;
    float2 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    half4 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float2 TEXCOORD6 [[ user(TEXCOORD6) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool u_xlatb0;
    float4 u_xlat1;
    half4 u_xlat16_1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    half3 u_xlat16_5;
    half3 u_xlat16_6;
    float u_xlat21;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0] * input.POSITION0.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2] * input.POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    output.mtl_Position = Globals.hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlatb0 = Globals._UVSec==half(0.0);
    u_xlat0.xy = (bool(u_xlatb0)) ? input.TEXCOORD0.xy : input.TEXCOORD1.xy;
    output.TEXCOORD0.zw = u_xlat0.xy * Globals._DetailAlbedoMap_ST.xy + Globals._DetailAlbedoMap_ST.zw;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy * Globals._MainTex_ST.xy + Globals._MainTex_ST.zw;
    u_xlat0.xyz = input.POSITION0.yyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * input.POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * input.POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * input.POSITION0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-Globals._WorldSpaceCameraPos.xyzx.xyz);
    output.TEXCOORD1.xyz = half3(u_xlat1.xyz);
    output.TEXCOORD2.xyz = half3(0.0, 0.0, 0.0);
    output.TEXCOORD2.w = half(u_xlat0.x);
    output.TEXCOORD3.xyz = half3(0.0, 0.0, 0.0);
    output.TEXCOORD3.w = half(u_xlat0.y);
    u_xlat1.w = u_xlat0.z;
    u_xlat2.x = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = rsqrt(u_xlat21);
    u_xlat1.xyz = float3(u_xlat21) * u_xlat2.xyz;
    output.TEXCOORD4 = half4(u_xlat1);
    u_xlat2 = (-u_xlat0.xxxx) + Globals.unity_4LightPosX0;
    u_xlat3 = (-u_xlat0.yyyy) + Globals.unity_4LightPosY0;
    u_xlat0 = (-u_xlat0.zzzz) + Globals.unity_4LightPosZ0;
    u_xlat4 = u_xlat1.yyyy * u_xlat3;
    u_xlat3 = u_xlat3 * u_xlat3;
    u_xlat3 = u_xlat2 * u_xlat2 + u_xlat3;
    u_xlat2 = u_xlat2 * u_xlat1.xxxx + u_xlat4;
    u_xlat2 = u_xlat0 * u_xlat1.zzzz + u_xlat2;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
    u_xlat0 = max(u_xlat0, float4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat3 = rsqrt(u_xlat0);
    u_xlat0 = u_xlat0 * float4(Globals.unity_4LightAtten0) + float4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = float4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat2 = u_xlat2 * u_xlat3;
    u_xlat2 = max(u_xlat2, float4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat2;
    u_xlat2.xyz = u_xlat0.yyy * float3(Globals.unity_LightColor[1].xyz);
    u_xlat2.xyz = float3(Globals.unity_LightColor[0].xyz) * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = float3(Globals.unity_LightColor[2].xyz) * u_xlat0.zzz + u_xlat2.xyz;
    u_xlat0.xyz = float3(Globals.unity_LightColor[3].xyz) * u_xlat0.www + u_xlat0.xyz;
    u_xlat2.xyz = u_xlat0.xyz * float3(0.305306017, 0.305306017, 0.305306017) + float3(0.682171106, 0.682171106, 0.682171106);
    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + float3(0.0125228781, 0.0125228781, 0.0125228781);
    u_xlat16_5.x = half(u_xlat1.y * u_xlat1.y);
    u_xlat16_5.x = half(u_xlat1.x * u_xlat1.x + (-float(u_xlat16_5.x)));
    u_xlat16_1 = half4(u_xlat1.yzzx * u_xlat1.xyzz);
    u_xlat16_6.x = dot(Globals.unity_SHBr, u_xlat16_1);
    u_xlat16_6.y = dot(Globals.unity_SHBg, u_xlat16_1);
    u_xlat16_6.z = dot(Globals.unity_SHBb, u_xlat16_1);
    u_xlat16_5.xyz = Globals.unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
    output.TEXCOORD5.xyz = half3(u_xlat0.xyz * u_xlat2.xyz + float3(u_xlat16_5.xyz));
    output.TEXCOORD5.w = half(0.0);
    output.TEXCOORD6.xy = float2(0.0, 0.0);
    return output;
}


-- Fragment shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 2
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"
Uses vertex data channel "TexCoord0"

Constant Buffer "Globals" (402 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 176
  Matrix4x4 unity_WorldToObject at 240
  Matrix4x4 unity_MatrixVP at 304
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 unity_4LightPosX0 at 16
  Vector4 unity_4LightPosY0 at 32
  Vector4 unity_4LightPosZ0 at 48
  VectorHalf4 unity_4LightAtten0 at 64
  VectorHalf4 unity_LightColor[8] at 72
  VectorHalf4 unity_SHBr at 136
  VectorHalf4 unity_SHBg at 144
  VectorHalf4 unity_SHBb at 152
  VectorHalf4 unity_SHC at 160
  Vector4 _MainTex_ST at 368
  Vector4 _DetailAlbedoMap_ST at 384
  ScalarHalf _UVSec at 400
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 unity_4LightPosX0;
    float4 unity_4LightPosY0;
    float4 unity_4LightPosZ0;
    half4 unity_4LightAtten0;
    half4 unity_LightColor[8];
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    float4 _DetailAlbedoMap_ST;
    half _UVSec;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    half3 NORMAL0 [[ attribute(1) ]] ;
    float2 TEXCOORD0 [[ attribute(2) ]] ;
    float2 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    half4 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float2 TEXCOORD6 [[ user(TEXCOORD6) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool u_xlatb0;
    float4 u_xlat1;
    half4 u_xlat16_1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    half3 u_xlat16_5;
    half3 u_xlat16_6;
    float u_xlat21;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0] * input.POSITION0.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2] * input.POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    output.mtl_Position = Globals.hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlatb0 = Globals._UVSec==half(0.0);
    u_xlat0.xy = (bool(u_xlatb0)) ? input.TEXCOORD0.xy : input.TEXCOORD1.xy;
    output.TEXCOORD0.zw = u_xlat0.xy * Globals._DetailAlbedoMap_ST.xy + Globals._DetailAlbedoMap_ST.zw;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy * Globals._MainTex_ST.xy + Globals._MainTex_ST.zw;
    u_xlat0.xyz = input.POSITION0.yyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * input.POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * input.POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * input.POSITION0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-Globals._WorldSpaceCameraPos.xyzx.xyz);
    output.TEXCOORD1.xyz = half3(u_xlat1.xyz);
    output.TEXCOORD2.xyz = half3(0.0, 0.0, 0.0);
    output.TEXCOORD2.w = half(u_xlat0.x);
    output.TEXCOORD3.xyz = half3(0.0, 0.0, 0.0);
    output.TEXCOORD3.w = half(u_xlat0.y);
    u_xlat1.w = u_xlat0.z;
    u_xlat2.x = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = rsqrt(u_xlat21);
    u_xlat1.xyz = float3(u_xlat21) * u_xlat2.xyz;
    output.TEXCOORD4 = half4(u_xlat1);
    u_xlat2 = (-u_xlat0.xxxx) + Globals.unity_4LightPosX0;
    u_xlat3 = (-u_xlat0.yyyy) + Globals.unity_4LightPosY0;
    u_xlat0 = (-u_xlat0.zzzz) + Globals.unity_4LightPosZ0;
    u_xlat4 = u_xlat1.yyyy * u_xlat3;
    u_xlat3 = u_xlat3 * u_xlat3;
    u_xlat3 = u_xlat2 * u_xlat2 + u_xlat3;
    u_xlat2 = u_xlat2 * u_xlat1.xxxx + u_xlat4;
    u_xlat2 = u_xlat0 * u_xlat1.zzzz + u_xlat2;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
    u_xlat0 = max(u_xlat0, float4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat3 = rsqrt(u_xlat0);
    u_xlat0 = u_xlat0 * float4(Globals.unity_4LightAtten0) + float4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = float4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat2 = u_xlat2 * u_xlat3;
    u_xlat2 = max(u_xlat2, float4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat2;
    u_xlat2.xyz = u_xlat0.yyy * float3(Globals.unity_LightColor[1].xyz);
    u_xlat2.xyz = float3(Globals.unity_LightColor[0].xyz) * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = float3(Globals.unity_LightColor[2].xyz) * u_xlat0.zzz + u_xlat2.xyz;
    u_xlat0.xyz = float3(Globals.unity_LightColor[3].xyz) * u_xlat0.www + u_xlat0.xyz;
    u_xlat2.xyz = u_xlat0.xyz * float3(0.305306017, 0.305306017, 0.305306017) + float3(0.682171106, 0.682171106, 0.682171106);
    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + float3(0.0125228781, 0.0125228781, 0.0125228781);
    u_xlat16_5.x = half(u_xlat1.y * u_xlat1.y);
    u_xlat16_5.x = half(u_xlat1.x * u_xlat1.x + (-float(u_xlat16_5.x)));
    u_xlat16_1 = half4(u_xlat1.yzzx * u_xlat1.xyzz);
    u_xlat16_6.x = dot(Globals.unity_SHBr, u_xlat16_1);
    u_xlat16_6.y = dot(Globals.unity_SHBg, u_xlat16_1);
    u_xlat16_6.z = dot(Globals.unity_SHBb, u_xlat16_1);
    u_xlat16_5.xyz = Globals.unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
    output.TEXCOORD5.xyz = half3(u_xlat0.xyz * u_xlat2.xyz + float3(u_xlat16_5.xyz));
    output.TEXCOORD5.w = half(0.0);
    output.TEXCOORD6.xy = float2(0.0, 0.0);
    return output;
}


-- Fragment shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 3
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"
Uses vertex data channel "TexCoord0"

Constant Buffer "Globals" (402 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 176
  Matrix4x4 unity_WorldToObject at 240
  Matrix4x4 unity_MatrixVP at 304
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 unity_4LightPosX0 at 16
  Vector4 unity_4LightPosY0 at 32
  Vector4 unity_4LightPosZ0 at 48
  VectorHalf4 unity_4LightAtten0 at 64
  VectorHalf4 unity_LightColor[8] at 72
  VectorHalf4 unity_SHBr at 136
  VectorHalf4 unity_SHBg at 144
  VectorHalf4 unity_SHBb at 152
  VectorHalf4 unity_SHC at 160
  Vector4 _MainTex_ST at 368
  Vector4 _DetailAlbedoMap_ST at 384
  ScalarHalf _UVSec at 400
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 unity_4LightPosX0;
    float4 unity_4LightPosY0;
    float4 unity_4LightPosZ0;
    half4 unity_4LightAtten0;
    half4 unity_LightColor[8];
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    float4 _DetailAlbedoMap_ST;
    half _UVSec;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    half3 NORMAL0 [[ attribute(1) ]] ;
    float2 TEXCOORD0 [[ attribute(2) ]] ;
    float2 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    half4 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float2 TEXCOORD6 [[ user(TEXCOORD6) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool u_xlatb0;
    float4 u_xlat1;
    half4 u_xlat16_1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    half3 u_xlat16_5;
    half3 u_xlat16_6;
    float u_xlat21;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0] * input.POSITION0.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2] * input.POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    output.mtl_Position = Globals.hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlatb0 = Globals._UVSec==half(0.0);
    u_xlat0.xy = (bool(u_xlatb0)) ? input.TEXCOORD0.xy : input.TEXCOORD1.xy;
    output.TEXCOORD0.zw = u_xlat0.xy * Globals._DetailAlbedoMap_ST.xy + Globals._DetailAlbedoMap_ST.zw;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy * Globals._MainTex_ST.xy + Globals._MainTex_ST.zw;
    u_xlat0.xyz = input.POSITION0.yyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * input.POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * input.POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * input.POSITION0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-Globals._WorldSpaceCameraPos.xyzx.xyz);
    output.TEXCOORD1.xyz = half3(u_xlat1.xyz);
    output.TEXCOORD2.xyz = half3(0.0, 0.0, 0.0);
    output.TEXCOORD2.w = half(u_xlat0.x);
    output.TEXCOORD3.xyz = half3(0.0, 0.0, 0.0);
    output.TEXCOORD3.w = half(u_xlat0.y);
    u_xlat1.w = u_xlat0.z;
    u_xlat2.x = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = rsqrt(u_xlat21);
    u_xlat1.xyz = float3(u_xlat21) * u_xlat2.xyz;
    output.TEXCOORD4 = half4(u_xlat1);
    u_xlat2 = (-u_xlat0.xxxx) + Globals.unity_4LightPosX0;
    u_xlat3 = (-u_xlat0.yyyy) + Globals.unity_4LightPosY0;
    u_xlat0 = (-u_xlat0.zzzz) + Globals.unity_4LightPosZ0;
    u_xlat4 = u_xlat1.yyyy * u_xlat3;
    u_xlat3 = u_xlat3 * u_xlat3;
    u_xlat3 = u_xlat2 * u_xlat2 + u_xlat3;
    u_xlat2 = u_xlat2 * u_xlat1.xxxx + u_xlat4;
    u_xlat2 = u_xlat0 * u_xlat1.zzzz + u_xlat2;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
    u_xlat0 = max(u_xlat0, float4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat3 = rsqrt(u_xlat0);
    u_xlat0 = u_xlat0 * float4(Globals.unity_4LightAtten0) + float4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = float4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat2 = u_xlat2 * u_xlat3;
    u_xlat2 = max(u_xlat2, float4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat2;
    u_xlat2.xyz = u_xlat0.yyy * float3(Globals.unity_LightColor[1].xyz);
    u_xlat2.xyz = float3(Globals.unity_LightColor[0].xyz) * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = float3(Globals.unity_LightColor[2].xyz) * u_xlat0.zzz + u_xlat2.xyz;
    u_xlat0.xyz = float3(Globals.unity_LightColor[3].xyz) * u_xlat0.www + u_xlat0.xyz;
    u_xlat2.xyz = u_xlat0.xyz * float3(0.305306017, 0.305306017, 0.305306017) + float3(0.682171106, 0.682171106, 0.682171106);
    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + float3(0.0125228781, 0.0125228781, 0.0125228781);
    u_xlat16_5.x = half(u_xlat1.y * u_xlat1.y);
    u_xlat16_5.x = half(u_xlat1.x * u_xlat1.x + (-float(u_xlat16_5.x)));
    u_xlat16_1 = half4(u_xlat1.yzzx * u_xlat1.xyzz);
    u_xlat16_6.x = dot(Globals.unity_SHBr, u_xlat16_1);
    u_xlat16_6.y = dot(Globals.unity_SHBg, u_xlat16_1);
    u_xlat16_6.z = dot(Globals.unity_SHBb, u_xlat16_1);
    u_xlat16_5.xyz = Globals.unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
    output.TEXCOORD5.xyz = half3(u_xlat0.xyz * u_xlat2.xyz + float3(u_xlat16_5.xyz));
    output.TEXCOORD5.w = half(0.0);
    output.TEXCOORD6.xy = float2(0.0, 0.0);
    return output;
}


-- Fragment shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

//////////////////////////////////////////////////////
Keywords set in this variant: DIRECTIONAL SHADOWS_SCREEN _EMISSION VERTEXLIGHT_ON 
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"
Uses vertex data channel "TexCoord0"

Constant Buffer "Globals" (402 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 176
  Matrix4x4 unity_WorldToObject at 240
  Matrix4x4 unity_MatrixVP at 304
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 unity_4LightPosX0 at 16
  Vector4 unity_4LightPosY0 at 32
  Vector4 unity_4LightPosZ0 at 48
  VectorHalf4 unity_4LightAtten0 at 64
  VectorHalf4 unity_LightColor[8] at 72
  VectorHalf4 unity_SHBr at 136
  VectorHalf4 unity_SHBg at 144
  VectorHalf4 unity_SHBb at 152
  VectorHalf4 unity_SHC at 160
  Vector4 _MainTex_ST at 368
  Vector4 _DetailAlbedoMap_ST at 384
  ScalarHalf _UVSec at 400
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 unity_4LightPosX0;
    float4 unity_4LightPosY0;
    float4 unity_4LightPosZ0;
    half4 unity_4LightAtten0;
    half4 unity_LightColor[8];
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    float4 _DetailAlbedoMap_ST;
    half _UVSec;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    half3 NORMAL0 [[ attribute(1) ]] ;
    float2 TEXCOORD0 [[ attribute(2) ]] ;
    float2 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    half4 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float2 TEXCOORD6 [[ user(TEXCOORD6) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool u_xlatb0;
    float4 u_xlat1;
    half4 u_xlat16_1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    half3 u_xlat16_5;
    half3 u_xlat16_6;
    float u_xlat21;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0] * input.POSITION0.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2] * input.POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    output.mtl_Position = Globals.hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlatb0 = Globals._UVSec==half(0.0);
    u_xlat0.xy = (bool(u_xlatb0)) ? input.TEXCOORD0.xy : input.TEXCOORD1.xy;
    output.TEXCOORD0.zw = u_xlat0.xy * Globals._DetailAlbedoMap_ST.xy + Globals._DetailAlbedoMap_ST.zw;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy * Globals._MainTex_ST.xy + Globals._MainTex_ST.zw;
    u_xlat0.xyz = input.POSITION0.yyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * input.POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * input.POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * input.POSITION0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-Globals._WorldSpaceCameraPos.xyzx.xyz);
    output.TEXCOORD1.xyz = half3(u_xlat1.xyz);
    output.TEXCOORD2.xyz = half3(0.0, 0.0, 0.0);
    output.TEXCOORD2.w = half(u_xlat0.x);
    output.TEXCOORD3.xyz = half3(0.0, 0.0, 0.0);
    output.TEXCOORD3.w = half(u_xlat0.y);
    u_xlat1.w = u_xlat0.z;
    u_xlat2.x = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = rsqrt(u_xlat21);
    u_xlat1.xyz = float3(u_xlat21) * u_xlat2.xyz;
    output.TEXCOORD4 = half4(u_xlat1);
    u_xlat2 = (-u_xlat0.xxxx) + Globals.unity_4LightPosX0;
    u_xlat3 = (-u_xlat0.yyyy) + Globals.unity_4LightPosY0;
    u_xlat0 = (-u_xlat0.zzzz) + Globals.unity_4LightPosZ0;
    u_xlat4 = u_xlat1.yyyy * u_xlat3;
    u_xlat3 = u_xlat3 * u_xlat3;
    u_xlat3 = u_xlat2 * u_xlat2 + u_xlat3;
    u_xlat2 = u_xlat2 * u_xlat1.xxxx + u_xlat4;
    u_xlat2 = u_xlat0 * u_xlat1.zzzz + u_xlat2;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
    u_xlat0 = max(u_xlat0, float4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat3 = rsqrt(u_xlat0);
    u_xlat0 = u_xlat0 * float4(Globals.unity_4LightAtten0) + float4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = float4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat2 = u_xlat2 * u_xlat3;
    u_xlat2 = max(u_xlat2, float4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat2;
    u_xlat2.xyz = u_xlat0.yyy * float3(Globals.unity_LightColor[1].xyz);
    u_xlat2.xyz = float3(Globals.unity_LightColor[0].xyz) * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = float3(Globals.unity_LightColor[2].xyz) * u_xlat0.zzz + u_xlat2.xyz;
    u_xlat0.xyz = float3(Globals.unity_LightColor[3].xyz) * u_xlat0.www + u_xlat0.xyz;
    u_xlat2.xyz = u_xlat0.xyz * float3(0.305306017, 0.305306017, 0.305306017) + float3(0.682171106, 0.682171106, 0.682171106);
    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + float3(0.0125228781, 0.0125228781, 0.0125228781);
    u_xlat16_5.x = half(u_xlat1.y * u_xlat1.y);
    u_xlat16_5.x = half(u_xlat1.x * u_xlat1.x + (-float(u_xlat16_5.x)));
    u_xlat16_1 = half4(u_xlat1.yzzx * u_xlat1.xyzz);
    u_xlat16_6.x = dot(Globals.unity_SHBr, u_xlat16_1);
    u_xlat16_6.y = dot(Globals.unity_SHBg, u_xlat16_1);
    u_xlat16_6.z = dot(Globals.unity_SHBb, u_xlat16_1);
    u_xlat16_5.xyz = Globals.unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
    output.TEXCOORD5.xyz = half3(u_xlat0.xyz * u_xlat2.xyz + float3(u_xlat16_5.xyz));
    output.TEXCOORD5.w = half(0.0);
    output.TEXCOORD6.xy = float2(0.0, 0.0);
    return output;
}


-- Fragment shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 2
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"
Uses vertex data channel "TexCoord0"

Constant Buffer "Globals" (402 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 176
  Matrix4x4 unity_WorldToObject at 240
  Matrix4x4 unity_MatrixVP at 304
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 unity_4LightPosX0 at 16
  Vector4 unity_4LightPosY0 at 32
  Vector4 unity_4LightPosZ0 at 48
  VectorHalf4 unity_4LightAtten0 at 64
  VectorHalf4 unity_LightColor[8] at 72
  VectorHalf4 unity_SHBr at 136
  VectorHalf4 unity_SHBg at 144
  VectorHalf4 unity_SHBb at 152
  VectorHalf4 unity_SHC at 160
  Vector4 _MainTex_ST at 368
  Vector4 _DetailAlbedoMap_ST at 384
  ScalarHalf _UVSec at 400
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 unity_4LightPosX0;
    float4 unity_4LightPosY0;
    float4 unity_4LightPosZ0;
    half4 unity_4LightAtten0;
    half4 unity_LightColor[8];
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    float4 _DetailAlbedoMap_ST;
    half _UVSec;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    half3 NORMAL0 [[ attribute(1) ]] ;
    float2 TEXCOORD0 [[ attribute(2) ]] ;
    float2 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    half4 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float2 TEXCOORD6 [[ user(TEXCOORD6) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool u_xlatb0;
    float4 u_xlat1;
    half4 u_xlat16_1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    half3 u_xlat16_5;
    half3 u_xlat16_6;
    float u_xlat21;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0] * input.POSITION0.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2] * input.POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    output.mtl_Position = Globals.hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlatb0 = Globals._UVSec==half(0.0);
    u_xlat0.xy = (bool(u_xlatb0)) ? input.TEXCOORD0.xy : input.TEXCOORD1.xy;
    output.TEXCOORD0.zw = u_xlat0.xy * Globals._DetailAlbedoMap_ST.xy + Globals._DetailAlbedoMap_ST.zw;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy * Globals._MainTex_ST.xy + Globals._MainTex_ST.zw;
    u_xlat0.xyz = input.POSITION0.yyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * input.POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * input.POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * input.POSITION0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-Globals._WorldSpaceCameraPos.xyzx.xyz);
    output.TEXCOORD1.xyz = half3(u_xlat1.xyz);
    output.TEXCOORD2.xyz = half3(0.0, 0.0, 0.0);
    output.TEXCOORD2.w = half(u_xlat0.x);
    output.TEXCOORD3.xyz = half3(0.0, 0.0, 0.0);
    output.TEXCOORD3.w = half(u_xlat0.y);
    u_xlat1.w = u_xlat0.z;
    u_xlat2.x = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = rsqrt(u_xlat21);
    u_xlat1.xyz = float3(u_xlat21) * u_xlat2.xyz;
    output.TEXCOORD4 = half4(u_xlat1);
    u_xlat2 = (-u_xlat0.xxxx) + Globals.unity_4LightPosX0;
    u_xlat3 = (-u_xlat0.yyyy) + Globals.unity_4LightPosY0;
    u_xlat0 = (-u_xlat0.zzzz) + Globals.unity_4LightPosZ0;
    u_xlat4 = u_xlat1.yyyy * u_xlat3;
    u_xlat3 = u_xlat3 * u_xlat3;
    u_xlat3 = u_xlat2 * u_xlat2 + u_xlat3;
    u_xlat2 = u_xlat2 * u_xlat1.xxxx + u_xlat4;
    u_xlat2 = u_xlat0 * u_xlat1.zzzz + u_xlat2;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
    u_xlat0 = max(u_xlat0, float4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat3 = rsqrt(u_xlat0);
    u_xlat0 = u_xlat0 * float4(Globals.unity_4LightAtten0) + float4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = float4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat2 = u_xlat2 * u_xlat3;
    u_xlat2 = max(u_xlat2, float4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat2;
    u_xlat2.xyz = u_xlat0.yyy * float3(Globals.unity_LightColor[1].xyz);
    u_xlat2.xyz = float3(Globals.unity_LightColor[0].xyz) * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = float3(Globals.unity_LightColor[2].xyz) * u_xlat0.zzz + u_xlat2.xyz;
    u_xlat0.xyz = float3(Globals.unity_LightColor[3].xyz) * u_xlat0.www + u_xlat0.xyz;
    u_xlat2.xyz = u_xlat0.xyz * float3(0.305306017, 0.305306017, 0.305306017) + float3(0.682171106, 0.682171106, 0.682171106);
    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + float3(0.0125228781, 0.0125228781, 0.0125228781);
    u_xlat16_5.x = half(u_xlat1.y * u_xlat1.y);
    u_xlat16_5.x = half(u_xlat1.x * u_xlat1.x + (-float(u_xlat16_5.x)));
    u_xlat16_1 = half4(u_xlat1.yzzx * u_xlat1.xyzz);
    u_xlat16_6.x = dot(Globals.unity_SHBr, u_xlat16_1);
    u_xlat16_6.y = dot(Globals.unity_SHBg, u_xlat16_1);
    u_xlat16_6.z = dot(Globals.unity_SHBb, u_xlat16_1);
    u_xlat16_5.xyz = Globals.unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
    output.TEXCOORD5.xyz = half3(u_xlat0.xyz * u_xlat2.xyz + float3(u_xlat16_5.xyz));
    output.TEXCOORD5.w = half(0.0);
    output.TEXCOORD6.xy = float2(0.0, 0.0);
    return output;
}


-- Fragment shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 3
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"
Uses vertex data channel "TexCoord0"

Constant Buffer "Globals" (402 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 176
  Matrix4x4 unity_WorldToObject at 240
  Matrix4x4 unity_MatrixVP at 304
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 unity_4LightPosX0 at 16
  Vector4 unity_4LightPosY0 at 32
  Vector4 unity_4LightPosZ0 at 48
  VectorHalf4 unity_4LightAtten0 at 64
  VectorHalf4 unity_LightColor[8] at 72
  VectorHalf4 unity_SHBr at 136
  VectorHalf4 unity_SHBg at 144
  VectorHalf4 unity_SHBb at 152
  VectorHalf4 unity_SHC at 160
  Vector4 _MainTex_ST at 368
  Vector4 _DetailAlbedoMap_ST at 384
  ScalarHalf _UVSec at 400
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 unity_4LightPosX0;
    float4 unity_4LightPosY0;
    float4 unity_4LightPosZ0;
    half4 unity_4LightAtten0;
    half4 unity_LightColor[8];
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    float4 _DetailAlbedoMap_ST;
    half _UVSec;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    half3 NORMAL0 [[ attribute(1) ]] ;
    float2 TEXCOORD0 [[ attribute(2) ]] ;
    float2 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    half4 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float2 TEXCOORD6 [[ user(TEXCOORD6) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool u_xlatb0;
    float4 u_xlat1;
    half4 u_xlat16_1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    half3 u_xlat16_5;
    half3 u_xlat16_6;
    float u_xlat21;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0] * input.POSITION0.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2] * input.POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    output.mtl_Position = Globals.hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlatb0 = Globals._UVSec==half(0.0);
    u_xlat0.xy = (bool(u_xlatb0)) ? input.TEXCOORD0.xy : input.TEXCOORD1.xy;
    output.TEXCOORD0.zw = u_xlat0.xy * Globals._DetailAlbedoMap_ST.xy + Globals._DetailAlbedoMap_ST.zw;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy * Globals._MainTex_ST.xy + Globals._MainTex_ST.zw;
    u_xlat0.xyz = input.POSITION0.yyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * input.POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * input.POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * input.POSITION0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-Globals._WorldSpaceCameraPos.xyzx.xyz);
    output.TEXCOORD1.xyz = half3(u_xlat1.xyz);
    output.TEXCOORD2.xyz = half3(0.0, 0.0, 0.0);
    output.TEXCOORD2.w = half(u_xlat0.x);
    output.TEXCOORD3.xyz = half3(0.0, 0.0, 0.0);
    output.TEXCOORD3.w = half(u_xlat0.y);
    u_xlat1.w = u_xlat0.z;
    u_xlat2.x = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = rsqrt(u_xlat21);
    u_xlat1.xyz = float3(u_xlat21) * u_xlat2.xyz;
    output.TEXCOORD4 = half4(u_xlat1);
    u_xlat2 = (-u_xlat0.xxxx) + Globals.unity_4LightPosX0;
    u_xlat3 = (-u_xlat0.yyyy) + Globals.unity_4LightPosY0;
    u_xlat0 = (-u_xlat0.zzzz) + Globals.unity_4LightPosZ0;
    u_xlat4 = u_xlat1.yyyy * u_xlat3;
    u_xlat3 = u_xlat3 * u_xlat3;
    u_xlat3 = u_xlat2 * u_xlat2 + u_xlat3;
    u_xlat2 = u_xlat2 * u_xlat1.xxxx + u_xlat4;
    u_xlat2 = u_xlat0 * u_xlat1.zzzz + u_xlat2;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
    u_xlat0 = max(u_xlat0, float4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat3 = rsqrt(u_xlat0);
    u_xlat0 = u_xlat0 * float4(Globals.unity_4LightAtten0) + float4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = float4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat2 = u_xlat2 * u_xlat3;
    u_xlat2 = max(u_xlat2, float4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat2;
    u_xlat2.xyz = u_xlat0.yyy * float3(Globals.unity_LightColor[1].xyz);
    u_xlat2.xyz = float3(Globals.unity_LightColor[0].xyz) * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = float3(Globals.unity_LightColor[2].xyz) * u_xlat0.zzz + u_xlat2.xyz;
    u_xlat0.xyz = float3(Globals.unity_LightColor[3].xyz) * u_xlat0.www + u_xlat0.xyz;
    u_xlat2.xyz = u_xlat0.xyz * float3(0.305306017, 0.305306017, 0.305306017) + float3(0.682171106, 0.682171106, 0.682171106);
    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + float3(0.0125228781, 0.0125228781, 0.0125228781);
    u_xlat16_5.x = half(u_xlat1.y * u_xlat1.y);
    u_xlat16_5.x = half(u_xlat1.x * u_xlat1.x + (-float(u_xlat16_5.x)));
    u_xlat16_1 = half4(u_xlat1.yzzx * u_xlat1.xyzz);
    u_xlat16_6.x = dot(Globals.unity_SHBr, u_xlat16_1);
    u_xlat16_6.y = dot(Globals.unity_SHBg, u_xlat16_1);
    u_xlat16_6.z = dot(Globals.unity_SHBb, u_xlat16_1);
    u_xlat16_5.xyz = Globals.unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
    output.TEXCOORD5.xyz = half3(u_xlat0.xyz * u_xlat2.xyz + float3(u_xlat16_5.xyz));
    output.TEXCOORD5.w = half(0.0);
    output.TEXCOORD6.xy = float2(0.0, 0.0);
    return output;
}


-- Fragment shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"
Uses vertex data channel "TexCoord0"

Constant Buffer "Globals" (402 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 176
  Matrix4x4 unity_WorldToObject at 240
  Matrix4x4 unity_MatrixVP at 304
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 unity_4LightPosX0 at 16
  Vector4 unity_4LightPosY0 at 32
  Vector4 unity_4LightPosZ0 at 48
  VectorHalf4 unity_4LightAtten0 at 64
  VectorHalf4 unity_LightColor[8] at 72
  VectorHalf4 unity_SHBr at 136
  VectorHalf4 unity_SHBg at 144
  VectorHalf4 unity_SHBb at 152
  VectorHalf4 unity_SHC at 160
  Vector4 _MainTex_ST at 368
  Vector4 _DetailAlbedoMap_ST at 384
  ScalarHalf _UVSec at 400
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 unity_4LightPosX0;
    float4 unity_4LightPosY0;
    float4 unity_4LightPosZ0;
    half4 unity_4LightAtten0;
    half4 unity_LightColor[8];
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    float4 _DetailAlbedoMap_ST;
    half _UVSec;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    half3 NORMAL0 [[ attribute(1) ]] ;
    float2 TEXCOORD0 [[ attribute(2) ]] ;
    float2 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    half4 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float2 TEXCOORD6 [[ user(TEXCOORD6) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool u_xlatb0;
    float4 u_xlat1;
    half4 u_xlat16_1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    half3 u_xlat16_5;
    half3 u_xlat16_6;
    float u_xlat21;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0] * input.POSITION0.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2] * input.POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    output.mtl_Position = Globals.hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlatb0 = Globals._UVSec==half(0.0);
    u_xlat0.xy = (bool(u_xlatb0)) ? input.TEXCOORD0.xy : input.TEXCOORD1.xy;
    output.TEXCOORD0.zw = u_xlat0.xy * Globals._DetailAlbedoMap_ST.xy + Globals._DetailAlbedoMap_ST.zw;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy * Globals._MainTex_ST.xy + Globals._MainTex_ST.zw;
    u_xlat0.xyz = input.POSITION0.yyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * input.POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * input.POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * input.POSITION0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-Globals._WorldSpaceCameraPos.xyzx.xyz);
    output.TEXCOORD1.xyz = half3(u_xlat1.xyz);
    output.TEXCOORD2.xyz = half3(0.0, 0.0, 0.0);
    output.TEXCOORD2.w = half(u_xlat0.x);
    output.TEXCOORD3.xyz = half3(0.0, 0.0, 0.0);
    output.TEXCOORD3.w = half(u_xlat0.y);
    u_xlat1.w = u_xlat0.z;
    u_xlat2.x = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = rsqrt(u_xlat21);
    u_xlat1.xyz = float3(u_xlat21) * u_xlat2.xyz;
    output.TEXCOORD4 = half4(u_xlat1);
    u_xlat2 = (-u_xlat0.xxxx) + Globals.unity_4LightPosX0;
    u_xlat3 = (-u_xlat0.yyyy) + Globals.unity_4LightPosY0;
    u_xlat0 = (-u_xlat0.zzzz) + Globals.unity_4LightPosZ0;
    u_xlat4 = u_xlat1.yyyy * u_xlat3;
    u_xlat3 = u_xlat3 * u_xlat3;
    u_xlat3 = u_xlat2 * u_xlat2 + u_xlat3;
    u_xlat2 = u_xlat2 * u_xlat1.xxxx + u_xlat4;
    u_xlat2 = u_xlat0 * u_xlat1.zzzz + u_xlat2;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
    u_xlat0 = max(u_xlat0, float4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat3 = rsqrt(u_xlat0);
    u_xlat0 = u_xlat0 * float4(Globals.unity_4LightAtten0) + float4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = float4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat2 = u_xlat2 * u_xlat3;
    u_xlat2 = max(u_xlat2, float4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat2;
    u_xlat2.xyz = u_xlat0.yyy * float3(Globals.unity_LightColor[1].xyz);
    u_xlat2.xyz = float3(Globals.unity_LightColor[0].xyz) * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = float3(Globals.unity_LightColor[2].xyz) * u_xlat0.zzz + u_xlat2.xyz;
    u_xlat0.xyz = float3(Globals.unity_LightColor[3].xyz) * u_xlat0.www + u_xlat0.xyz;
    u_xlat2.xyz = u_xlat0.xyz * float3(0.305306017, 0.305306017, 0.305306017) + float3(0.682171106, 0.682171106, 0.682171106);
    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + float3(0.0125228781, 0.0125228781, 0.0125228781);
    u_xlat16_5.x = half(u_xlat1.y * u_xlat1.y);
    u_xlat16_5.x = half(u_xlat1.x * u_xlat1.x + (-float(u_xlat16_5.x)));
    u_xlat16_1 = half4(u_xlat1.yzzx * u_xlat1.xyzz);
    u_xlat16_6.x = dot(Globals.unity_SHBr, u_xlat16_1);
    u_xlat16_6.y = dot(Globals.unity_SHBg, u_xlat16_1);
    u_xlat16_6.z = dot(Globals.unity_SHBb, u_xlat16_1);
    u_xlat16_5.xyz = Globals.unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
    output.TEXCOORD5.xyz = half3(u_xlat0.xyz * u_xlat2.xyz + float3(u_xlat16_5.xyz));
    output.TEXCOORD5.w = half(0.0);
    output.TEXCOORD6.xy = float2(0.0, 0.0);
    return output;
}


-- Fragment shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 2
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"
Uses vertex data channel "TexCoord0"

Constant Buffer "Globals" (402 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 176
  Matrix4x4 unity_WorldToObject at 240
  Matrix4x4 unity_MatrixVP at 304
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 unity_4LightPosX0 at 16
  Vector4 unity_4LightPosY0 at 32
  Vector4 unity_4LightPosZ0 at 48
  VectorHalf4 unity_4LightAtten0 at 64
  VectorHalf4 unity_LightColor[8] at 72
  VectorHalf4 unity_SHBr at 136
  VectorHalf4 unity_SHBg at 144
  VectorHalf4 unity_SHBb at 152
  VectorHalf4 unity_SHC at 160
  Vector4 _MainTex_ST at 368
  Vector4 _DetailAlbedoMap_ST at 384
  ScalarHalf _UVSec at 400
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 unity_4LightPosX0;
    float4 unity_4LightPosY0;
    float4 unity_4LightPosZ0;
    half4 unity_4LightAtten0;
    half4 unity_LightColor[8];
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    float4 _DetailAlbedoMap_ST;
    half _UVSec;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    half3 NORMAL0 [[ attribute(1) ]] ;
    float2 TEXCOORD0 [[ attribute(2) ]] ;
    float2 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    half4 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float2 TEXCOORD6 [[ user(TEXCOORD6) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool u_xlatb0;
    float4 u_xlat1;
    half4 u_xlat16_1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    half3 u_xlat16_5;
    half3 u_xlat16_6;
    float u_xlat21;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0] * input.POSITION0.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2] * input.POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    output.mtl_Position = Globals.hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlatb0 = Globals._UVSec==half(0.0);
    u_xlat0.xy = (bool(u_xlatb0)) ? input.TEXCOORD0.xy : input.TEXCOORD1.xy;
    output.TEXCOORD0.zw = u_xlat0.xy * Globals._DetailAlbedoMap_ST.xy + Globals._DetailAlbedoMap_ST.zw;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy * Globals._MainTex_ST.xy + Globals._MainTex_ST.zw;
    u_xlat0.xyz = input.POSITION0.yyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * input.POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * input.POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * input.POSITION0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-Globals._WorldSpaceCameraPos.xyzx.xyz);
    output.TEXCOORD1.xyz = half3(u_xlat1.xyz);
    output.TEXCOORD2.xyz = half3(0.0, 0.0, 0.0);
    output.TEXCOORD2.w = half(u_xlat0.x);
    output.TEXCOORD3.xyz = half3(0.0, 0.0, 0.0);
    output.TEXCOORD3.w = half(u_xlat0.y);
    u_xlat1.w = u_xlat0.z;
    u_xlat2.x = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = rsqrt(u_xlat21);
    u_xlat1.xyz = float3(u_xlat21) * u_xlat2.xyz;
    output.TEXCOORD4 = half4(u_xlat1);
    u_xlat2 = (-u_xlat0.xxxx) + Globals.unity_4LightPosX0;
    u_xlat3 = (-u_xlat0.yyyy) + Globals.unity_4LightPosY0;
    u_xlat0 = (-u_xlat0.zzzz) + Globals.unity_4LightPosZ0;
    u_xlat4 = u_xlat1.yyyy * u_xlat3;
    u_xlat3 = u_xlat3 * u_xlat3;
    u_xlat3 = u_xlat2 * u_xlat2 + u_xlat3;
    u_xlat2 = u_xlat2 * u_xlat1.xxxx + u_xlat4;
    u_xlat2 = u_xlat0 * u_xlat1.zzzz + u_xlat2;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
    u_xlat0 = max(u_xlat0, float4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat3 = rsqrt(u_xlat0);
    u_xlat0 = u_xlat0 * float4(Globals.unity_4LightAtten0) + float4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = float4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat2 = u_xlat2 * u_xlat3;
    u_xlat2 = max(u_xlat2, float4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat2;
    u_xlat2.xyz = u_xlat0.yyy * float3(Globals.unity_LightColor[1].xyz);
    u_xlat2.xyz = float3(Globals.unity_LightColor[0].xyz) * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = float3(Globals.unity_LightColor[2].xyz) * u_xlat0.zzz + u_xlat2.xyz;
    u_xlat0.xyz = float3(Globals.unity_LightColor[3].xyz) * u_xlat0.www + u_xlat0.xyz;
    u_xlat2.xyz = u_xlat0.xyz * float3(0.305306017, 0.305306017, 0.305306017) + float3(0.682171106, 0.682171106, 0.682171106);
    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + float3(0.0125228781, 0.0125228781, 0.0125228781);
    u_xlat16_5.x = half(u_xlat1.y * u_xlat1.y);
    u_xlat16_5.x = half(u_xlat1.x * u_xlat1.x + (-float(u_xlat16_5.x)));
    u_xlat16_1 = half4(u_xlat1.yzzx * u_xlat1.xyzz);
    u_xlat16_6.x = dot(Globals.unity_SHBr, u_xlat16_1);
    u_xlat16_6.y = dot(Globals.unity_SHBg, u_xlat16_1);
    u_xlat16_6.z = dot(Globals.unity_SHBb, u_xlat16_1);
    u_xlat16_5.xyz = Globals.unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
    output.TEXCOORD5.xyz = half3(u_xlat0.xyz * u_xlat2.xyz + float3(u_xlat16_5.xyz));
    output.TEXCOORD5.w = half(0.0);
    output.TEXCOORD6.xy = float2(0.0, 0.0);
    return output;
}


-- Fragment shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 3
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"
Uses vertex data channel "TexCoord0"

Constant Buffer "Globals" (402 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 176
  Matrix4x4 unity_WorldToObject at 240
  Matrix4x4 unity_MatrixVP at 304
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 unity_4LightPosX0 at 16
  Vector4 unity_4LightPosY0 at 32
  Vector4 unity_4LightPosZ0 at 48
  VectorHalf4 unity_4LightAtten0 at 64
  VectorHalf4 unity_LightColor[8] at 72
  VectorHalf4 unity_SHBr at 136
  VectorHalf4 unity_SHBg at 144
  VectorHalf4 unity_SHBb at 152
  VectorHalf4 unity_SHC at 160
  Vector4 _MainTex_ST at 368
  Vector4 _DetailAlbedoMap_ST at 384
  ScalarHalf _UVSec at 400
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 unity_4LightPosX0;
    float4 unity_4LightPosY0;
    float4 unity_4LightPosZ0;
    half4 unity_4LightAtten0;
    half4 unity_LightColor[8];
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    float4 _DetailAlbedoMap_ST;
    half _UVSec;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    half3 NORMAL0 [[ attribute(1) ]] ;
    float2 TEXCOORD0 [[ attribute(2) ]] ;
    float2 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    half4 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float2 TEXCOORD6 [[ user(TEXCOORD6) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool u_xlatb0;
    float4 u_xlat1;
    half4 u_xlat16_1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    half3 u_xlat16_5;
    half3 u_xlat16_6;
    float u_xlat21;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0] * input.POSITION0.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2] * input.POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    output.mtl_Position = Globals.hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlatb0 = Globals._UVSec==half(0.0);
    u_xlat0.xy = (bool(u_xlatb0)) ? input.TEXCOORD0.xy : input.TEXCOORD1.xy;
    output.TEXCOORD0.zw = u_xlat0.xy * Globals._DetailAlbedoMap_ST.xy + Globals._DetailAlbedoMap_ST.zw;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy * Globals._MainTex_ST.xy + Globals._MainTex_ST.zw;
    u_xlat0.xyz = input.POSITION0.yyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * input.POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * input.POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * input.POSITION0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-Globals._WorldSpaceCameraPos.xyzx.xyz);
    output.TEXCOORD1.xyz = half3(u_xlat1.xyz);
    output.TEXCOORD2.xyz = half3(0.0, 0.0, 0.0);
    output.TEXCOORD2.w = half(u_xlat0.x);
    output.TEXCOORD3.xyz = half3(0.0, 0.0, 0.0);
    output.TEXCOORD3.w = half(u_xlat0.y);
    u_xlat1.w = u_xlat0.z;
    u_xlat2.x = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = rsqrt(u_xlat21);
    u_xlat1.xyz = float3(u_xlat21) * u_xlat2.xyz;
    output.TEXCOORD4 = half4(u_xlat1);
    u_xlat2 = (-u_xlat0.xxxx) + Globals.unity_4LightPosX0;
    u_xlat3 = (-u_xlat0.yyyy) + Globals.unity_4LightPosY0;
    u_xlat0 = (-u_xlat0.zzzz) + Globals.unity_4LightPosZ0;
    u_xlat4 = u_xlat1.yyyy * u_xlat3;
    u_xlat3 = u_xlat3 * u_xlat3;
    u_xlat3 = u_xlat2 * u_xlat2 + u_xlat3;
    u_xlat2 = u_xlat2 * u_xlat1.xxxx + u_xlat4;
    u_xlat2 = u_xlat0 * u_xlat1.zzzz + u_xlat2;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
    u_xlat0 = max(u_xlat0, float4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat3 = rsqrt(u_xlat0);
    u_xlat0 = u_xlat0 * float4(Globals.unity_4LightAtten0) + float4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = float4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat2 = u_xlat2 * u_xlat3;
    u_xlat2 = max(u_xlat2, float4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat2;
    u_xlat2.xyz = u_xlat0.yyy * float3(Globals.unity_LightColor[1].xyz);
    u_xlat2.xyz = float3(Globals.unity_LightColor[0].xyz) * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = float3(Globals.unity_LightColor[2].xyz) * u_xlat0.zzz + u_xlat2.xyz;
    u_xlat0.xyz = float3(Globals.unity_LightColor[3].xyz) * u_xlat0.www + u_xlat0.xyz;
    u_xlat2.xyz = u_xlat0.xyz * float3(0.305306017, 0.305306017, 0.305306017) + float3(0.682171106, 0.682171106, 0.682171106);
    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + float3(0.0125228781, 0.0125228781, 0.0125228781);
    u_xlat16_5.x = half(u_xlat1.y * u_xlat1.y);
    u_xlat16_5.x = half(u_xlat1.x * u_xlat1.x + (-float(u_xlat16_5.x)));
    u_xlat16_1 = half4(u_xlat1.yzzx * u_xlat1.xyzz);
    u_xlat16_6.x = dot(Globals.unity_SHBr, u_xlat16_1);
    u_xlat16_6.y = dot(Globals.unity_SHBg, u_xlat16_1);
    u_xlat16_6.z = dot(Globals.unity_SHBb, u_xlat16_1);
    u_xlat16_5.xyz = Globals.unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
    output.TEXCOORD5.xyz = half3(u_xlat0.xyz * u_xlat2.xyz + float3(u_xlat16_5.xyz));
    output.TEXCOORD5.w = half(0.0);
    output.TEXCOORD6.xy = float2(0.0, 0.0);
    return output;
}


-- Fragment shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"
Uses vertex data channel "TexCoord0"

Constant Buffer "Globals" (274 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 48
  Matrix4x4 unity_WorldToObject at 112
  Matrix4x4 unity_MatrixVP at 176
  Vector3 _WorldSpaceCameraPos at 0
  VectorHalf4 unity_SHBr at 16
  VectorHalf4 unity_SHBg at 24
  VectorHalf4 unity_SHBb at 32
  VectorHalf4 unity_SHC at 40
  Vector4 _MainTex_ST at 240
  Vector4 _DetailAlbedoMap_ST at 256
  ScalarHalf _UVSec at 272
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    float4 _DetailAlbedoMap_ST;
    half _UVSec;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    half3 NORMAL0 [[ attribute(1) ]] ;
    float2 TEXCOORD0 [[ attribute(2) ]] ;
    float2 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    half4 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float2 TEXCOORD6 [[ user(TEXCOORD6) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    half4 u_xlat16_0;
    bool u_xlatb0;
    float4 u_xlat1;
    half u_xlat16_2;
    half3 u_xlat16_3;
    float u_xlat13;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0] * input.POSITION0.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2] * input.POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    output.mtl_Position = Globals.hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlatb0 = Globals._UVSec==half(0.0);
    u_xlat0.xy = (bool(u_xlatb0)) ? input.TEXCOORD0.xy : input.TEXCOORD1.xy;
    output.TEXCOORD0.zw = u_xlat0.xy * Globals._DetailAlbedoMap_ST.xy + Globals._DetailAlbedoMap_ST.zw;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy * Globals._MainTex_ST.xy + Globals._MainTex_ST.zw;
    u_xlat0.xyz = input.POSITION0.yyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * input.POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * input.POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyw = Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * input.POSITION0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyw + (-Globals._WorldSpaceCameraPos.xyzx.xyz);
    output.TEXCOORD1.xyz = half3(u_xlat1.xyz);
    output.TEXCOORD2.w = half(u_xlat0.x);
    output.TEXCOORD2.xyz = half3(0.0, 0.0, 0.0);
    output.TEXCOORD3.w = half(u_xlat0.y);
    output.TEXCOORD3.xyz = half3(0.0, 0.0, 0.0);
    u_xlat1.x = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = rsqrt(u_xlat13);
    u_xlat0.xyz = float3(u_xlat13) * u_xlat1.xyz;
    output.TEXCOORD4 = half4(u_xlat0);
    u_xlat16_2 = half(u_xlat0.y * u_xlat0.y);
    u_xlat16_2 = half(u_xlat0.x * u_xlat0.x + (-float(u_xlat16_2)));
    u_xlat16_0 = half4(u_xlat0.yzzx * u_xlat0.xyzz);
    u_xlat16_3.x = dot(Globals.unity_SHBr, u_xlat16_0);
    u_xlat16_3.y = dot(Globals.unity_SHBg, u_xlat16_0);
    u_xlat16_3.z = dot(Globals.unity_SHBb, u_xlat16_0);
    output.TEXCOORD5.xyz = Globals.unity_SHC.xyz * half3(u_xlat16_2) + u_xlat16_3.xyz;
    output.TEXCOORD5.w = half(0.0);
    output.TEXCOORD6.xy = float2(0.0, 0.0);
    return output;
}


-- Fragment shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 2
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"
Uses vertex data channel "TexCoord0"

Constant Buffer "Globals" (274 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 48
  Matrix4x4 unity_WorldToObject at 112
  Matrix4x4 unity_MatrixVP at 176
  Vector3 _WorldSpaceCameraPos at 0
  VectorHalf4 unity_SHBr at 16
  VectorHalf4 unity_SHBg at 24
  VectorHalf4 unity_SHBb at 32
  VectorHalf4 unity_SHC at 40
  Vector4 _MainTex_ST at 240
  Vector4 _DetailAlbedoMap_ST at 256
  ScalarHalf _UVSec at 272
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    float4 _DetailAlbedoMap_ST;
    half _UVSec;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    half3 NORMAL0 [[ attribute(1) ]] ;
    float2 TEXCOORD0 [[ attribute(2) ]] ;
    float2 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    half4 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float2 TEXCOORD6 [[ user(TEXCOORD6) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    half4 u_xlat16_0;
    bool u_xlatb0;
    float4 u_xlat1;
    half u_xlat16_2;
    half3 u_xlat16_3;
    float u_xlat13;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0] * input.POSITION0.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2] * input.POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    output.mtl_Position = Globals.hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlatb0 = Globals._UVSec==half(0.0);
    u_xlat0.xy = (bool(u_xlatb0)) ? input.TEXCOORD0.xy : input.TEXCOORD1.xy;
    output.TEXCOORD0.zw = u_xlat0.xy * Globals._DetailAlbedoMap_ST.xy + Globals._DetailAlbedoMap_ST.zw;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy * Globals._MainTex_ST.xy + Globals._MainTex_ST.zw;
    u_xlat0.xyz = input.POSITION0.yyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * input.POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * input.POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyw = Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * input.POSITION0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyw + (-Globals._WorldSpaceCameraPos.xyzx.xyz);
    output.TEXCOORD1.xyz = half3(u_xlat1.xyz);
    output.TEXCOORD2.w = half(u_xlat0.x);
    output.TEXCOORD2.xyz = half3(0.0, 0.0, 0.0);
    output.TEXCOORD3.w = half(u_xlat0.y);
    output.TEXCOORD3.xyz = half3(0.0, 0.0, 0.0);
    u_xlat1.x = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = rsqrt(u_xlat13);
    u_xlat0.xyz = float3(u_xlat13) * u_xlat1.xyz;
    output.TEXCOORD4 = half4(u_xlat0);
    u_xlat16_2 = half(u_xlat0.y * u_xlat0.y);
    u_xlat16_2 = half(u_xlat0.x * u_xlat0.x + (-float(u_xlat16_2)));
    u_xlat16_0 = half4(u_xlat0.yzzx * u_xlat0.xyzz);
    u_xlat16_3.x = dot(Globals.unity_SHBr, u_xlat16_0);
    u_xlat16_3.y = dot(Globals.unity_SHBg, u_xlat16_0);
    u_xlat16_3.z = dot(Globals.unity_SHBb, u_xlat16_0);
    output.TEXCOORD5.xyz = Globals.unity_SHC.xyz * half3(u_xlat16_2) + u_xlat16_3.xyz;
    output.TEXCOORD5.w = half(0.0);
    output.TEXCOORD6.xy = float2(0.0, 0.0);
    return output;
}


-- Fragment shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 3
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"
Uses vertex data channel "TexCoord0"

Constant Buffer "Globals" (274 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 48
  Matrix4x4 unity_WorldToObject at 112
  Matrix4x4 unity_MatrixVP at 176
  Vector3 _WorldSpaceCameraPos at 0
  VectorHalf4 unity_SHBr at 16
  VectorHalf4 unity_SHBg at 24
  VectorHalf4 unity_SHBb at 32
  VectorHalf4 unity_SHC at 40
  Vector4 _MainTex_ST at 240
  Vector4 _DetailAlbedoMap_ST at 256
  ScalarHalf _UVSec at 272
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    float4 _DetailAlbedoMap_ST;
    half _UVSec;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    half3 NORMAL0 [[ attribute(1) ]] ;
    float2 TEXCOORD0 [[ attribute(2) ]] ;
    float2 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    half4 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float2 TEXCOORD6 [[ user(TEXCOORD6) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    half4 u_xlat16_0;
    bool u_xlatb0;
    float4 u_xlat1;
    half u_xlat16_2;
    half3 u_xlat16_3;
    float u_xlat13;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0] * input.POSITION0.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2] * input.POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    output.mtl_Position = Globals.hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlatb0 = Globals._UVSec==half(0.0);
    u_xlat0.xy = (bool(u_xlatb0)) ? input.TEXCOORD0.xy : input.TEXCOORD1.xy;
    output.TEXCOORD0.zw = u_xlat0.xy * Globals._DetailAlbedoMap_ST.xy + Globals._DetailAlbedoMap_ST.zw;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy * Globals._MainTex_ST.xy + Globals._MainTex_ST.zw;
    u_xlat0.xyz = input.POSITION0.yyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * input.POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * input.POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyw = Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * input.POSITION0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyw + (-Globals._WorldSpaceCameraPos.xyzx.xyz);
    output.TEXCOORD1.xyz = half3(u_xlat1.xyz);
    output.TEXCOORD2.w = half(u_xlat0.x);
    output.TEXCOORD2.xyz = half3(0.0, 0.0, 0.0);
    output.TEXCOORD3.w = half(u_xlat0.y);
    output.TEXCOORD3.xyz = half3(0.0, 0.0, 0.0);
    u_xlat1.x = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = rsqrt(u_xlat13);
    u_xlat0.xyz = float3(u_xlat13) * u_xlat1.xyz;
    output.TEXCOORD4 = half4(u_xlat0);
    u_xlat16_2 = half(u_xlat0.y * u_xlat0.y);
    u_xlat16_2 = half(u_xlat0.x * u_xlat0.x + (-float(u_xlat16_2)));
    u_xlat16_0 = half4(u_xlat0.yzzx * u_xlat0.xyzz);
    u_xlat16_3.x = dot(Globals.unity_SHBr, u_xlat16_0);
    u_xlat16_3.y = dot(Globals.unity_SHBg, u_xlat16_0);
    u_xlat16_3.z = dot(Globals.unity_SHBb, u_xlat16_0);
    output.TEXCOORD5.xyz = Globals.unity_SHC.xyz * half3(u_xlat16_2) + u_xlat16_3.xyz;
    output.TEXCOORD5.w = half(0.0);
    output.TEXCOORD6.xy = float2(0.0, 0.0);
    return output;
}


-- Fragment shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

 }
 Pass {
  Name "FORWARD_DELTA"
  Tags { "LIGHTMODE"="FORWARDADD" "SHADOWSUPPORT"="true" "RenderType"="Opaque" "PerformanceChecks"="False" }
  ZWrite Off
  Blend [_SrcBlend] One
  //////////////////////////////////
  //                              //
  //      Compiled programs       //
  //                              //
  //////////////////////////////////
//////////////////////////////////////////////////////
Keywords set in this variant: POINT 
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"
Uses vertex data channel "TexCoord0"

Constant Buffer "Globals" (258 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 32
  Matrix4x4 unity_WorldToObject at 96
  Matrix4x4 unity_MatrixVP at 160
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 _MainTex_ST at 224
  Vector4 _DetailAlbedoMap_ST at 240
  ScalarHalf _UVSec at 256
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    float4 _DetailAlbedoMap_ST;
    half _UVSec;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    half3 NORMAL0 [[ attribute(1) ]] ;
    float2 TEXCOORD0 [[ attribute(2) ]] ;
    float2 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float2 TEXCOORD6 [[ user(TEXCOORD6) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool u_xlatb0;
    float4 u_xlat1;
    float u_xlat6;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0] * input.POSITION0.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2] * input.POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    output.mtl_Position = Globals.hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlatb0 = Globals._UVSec==half(0.0);
    u_xlat0.xy = (bool(u_xlatb0)) ? input.TEXCOORD0.xy : input.TEXCOORD1.xy;
    output.TEXCOORD0.zw = u_xlat0.xy * Globals._DetailAlbedoMap_ST.xy + Globals._DetailAlbedoMap_ST.zw;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy * Globals._MainTex_ST.xy + Globals._MainTex_ST.zw;
    u_xlat0.xyz = input.POSITION0.yyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * input.POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * input.POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * input.POSITION0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-Globals._WorldSpaceCameraPos.xyzx.xyz);
    output.TEXCOORD1.xyz = half3(u_xlat1.xyz);
    u_xlat1.xyw = (-u_xlat0.xyz) * Globals._WorldSpaceLightPos0.www + Globals._WorldSpaceLightPos0.xyz;
    output.TEXCOORD5.xyz = u_xlat0.xyz;
    output.TEXCOORD2.w = half(u_xlat1.x);
    output.TEXCOORD2.xyz = half3(0.0, 0.0, 0.0);
    output.TEXCOORD3.w = half(u_xlat1.y);
    output.TEXCOORD3.xyz = half3(0.0, 0.0, 0.0);
    u_xlat0.x = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = rsqrt(u_xlat6);
    u_xlat1.xyz = float3(u_xlat6) * u_xlat0.xyz;
    output.TEXCOORD4 = half4(u_xlat1);
    output.TEXCOORD6.xy = float2(0.0, 0.0);
    return output;
}


-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0 sampler slot 1
Set 2D Texture "_LightTexture0" to slot 1 sampler slot 2
Set 2D Texture "unity_NHxRoughness" to slot 2 sampler slot 0

Constant Buffer "Globals" (96 bytes) on slot 0 {
  Matrix4x4 unity_WorldToLight at 32
  VectorHalf4 _LightColor0 at 0
  VectorHalf4 _Color at 8
  ScalarHalf _Metallic at 16
  ScalarHalf _Glossiness at 18
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    half4 _LightColor0;
    half4 _Color;
    half _Metallic;
    half _Glossiness;
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(0) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    sampler samplerunity_NHxRoughness [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_LightTexture0 [[ sampler (2) ]],
    texture2d<half, access::sample > _MainTex [[ texture (0) ]] ,
    texture2d<half, access::sample > _LightTexture0 [[ texture (1) ]] ,
    texture2d<half, access::sample > unity_NHxRoughness [[ texture (2) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half4 u_xlat16_0;
    half3 u_xlat16_1;
    half3 u_xlat16_2;
    float3 u_xlat3;
    half u_xlat16_3;
    half u_xlat16_4;
    half3 u_xlat16_7;
    half u_xlat16_12;
    u_xlat16_0.x = dot(input.TEXCOORD1.xyz, input.TEXCOORD1.xyz);
    u_xlat16_0.x = rsqrt(u_xlat16_0.x);
    u_xlat16_0.xyz = u_xlat16_0.xxx * input.TEXCOORD1.xyz;
    u_xlat16_12 = dot(input.TEXCOORD4.xyz, input.TEXCOORD4.xyz);
    u_xlat16_12 = rsqrt(u_xlat16_12);
    u_xlat16_1.xyz = half3(u_xlat16_12) * input.TEXCOORD4.xyz;
    u_xlat16_12 = dot((-u_xlat16_0.xyz), u_xlat16_1.xyz);
    u_xlat16_12 = u_xlat16_12 + u_xlat16_12;
    u_xlat16_0.xyz = u_xlat16_1.xyz * (-half3(u_xlat16_12)) + (-u_xlat16_0.xyz);
    u_xlat16_2.x = input.TEXCOORD2.w;
    u_xlat16_2.y = input.TEXCOORD3.w;
    u_xlat16_2.z = input.TEXCOORD4.w;
    u_xlat16_12 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
    u_xlat16_12 = rsqrt(u_xlat16_12);
    u_xlat16_2.xyz = half3(u_xlat16_12) * u_xlat16_2.xyz;
    u_xlat16_0.x = dot(u_xlat16_0.xyz, u_xlat16_2.xyz);
    u_xlat16_4 = dot(u_xlat16_1.xyz, u_xlat16_2.xyz);
    u_xlat16_4 = clamp(u_xlat16_4, 0.0h, 1.0h);
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_1.x = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_1.y = (-Globals._Glossiness) + half(1.0);
    u_xlat16_3 = unity_NHxRoughness.sample(samplerunity_NHxRoughness, float2(u_xlat16_1.xy)).w;
    u_xlat16_3 = u_xlat16_3 * half(16.0);
    u_xlat16_7.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_0.xzw = Globals._Color.xyz * u_xlat16_7.xyz + half3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat16_7.xyz = u_xlat16_7.xyz * Globals._Color.xyz;
    u_xlat16_0.xzw = half3(Globals._Metallic) * u_xlat16_0.xzw + half3(0.220916301, 0.220916301, 0.220916301);
    u_xlat16_0.xzw = u_xlat16_0.xzw * half3(u_xlat16_3);
    u_xlat16_1.x = (-Globals._Metallic) * half(0.779083729) + half(0.779083729);
    u_xlat16_0.xzw = u_xlat16_7.xyz * u_xlat16_1.xxx + u_xlat16_0.xzw;
    u_xlat3.xyz = input.TEXCOORD5.yyy * Globals.hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat3.xyz = Globals.hlslcc_mtx4x4unity_WorldToLight[0].xyz * input.TEXCOORD5.xxx + u_xlat3.xyz;
    u_xlat3.xyz = Globals.hlslcc_mtx4x4unity_WorldToLight[2].xyz * input.TEXCOORD5.zzz + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + Globals.hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat3.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat16_3 = _LightTexture0.sample(sampler_LightTexture0, u_xlat3.xx).w;
    u_xlat16_1.xyz = half3(u_xlat16_3) * Globals._LightColor0.xyz;
    u_xlat16_1.xyz = half3(u_xlat16_4) * u_xlat16_1.xyz;
    output.SV_Target0.xyz = u_xlat16_0.xzw * u_xlat16_1.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}


-- Hardware tier variant: Tier 2
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"
Uses vertex data channel "TexCoord0"

Constant Buffer "Globals" (258 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 32
  Matrix4x4 unity_WorldToObject at 96
  Matrix4x4 unity_MatrixVP at 160
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 _MainTex_ST at 224
  Vector4 _DetailAlbedoMap_ST at 240
  ScalarHalf _UVSec at 256
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    float4 _DetailAlbedoMap_ST;
    half _UVSec;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    half3 NORMAL0 [[ attribute(1) ]] ;
    float2 TEXCOORD0 [[ attribute(2) ]] ;
    float2 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float2 TEXCOORD6 [[ user(TEXCOORD6) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool u_xlatb0;
    float4 u_xlat1;
    float u_xlat6;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0] * input.POSITION0.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2] * input.POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    output.mtl_Position = Globals.hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlatb0 = Globals._UVSec==half(0.0);
    u_xlat0.xy = (bool(u_xlatb0)) ? input.TEXCOORD0.xy : input.TEXCOORD1.xy;
    output.TEXCOORD0.zw = u_xlat0.xy * Globals._DetailAlbedoMap_ST.xy + Globals._DetailAlbedoMap_ST.zw;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy * Globals._MainTex_ST.xy + Globals._MainTex_ST.zw;
    u_xlat0.xyz = input.POSITION0.yyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * input.POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * input.POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * input.POSITION0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-Globals._WorldSpaceCameraPos.xyzx.xyz);
    output.TEXCOORD1.xyz = half3(u_xlat1.xyz);
    u_xlat1.xyw = (-u_xlat0.xyz) * Globals._WorldSpaceLightPos0.www + Globals._WorldSpaceLightPos0.xyz;
    output.TEXCOORD5.xyz = u_xlat0.xyz;
    output.TEXCOORD2.w = half(u_xlat1.x);
    output.TEXCOORD2.xyz = half3(0.0, 0.0, 0.0);
    output.TEXCOORD3.w = half(u_xlat1.y);
    output.TEXCOORD3.xyz = half3(0.0, 0.0, 0.0);
    u_xlat0.x = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = rsqrt(u_xlat6);
    u_xlat1.xyz = float3(u_xlat6) * u_xlat0.xyz;
    output.TEXCOORD4 = half4(u_xlat1);
    output.TEXCOORD6.xy = float2(0.0, 0.0);
    return output;
}


-- Hardware tier variant: Tier 2
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0
Set 2D Texture "_LightTexture0" to slot 1

Constant Buffer "Globals" (96 bytes) on slot 0 {
  Matrix4x4 unity_WorldToLight at 32
  VectorHalf4 _LightColor0 at 0
  VectorHalf4 _Color at 8
  ScalarHalf _Metallic at 16
  ScalarHalf _Glossiness at 18
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    half4 _LightColor0;
    half4 _Color;
    half _Metallic;
    half _Glossiness;
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(0) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_LightTexture0 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture (0) ]] ,
    texture2d<half, access::sample > _LightTexture0 [[ texture (1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half4 u_xlat16_0;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    half u_xlat16_6;
    half u_xlat16_8;
    half u_xlat16_13;
    u_xlat16_0.x = dot(input.TEXCOORD1.xyz, input.TEXCOORD1.xyz);
    u_xlat16_0.x = rsqrt(u_xlat16_0.x);
    u_xlat16_1.x = input.TEXCOORD2.w;
    u_xlat16_1.y = input.TEXCOORD3.w;
    u_xlat16_1.z = input.TEXCOORD4.w;
    u_xlat16_4.x = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
    u_xlat16_4.x = rsqrt(u_xlat16_4.x);
    u_xlat16_4.xyz = u_xlat16_4.xxx * u_xlat16_1.xyz;
    u_xlat16_1.xyz = (-input.TEXCOORD1.xyz) * u_xlat16_0.xxx + u_xlat16_4.xyz;
    u_xlat16_0.x = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
    u_xlat16_2.x = max(u_xlat16_0.x, half(0.00100000005));
    u_xlat16_0.x = rsqrt(u_xlat16_2.x);
    u_xlat16_1.xyz = u_xlat16_0.xxx * u_xlat16_1.xyz;
    u_xlat16_0.x = dot(u_xlat16_4.xyz, u_xlat16_1.xyz);
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0h, 1.0h);
    u_xlat16_2.x = max(u_xlat16_0.x, half(0.319999993));
    u_xlat16_0.x = (-Globals._Glossiness) + half(1.0);
    u_xlat16_6 = u_xlat16_0.x * u_xlat16_0.x + half(1.5);
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_2.x = u_xlat16_6 * u_xlat16_2.x;
    u_xlat16_13 = dot(input.TEXCOORD4.xyz, input.TEXCOORD4.xyz);
    u_xlat16_13 = rsqrt(u_xlat16_13);
    u_xlat16_3.xyz = half3(u_xlat16_13) * input.TEXCOORD4.xyz;
    u_xlat16_1.x = dot(u_xlat16_3.xyz, u_xlat16_1.xyz);
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0h, 1.0h);
    u_xlat16_4.x = dot(u_xlat16_3.xyz, u_xlat16_4.xyz);
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0h, 1.0h);
    u_xlat16_8 = u_xlat16_1.x * u_xlat16_1.x;
    u_xlat16_6 = u_xlat16_0.x * u_xlat16_0.x + half(-1.0);
    u_xlat16_6 = u_xlat16_8 * u_xlat16_6 + half(1.00001001);
    u_xlat16_2.x = u_xlat16_6 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_0.x / u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_2.x + half(-9.99999975e-05);
    u_xlat16_0.x = max(u_xlat16_2.x, half(0.0));
    u_xlat16_0.x = min(u_xlat16_0.x, half(100.0));
    u_xlat16_2.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = Globals._Color.xyz * u_xlat16_2.xyz + half3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat16_2.xyz = u_xlat16_2.xyz * Globals._Color.xyz;
    u_xlat16_1.xyz = half3(Globals._Metallic) * u_xlat16_1.xyz + half3(0.220916301, 0.220916301, 0.220916301);
    u_xlat16_0.xzw = u_xlat16_0.xxx * u_xlat16_1.xyz;
    u_xlat16_1.x = (-Globals._Metallic) * half(0.779083729) + half(0.779083729);
    u_xlat16_0.xzw = u_xlat16_2.xyz * u_xlat16_1.xxx + u_xlat16_0.xzw;
    u_xlat2.xyz = input.TEXCOORD5.yyy * Globals.hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat2.xyz = Globals.hlslcc_mtx4x4unity_WorldToLight[0].xyz * input.TEXCOORD5.xxx + u_xlat2.xyz;
    u_xlat2.xyz = Globals.hlslcc_mtx4x4unity_WorldToLight[2].xyz * input.TEXCOORD5.zzz + u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + Globals.hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat16_2.x = _LightTexture0.sample(sampler_LightTexture0, u_xlat2.xx).w;
    u_xlat16_1.xyz = u_xlat16_2.xxx * Globals._LightColor0.xyz;
    u_xlat16_0.xzw = u_xlat16_0.xzw * u_xlat16_1.xyz;
    output.SV_Target0.xyz = u_xlat16_4.xxx * u_xlat16_0.xzw;
    output.SV_Target0.w = half(1.0);
    return output;
}


-- Hardware tier variant: Tier 3
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"
Uses vertex data channel "TexCoord0"

Constant Buffer "Globals" (258 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 32
  Matrix4x4 unity_WorldToObject at 96
  Matrix4x4 unity_MatrixVP at 160
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 _MainTex_ST at 224
  Vector4 _DetailAlbedoMap_ST at 240
  ScalarHalf _UVSec at 256
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    float4 _DetailAlbedoMap_ST;
    half _UVSec;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    half3 NORMAL0 [[ attribute(1) ]] ;
    float2 TEXCOORD0 [[ attribute(2) ]] ;
    float2 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float2 TEXCOORD6 [[ user(TEXCOORD6) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool u_xlatb0;
    float4 u_xlat1;
    float u_xlat6;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0] * input.POSITION0.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2] * input.POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    output.mtl_Position = Globals.hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlatb0 = Globals._UVSec==half(0.0);
    u_xlat0.xy = (bool(u_xlatb0)) ? input.TEXCOORD0.xy : input.TEXCOORD1.xy;
    output.TEXCOORD0.zw = u_xlat0.xy * Globals._DetailAlbedoMap_ST.xy + Globals._DetailAlbedoMap_ST.zw;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy * Globals._MainTex_ST.xy + Globals._MainTex_ST.zw;
    u_xlat0.xyz = input.POSITION0.yyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * input.POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * input.POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * input.POSITION0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-Globals._WorldSpaceCameraPos.xyzx.xyz);
    output.TEXCOORD1.xyz = half3(u_xlat1.xyz);
    u_xlat1.xyw = (-u_xlat0.xyz) * Globals._WorldSpaceLightPos0.www + Globals._WorldSpaceLightPos0.xyz;
    output.TEXCOORD5.xyz = u_xlat0.xyz;
    output.TEXCOORD2.w = half(u_xlat1.x);
    output.TEXCOORD2.xyz = half3(0.0, 0.0, 0.0);
    output.TEXCOORD3.w = half(u_xlat1.y);
    output.TEXCOORD3.xyz = half3(0.0, 0.0, 0.0);
    u_xlat0.x = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = rsqrt(u_xlat6);
    u_xlat1.xyz = float3(u_xlat6) * u_xlat0.xyz;
    output.TEXCOORD4 = half4(u_xlat1);
    output.TEXCOORD6.xy = float2(0.0, 0.0);
    return output;
}


-- Hardware tier variant: Tier 3
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0
Set 2D Texture "_LightTexture0" to slot 1

Constant Buffer "Globals" (96 bytes) on slot 0 {
  Matrix4x4 unity_WorldToLight at 32
  VectorHalf4 _LightColor0 at 0
  VectorHalf4 _Color at 8
  ScalarHalf _Metallic at 16
  ScalarHalf _Glossiness at 18
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    half4 _LightColor0;
    half4 _Color;
    half _Metallic;
    half _Glossiness;
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(0) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_LightTexture0 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture (0) ]] ,
    texture2d<half, access::sample > _LightTexture0 [[ texture (1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half4 u_xlat16_0;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    half u_xlat16_6;
    half u_xlat16_8;
    half u_xlat16_13;
    u_xlat16_0.x = dot(input.TEXCOORD1.xyz, input.TEXCOORD1.xyz);
    u_xlat16_0.x = rsqrt(u_xlat16_0.x);
    u_xlat16_1.x = input.TEXCOORD2.w;
    u_xlat16_1.y = input.TEXCOORD3.w;
    u_xlat16_1.z = input.TEXCOORD4.w;
    u_xlat16_4.x = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
    u_xlat16_4.x = rsqrt(u_xlat16_4.x);
    u_xlat16_4.xyz = u_xlat16_4.xxx * u_xlat16_1.xyz;
    u_xlat16_1.xyz = (-input.TEXCOORD1.xyz) * u_xlat16_0.xxx + u_xlat16_4.xyz;
    u_xlat16_0.x = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
    u_xlat16_2.x = max(u_xlat16_0.x, half(0.00100000005));
    u_xlat16_0.x = rsqrt(u_xlat16_2.x);
    u_xlat16_1.xyz = u_xlat16_0.xxx * u_xlat16_1.xyz;
    u_xlat16_0.x = dot(u_xlat16_4.xyz, u_xlat16_1.xyz);
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0h, 1.0h);
    u_xlat16_2.x = max(u_xlat16_0.x, half(0.319999993));
    u_xlat16_0.x = (-Globals._Glossiness) + half(1.0);
    u_xlat16_6 = u_xlat16_0.x * u_xlat16_0.x + half(1.5);
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_2.x = u_xlat16_6 * u_xlat16_2.x;
    u_xlat16_13 = dot(input.TEXCOORD4.xyz, input.TEXCOORD4.xyz);
    u_xlat16_13 = rsqrt(u_xlat16_13);
    u_xlat16_3.xyz = half3(u_xlat16_13) * input.TEXCOORD4.xyz;
    u_xlat16_1.x = dot(u_xlat16_3.xyz, u_xlat16_1.xyz);
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0h, 1.0h);
    u_xlat16_4.x = dot(u_xlat16_3.xyz, u_xlat16_4.xyz);
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0h, 1.0h);
    u_xlat16_8 = u_xlat16_1.x * u_xlat16_1.x;
    u_xlat16_6 = u_xlat16_0.x * u_xlat16_0.x + half(-1.0);
    u_xlat16_6 = u_xlat16_8 * u_xlat16_6 + half(1.00001001);
    u_xlat16_2.x = u_xlat16_6 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_0.x / u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_2.x + half(-9.99999975e-05);
    u_xlat16_0.x = max(u_xlat16_2.x, half(0.0));
    u_xlat16_0.x = min(u_xlat16_0.x, half(100.0));
    u_xlat16_2.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = Globals._Color.xyz * u_xlat16_2.xyz + half3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat16_2.xyz = u_xlat16_2.xyz * Globals._Color.xyz;
    u_xlat16_1.xyz = half3(Globals._Metallic) * u_xlat16_1.xyz + half3(0.220916301, 0.220916301, 0.220916301);
    u_xlat16_0.xzw = u_xlat16_0.xxx * u_xlat16_1.xyz;
    u_xlat16_1.x = (-Globals._Metallic) * half(0.779083729) + half(0.779083729);
    u_xlat16_0.xzw = u_xlat16_2.xyz * u_xlat16_1.xxx + u_xlat16_0.xzw;
    u_xlat2.xyz = input.TEXCOORD5.yyy * Globals.hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat2.xyz = Globals.hlslcc_mtx4x4unity_WorldToLight[0].xyz * input.TEXCOORD5.xxx + u_xlat2.xyz;
    u_xlat2.xyz = Globals.hlslcc_mtx4x4unity_WorldToLight[2].xyz * input.TEXCOORD5.zzz + u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + Globals.hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat16_2.x = _LightTexture0.sample(sampler_LightTexture0, u_xlat2.xx).w;
    u_xlat16_1.xyz = u_xlat16_2.xxx * Globals._LightColor0.xyz;
    u_xlat16_0.xzw = u_xlat16_0.xzw * u_xlat16_1.xyz;
    output.SV_Target0.xyz = u_xlat16_4.xxx * u_xlat16_0.xzw;
    output.SV_Target0.w = half(1.0);
    return output;
}


-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"
Uses vertex data channel "TexCoord0"

Constant Buffer "Globals" (258 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 32
  Matrix4x4 unity_WorldToObject at 96
  Matrix4x4 unity_MatrixVP at 160
  Vector3 _WorldSpaceCameraPos at 0
  VectorHalf4 _WorldSpaceLightPos0 at 16
  Vector4 _MainTex_ST at 224
  Vector4 _DetailAlbedoMap_ST at 240
  ScalarHalf _UVSec at 256
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    half4 _WorldSpaceLightPos0;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    float4 _DetailAlbedoMap_ST;
    half _UVSec;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    half3 NORMAL0 [[ attribute(1) ]] ;
    float2 TEXCOORD0 [[ attribute(2) ]] ;
    float2 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float2 TEXCOORD6 [[ user(TEXCOORD6) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool u_xlatb0;
    float4 u_xlat1;
    float u_xlat6;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0] * input.POSITION0.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2] * input.POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    output.mtl_Position = Globals.hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlatb0 = Globals._UVSec==half(0.0);
    u_xlat0.xy = (bool(u_xlatb0)) ? input.TEXCOORD0.xy : input.TEXCOORD1.xy;
    output.TEXCOORD0.zw = u_xlat0.xy * Globals._DetailAlbedoMap_ST.xy + Globals._DetailAlbedoMap_ST.zw;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy * Globals._MainTex_ST.xy + Globals._MainTex_ST.zw;
    u_xlat0.xyz = input.POSITION0.yyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * input.POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * input.POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * input.POSITION0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-Globals._WorldSpaceCameraPos.xyzx.xyz);
    output.TEXCOORD1.xyz = half3(u_xlat1.xyz);
    u_xlat1.xyw = (-u_xlat0.xyz) * float3(Globals._WorldSpaceLightPos0.www) + float3(Globals._WorldSpaceLightPos0.xyz);
    output.TEXCOORD5.xyz = u_xlat0.xyz;
    output.TEXCOORD2.w = half(u_xlat1.x);
    output.TEXCOORD2.xyz = half3(0.0, 0.0, 0.0);
    output.TEXCOORD3.w = half(u_xlat1.y);
    output.TEXCOORD3.xyz = half3(0.0, 0.0, 0.0);
    u_xlat0.x = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = rsqrt(u_xlat6);
    u_xlat1.xyz = float3(u_xlat6) * u_xlat0.xyz;
    output.TEXCOORD4 = half4(u_xlat1);
    output.TEXCOORD6.xy = float2(0.0, 0.0);
    return output;
}


-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0 sampler slot 1
Set 2D Texture "unity_NHxRoughness" to slot 1 sampler slot 0

Constant Buffer "Globals" (20 bytes) on slot 0 {
  VectorHalf4 _LightColor0 at 0
  VectorHalf4 _Color at 8
  ScalarHalf _Metallic at 16
  ScalarHalf _Glossiness at 18
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    half4 _LightColor0;
    half4 _Color;
    half _Metallic;
    half _Glossiness;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(0) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    sampler samplerunity_NHxRoughness [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture (0) ]] ,
    texture2d<half, access::sample > unity_NHxRoughness [[ texture (1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    half3 u_xlat16_2;
    half u_xlat16_3;
    half3 u_xlat16_4;
    half3 u_xlat16_7;
    half u_xlat16_12;
    u_xlat16_0.x = dot(input.TEXCOORD1.xyz, input.TEXCOORD1.xyz);
    u_xlat16_0.x = rsqrt(u_xlat16_0.x);
    u_xlat16_0.xyz = u_xlat16_0.xxx * input.TEXCOORD1.xyz;
    u_xlat16_12 = dot(input.TEXCOORD4.xyz, input.TEXCOORD4.xyz);
    u_xlat16_12 = rsqrt(u_xlat16_12);
    u_xlat16_1.xyz = half3(u_xlat16_12) * input.TEXCOORD4.xyz;
    u_xlat16_12 = dot((-u_xlat16_0.xyz), u_xlat16_1.xyz);
    u_xlat16_12 = u_xlat16_12 + u_xlat16_12;
    u_xlat16_0.xyz = u_xlat16_1.xyz * (-half3(u_xlat16_12)) + (-u_xlat16_0.xyz);
    u_xlat16_2.x = input.TEXCOORD2.w;
    u_xlat16_2.y = input.TEXCOORD3.w;
    u_xlat16_2.z = input.TEXCOORD4.w;
    u_xlat16_0.x = dot(u_xlat16_0.xyz, u_xlat16_2.xyz);
    u_xlat16_4.x = dot(u_xlat16_1.xyz, u_xlat16_2.xyz);
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0h, 1.0h);
    u_xlat16_4.xyz = u_xlat16_4.xxx * Globals._LightColor0.xyz;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_1.x = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_1.y = (-Globals._Glossiness) + half(1.0);
    u_xlat16_3 = unity_NHxRoughness.sample(samplerunity_NHxRoughness, float2(u_xlat16_1.xy)).w;
    u_xlat16_3 = u_xlat16_3 * half(16.0);
    u_xlat16_7.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = Globals._Color.xyz * u_xlat16_7.xyz + half3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat16_7.xyz = u_xlat16_7.xyz * Globals._Color.xyz;
    u_xlat16_1.xyz = half3(Globals._Metallic) * u_xlat16_1.xyz + half3(0.220916301, 0.220916301, 0.220916301);
    u_xlat16_1.xyz = u_xlat16_1.xyz * half3(u_xlat16_3);
    u_xlat16_0.x = (-Globals._Metallic) * half(0.779083729) + half(0.779083729);
    u_xlat16_1.xyz = u_xlat16_7.xyz * u_xlat16_0.xxx + u_xlat16_1.xyz;
    output.SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_1.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}


-- Hardware tier variant: Tier 2
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"
Uses vertex data channel "TexCoord0"

Constant Buffer "Globals" (258 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 32
  Matrix4x4 unity_WorldToObject at 96
  Matrix4x4 unity_MatrixVP at 160
  Vector3 _WorldSpaceCameraPos at 0
  VectorHalf4 _WorldSpaceLightPos0 at 16
  Vector4 _MainTex_ST at 224
  Vector4 _DetailAlbedoMap_ST at 240
  ScalarHalf _UVSec at 256
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    half4 _WorldSpaceLightPos0;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    float4 _DetailAlbedoMap_ST;
    half _UVSec;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    half3 NORMAL0 [[ attribute(1) ]] ;
    float2 TEXCOORD0 [[ attribute(2) ]] ;
    float2 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float2 TEXCOORD6 [[ user(TEXCOORD6) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool u_xlatb0;
    float4 u_xlat1;
    float u_xlat6;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0] * input.POSITION0.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2] * input.POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    output.mtl_Position = Globals.hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlatb0 = Globals._UVSec==half(0.0);
    u_xlat0.xy = (bool(u_xlatb0)) ? input.TEXCOORD0.xy : input.TEXCOORD1.xy;
    output.TEXCOORD0.zw = u_xlat0.xy * Globals._DetailAlbedoMap_ST.xy + Globals._DetailAlbedoMap_ST.zw;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy * Globals._MainTex_ST.xy + Globals._MainTex_ST.zw;
    u_xlat0.xyz = input.POSITION0.yyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * input.POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * input.POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * input.POSITION0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-Globals._WorldSpaceCameraPos.xyzx.xyz);
    output.TEXCOORD1.xyz = half3(u_xlat1.xyz);
    u_xlat1.xyw = (-u_xlat0.xyz) * float3(Globals._WorldSpaceLightPos0.www) + float3(Globals._WorldSpaceLightPos0.xyz);
    output.TEXCOORD5.xyz = u_xlat0.xyz;
    output.TEXCOORD2.w = half(u_xlat1.x);
    output.TEXCOORD2.xyz = half3(0.0, 0.0, 0.0);
    output.TEXCOORD3.w = half(u_xlat1.y);
    output.TEXCOORD3.xyz = half3(0.0, 0.0, 0.0);
    u_xlat0.x = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = rsqrt(u_xlat6);
    u_xlat1.xyz = float3(u_xlat6) * u_xlat0.xyz;
    output.TEXCOORD4 = half4(u_xlat1);
    output.TEXCOORD6.xy = float2(0.0, 0.0);
    return output;
}


-- Hardware tier variant: Tier 2
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0

Constant Buffer "Globals" (20 bytes) on slot 0 {
  VectorHalf4 _LightColor0 at 0
  VectorHalf4 _Color at 8
  ScalarHalf _Metallic at 16
  ScalarHalf _Glossiness at 18
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    half4 _LightColor0;
    half4 _Color;
    half _Metallic;
    half _Glossiness;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(0) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture (0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half4 u_xlat16_0;
    half3 u_xlat16_1;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    half u_xlat16_4;
    half u_xlat16_6;
    half u_xlat16_12;
    half u_xlat16_13;
    u_xlat16_0.x = dot(input.TEXCOORD1.xyz, input.TEXCOORD1.xyz);
    u_xlat16_0.x = rsqrt(u_xlat16_0.x);
    u_xlat16_1.x = input.TEXCOORD2.w;
    u_xlat16_1.y = input.TEXCOORD3.w;
    u_xlat16_1.z = input.TEXCOORD4.w;
    u_xlat16_0.xyz = (-input.TEXCOORD1.xyz) * u_xlat16_0.xxx + u_xlat16_1.xyz;
    u_xlat16_12 = dot(u_xlat16_0.xyz, u_xlat16_0.xyz);
    u_xlat16_2.x = max(u_xlat16_12, half(0.00100000005));
    u_xlat16_12 = rsqrt(u_xlat16_2.x);
    u_xlat16_0.xyz = half3(u_xlat16_12) * u_xlat16_0.xyz;
    u_xlat16_12 = dot(u_xlat16_1.xyz, u_xlat16_0.xyz);
    u_xlat16_12 = clamp(u_xlat16_12, 0.0h, 1.0h);
    u_xlat16_2.x = max(u_xlat16_12, half(0.319999993));
    u_xlat16_12 = (-Globals._Glossiness) + half(1.0);
    u_xlat16_6 = u_xlat16_12 * u_xlat16_12 + half(1.5);
    u_xlat16_12 = u_xlat16_12 * u_xlat16_12;
    u_xlat16_2.x = u_xlat16_6 * u_xlat16_2.x;
    u_xlat16_13 = dot(input.TEXCOORD4.xyz, input.TEXCOORD4.xyz);
    u_xlat16_13 = rsqrt(u_xlat16_13);
    u_xlat16_3.xyz = half3(u_xlat16_13) * input.TEXCOORD4.xyz;
    u_xlat16_0.x = dot(u_xlat16_3.xyz, u_xlat16_0.xyz);
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0h, 1.0h);
    u_xlat16_4 = dot(u_xlat16_3.xyz, u_xlat16_1.xyz);
    u_xlat16_4 = clamp(u_xlat16_4, 0.0h, 1.0h);
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_6 = u_xlat16_12 * u_xlat16_12 + half(-1.0);
    u_xlat16_6 = u_xlat16_0.x * u_xlat16_6 + half(1.00001001);
    u_xlat16_2.x = u_xlat16_6 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_12 / u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_2.x + half(-9.99999975e-05);
    u_xlat16_0.x = max(u_xlat16_2.x, half(0.0));
    u_xlat16_0.x = min(u_xlat16_0.x, half(100.0));
    u_xlat16_2.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = Globals._Color.xyz * u_xlat16_2.xyz + half3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat16_2.xyz = u_xlat16_2.xyz * Globals._Color.xyz;
    u_xlat16_1.xyz = half3(Globals._Metallic) * u_xlat16_1.xyz + half3(0.220916301, 0.220916301, 0.220916301);
    u_xlat16_0.xzw = u_xlat16_0.xxx * u_xlat16_1.xyz;
    u_xlat16_1.x = (-Globals._Metallic) * half(0.779083729) + half(0.779083729);
    u_xlat16_0.xzw = u_xlat16_2.xyz * u_xlat16_1.xxx + u_xlat16_0.xzw;
    u_xlat16_0.xzw = u_xlat16_0.xzw * Globals._LightColor0.xyz;
    output.SV_Target0.xyz = half3(u_xlat16_4) * u_xlat16_0.xzw;
    output.SV_Target0.w = half(1.0);
    return output;
}


-- Hardware tier variant: Tier 3
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"
Uses vertex data channel "TexCoord0"

Constant Buffer "Globals" (258 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 32
  Matrix4x4 unity_WorldToObject at 96
  Matrix4x4 unity_MatrixVP at 160
  Vector3 _WorldSpaceCameraPos at 0
  VectorHalf4 _WorldSpaceLightPos0 at 16
  Vector4 _MainTex_ST at 224
  Vector4 _DetailAlbedoMap_ST at 240
  ScalarHalf _UVSec at 256
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    half4 _WorldSpaceLightPos0;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    float4 _DetailAlbedoMap_ST;
    half _UVSec;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    half3 NORMAL0 [[ attribute(1) ]] ;
    float2 TEXCOORD0 [[ attribute(2) ]] ;
    float2 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float2 TEXCOORD6 [[ user(TEXCOORD6) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool u_xlatb0;
    float4 u_xlat1;
    float u_xlat6;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0] * input.POSITION0.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2] * input.POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    output.mtl_Position = Globals.hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlatb0 = Globals._UVSec==half(0.0);
    u_xlat0.xy = (bool(u_xlatb0)) ? input.TEXCOORD0.xy : input.TEXCOORD1.xy;
    output.TEXCOORD0.zw = u_xlat0.xy * Globals._DetailAlbedoMap_ST.xy + Globals._DetailAlbedoMap_ST.zw;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy * Globals._MainTex_ST.xy + Globals._MainTex_ST.zw;
    u_xlat0.xyz = input.POSITION0.yyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * input.POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * input.POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * input.POSITION0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-Globals._WorldSpaceCameraPos.xyzx.xyz);
    output.TEXCOORD1.xyz = half3(u_xlat1.xyz);
    u_xlat1.xyw = (-u_xlat0.xyz) * float3(Globals._WorldSpaceLightPos0.www) + float3(Globals._WorldSpaceLightPos0.xyz);
    output.TEXCOORD5.xyz = u_xlat0.xyz;
    output.TEXCOORD2.w = half(u_xlat1.x);
    output.TEXCOORD2.xyz = half3(0.0, 0.0, 0.0);
    output.TEXCOORD3.w = half(u_xlat1.y);
    output.TEXCOORD3.xyz = half3(0.0, 0.0, 0.0);
    u_xlat0.x = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = rsqrt(u_xlat6);
    u_xlat1.xyz = float3(u_xlat6) * u_xlat0.xyz;
    output.TEXCOORD4 = half4(u_xlat1);
    output.TEXCOORD6.xy = float2(0.0, 0.0);
    return output;
}


-- Hardware tier variant: Tier 3
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0

Constant Buffer "Globals" (20 bytes) on slot 0 {
  VectorHalf4 _LightColor0 at 0
  VectorHalf4 _Color at 8
  ScalarHalf _Metallic at 16
  ScalarHalf _Glossiness at 18
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    half4 _LightColor0;
    half4 _Color;
    half _Metallic;
    half _Glossiness;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(0) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<half, access::sample > _MainTex [[ texture (0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half4 u_xlat16_0;
    half3 u_xlat16_1;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    half u_xlat16_4;
    half u_xlat16_6;
    half u_xlat16_12;
    half u_xlat16_13;
    u_xlat16_0.x = dot(input.TEXCOORD1.xyz, input.TEXCOORD1.xyz);
    u_xlat16_0.x = rsqrt(u_xlat16_0.x);
    u_xlat16_1.x = input.TEXCOORD2.w;
    u_xlat16_1.y = input.TEXCOORD3.w;
    u_xlat16_1.z = input.TEXCOORD4.w;
    u_xlat16_0.xyz = (-input.TEXCOORD1.xyz) * u_xlat16_0.xxx + u_xlat16_1.xyz;
    u_xlat16_12 = dot(u_xlat16_0.xyz, u_xlat16_0.xyz);
    u_xlat16_2.x = max(u_xlat16_12, half(0.00100000005));
    u_xlat16_12 = rsqrt(u_xlat16_2.x);
    u_xlat16_0.xyz = half3(u_xlat16_12) * u_xlat16_0.xyz;
    u_xlat16_12 = dot(u_xlat16_1.xyz, u_xlat16_0.xyz);
    u_xlat16_12 = clamp(u_xlat16_12, 0.0h, 1.0h);
    u_xlat16_2.x = max(u_xlat16_12, half(0.319999993));
    u_xlat16_12 = (-Globals._Glossiness) + half(1.0);
    u_xlat16_6 = u_xlat16_12 * u_xlat16_12 + half(1.5);
    u_xlat16_12 = u_xlat16_12 * u_xlat16_12;
    u_xlat16_2.x = u_xlat16_6 * u_xlat16_2.x;
    u_xlat16_13 = dot(input.TEXCOORD4.xyz, input.TEXCOORD4.xyz);
    u_xlat16_13 = rsqrt(u_xlat16_13);
    u_xlat16_3.xyz = half3(u_xlat16_13) * input.TEXCOORD4.xyz;
    u_xlat16_0.x = dot(u_xlat16_3.xyz, u_xlat16_0.xyz);
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0h, 1.0h);
    u_xlat16_4 = dot(u_xlat16_3.xyz, u_xlat16_1.xyz);
    u_xlat16_4 = clamp(u_xlat16_4, 0.0h, 1.0h);
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_6 = u_xlat16_12 * u_xlat16_12 + half(-1.0);
    u_xlat16_6 = u_xlat16_0.x * u_xlat16_6 + half(1.00001001);
    u_xlat16_2.x = u_xlat16_6 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_12 / u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_2.x + half(-9.99999975e-05);
    u_xlat16_0.x = max(u_xlat16_2.x, half(0.0));
    u_xlat16_0.x = min(u_xlat16_0.x, half(100.0));
    u_xlat16_2.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = Globals._Color.xyz * u_xlat16_2.xyz + half3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat16_2.xyz = u_xlat16_2.xyz * Globals._Color.xyz;
    u_xlat16_1.xyz = half3(Globals._Metallic) * u_xlat16_1.xyz + half3(0.220916301, 0.220916301, 0.220916301);
    u_xlat16_0.xzw = u_xlat16_0.xxx * u_xlat16_1.xyz;
    u_xlat16_1.x = (-Globals._Metallic) * half(0.779083729) + half(0.779083729);
    u_xlat16_0.xzw = u_xlat16_2.xyz * u_xlat16_1.xxx + u_xlat16_0.xzw;
    u_xlat16_0.xzw = u_xlat16_0.xzw * Globals._LightColor0.xyz;
    output.SV_Target0.xyz = half3(u_xlat16_4) * u_xlat16_0.xzw;
    output.SV_Target0.w = half(1.0);
    return output;
}


-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"
Uses vertex data channel "TexCoord0"

Constant Buffer "Globals" (258 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 32
  Matrix4x4 unity_WorldToObject at 96
  Matrix4x4 unity_MatrixVP at 160
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 _MainTex_ST at 224
  Vector4 _DetailAlbedoMap_ST at 240
  ScalarHalf _UVSec at 256
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    float4 _DetailAlbedoMap_ST;
    half _UVSec;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    half3 NORMAL0 [[ attribute(1) ]] ;
    float2 TEXCOORD0 [[ attribute(2) ]] ;
    float2 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float2 TEXCOORD6 [[ user(TEXCOORD6) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool u_xlatb0;
    float4 u_xlat1;
    float u_xlat6;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0] * input.POSITION0.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2] * input.POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    output.mtl_Position = Globals.hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlatb0 = Globals._UVSec==half(0.0);
    u_xlat0.xy = (bool(u_xlatb0)) ? input.TEXCOORD0.xy : input.TEXCOORD1.xy;
    output.TEXCOORD0.zw = u_xlat0.xy * Globals._DetailAlbedoMap_ST.xy + Globals._DetailAlbedoMap_ST.zw;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy * Globals._MainTex_ST.xy + Globals._MainTex_ST.zw;
    u_xlat0.xyz = input.POSITION0.yyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * input.POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * input.POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * input.POSITION0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-Globals._WorldSpaceCameraPos.xyzx.xyz);
    output.TEXCOORD1.xyz = half3(u_xlat1.xyz);
    u_xlat1.xyw = (-u_xlat0.xyz) * Globals._WorldSpaceLightPos0.www + Globals._WorldSpaceLightPos0.xyz;
    output.TEXCOORD5.xyz = u_xlat0.xyz;
    output.TEXCOORD2.w = half(u_xlat1.x);
    output.TEXCOORD2.xyz = half3(0.0, 0.0, 0.0);
    output.TEXCOORD3.w = half(u_xlat1.y);
    output.TEXCOORD3.xyz = half3(0.0, 0.0, 0.0);
    u_xlat0.x = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = rsqrt(u_xlat6);
    u_xlat1.xyz = float3(u_xlat6) * u_xlat0.xyz;
    output.TEXCOORD4 = half4(u_xlat1);
    output.TEXCOORD6.xy = float2(0.0, 0.0);
    return output;
}


-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0 sampler slot 1
Set 2D Texture "_LightTexture0" to slot 1 sampler slot 2
Set 2D Texture "_LightTextureB0" to slot 2 sampler slot 3
Set 2D Texture "unity_NHxRoughness" to slot 3 sampler slot 0

Constant Buffer "Globals" (96 bytes) on slot 0 {
  Matrix4x4 unity_WorldToLight at 32
  VectorHalf4 _LightColor0 at 0
  VectorHalf4 _Color at 8
  ScalarHalf _Metallic at 16
  ScalarHalf _Glossiness at 18
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    half4 _LightColor0;
    half4 _Color;
    half _Metallic;
    half _Glossiness;
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(0) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    sampler samplerunity_NHxRoughness [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_LightTexture0 [[ sampler (2) ]],
    sampler sampler_LightTextureB0 [[ sampler (3) ]],
    texture2d<half, access::sample > _MainTex [[ texture (0) ]] ,
    texture2d<half, access::sample > _LightTexture0 [[ texture (1) ]] ,
    texture2d<half, access::sample > _LightTextureB0 [[ texture (2) ]] ,
    texture2d<half, access::sample > unity_NHxRoughness [[ texture (3) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half4 u_xlat16_0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    half3 u_xlat16_2;
    float2 u_xlat3;
    half u_xlat16_3;
    half u_xlat16_4;
    half3 u_xlat16_7;
    bool u_xlatb7;
    float u_xlat11;
    half u_xlat16_11;
    half u_xlat16_12;
    u_xlat16_0.x = dot(input.TEXCOORD1.xyz, input.TEXCOORD1.xyz);
    u_xlat16_0.x = rsqrt(u_xlat16_0.x);
    u_xlat16_0.xyz = u_xlat16_0.xxx * input.TEXCOORD1.xyz;
    u_xlat16_12 = dot(input.TEXCOORD4.xyz, input.TEXCOORD4.xyz);
    u_xlat16_12 = rsqrt(u_xlat16_12);
    u_xlat16_1.xyz = half3(u_xlat16_12) * input.TEXCOORD4.xyz;
    u_xlat16_12 = dot((-u_xlat16_0.xyz), u_xlat16_1.xyz);
    u_xlat16_12 = u_xlat16_12 + u_xlat16_12;
    u_xlat16_0.xyz = u_xlat16_1.xyz * (-half3(u_xlat16_12)) + (-u_xlat16_0.xyz);
    u_xlat16_2.x = input.TEXCOORD2.w;
    u_xlat16_2.y = input.TEXCOORD3.w;
    u_xlat16_2.z = input.TEXCOORD4.w;
    u_xlat16_12 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
    u_xlat16_12 = rsqrt(u_xlat16_12);
    u_xlat16_2.xyz = half3(u_xlat16_12) * u_xlat16_2.xyz;
    u_xlat16_0.x = dot(u_xlat16_0.xyz, u_xlat16_2.xyz);
    u_xlat16_4 = dot(u_xlat16_1.xyz, u_xlat16_2.xyz);
    u_xlat16_4 = clamp(u_xlat16_4, 0.0h, 1.0h);
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_1.x = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_1.y = (-Globals._Glossiness) + half(1.0);
    u_xlat16_3 = unity_NHxRoughness.sample(samplerunity_NHxRoughness, float2(u_xlat16_1.xy)).w;
    u_xlat16_3 = u_xlat16_3 * half(16.0);
    u_xlat16_7.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_0.xzw = Globals._Color.xyz * u_xlat16_7.xyz + half3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat16_7.xyz = u_xlat16_7.xyz * Globals._Color.xyz;
    u_xlat16_0.xzw = half3(Globals._Metallic) * u_xlat16_0.xzw + half3(0.220916301, 0.220916301, 0.220916301);
    u_xlat16_0.xzw = u_xlat16_0.xzw * half3(u_xlat16_3);
    u_xlat16_1.x = (-Globals._Metallic) * half(0.779083729) + half(0.779083729);
    u_xlat16_0.xzw = u_xlat16_7.xyz * u_xlat16_1.xxx + u_xlat16_0.xzw;
    u_xlat1 = input.TEXCOORD5.yyyy * Globals.hlslcc_mtx4x4unity_WorldToLight[1];
    u_xlat1 = Globals.hlslcc_mtx4x4unity_WorldToLight[0] * input.TEXCOORD5.xxxx + u_xlat1;
    u_xlat1 = Globals.hlslcc_mtx4x4unity_WorldToLight[2] * input.TEXCOORD5.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + Globals.hlslcc_mtx4x4unity_WorldToLight[3];
    u_xlat3.xy = u_xlat1.xy / u_xlat1.ww;
    u_xlat3.xy = u_xlat3.xy + float2(0.5, 0.5);
    u_xlat16_3 = _LightTexture0.sample(sampler_LightTexture0, u_xlat3.xy).w;
    u_xlatb7 = 0.0<u_xlat1.z;
    u_xlat11 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat16_11 = _LightTextureB0.sample(sampler_LightTextureB0, float2(u_xlat11)).w;
    u_xlat16_2.x = (u_xlatb7) ? half(1.0) : half(0.0);
    u_xlat16_2.x = u_xlat16_3 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_11 * u_xlat16_2.x;
    u_xlat16_2.xyz = u_xlat16_2.xxx * Globals._LightColor0.xyz;
    u_xlat16_2.xyz = half3(u_xlat16_4) * u_xlat16_2.xyz;
    output.SV_Target0.xyz = u_xlat16_0.xzw * u_xlat16_2.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}


-- Hardware tier variant: Tier 2
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"
Uses vertex data channel "TexCoord0"

Constant Buffer "Globals" (258 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 32
  Matrix4x4 unity_WorldToObject at 96
  Matrix4x4 unity_MatrixVP at 160
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 _MainTex_ST at 224
  Vector4 _DetailAlbedoMap_ST at 240
  ScalarHalf _UVSec at 256
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    float4 _DetailAlbedoMap_ST;
    half _UVSec;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    half3 NORMAL0 [[ attribute(1) ]] ;
    float2 TEXCOORD0 [[ attribute(2) ]] ;
    float2 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float2 TEXCOORD6 [[ user(TEXCOORD6) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool u_xlatb0;
    float4 u_xlat1;
    float u_xlat6;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0] * input.POSITION0.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2] * input.POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    output.mtl_Position = Globals.hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlatb0 = Globals._UVSec==half(0.0);
    u_xlat0.xy = (bool(u_xlatb0)) ? input.TEXCOORD0.xy : input.TEXCOORD1.xy;
    output.TEXCOORD0.zw = u_xlat0.xy * Globals._DetailAlbedoMap_ST.xy + Globals._DetailAlbedoMap_ST.zw;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy * Globals._MainTex_ST.xy + Globals._MainTex_ST.zw;
    u_xlat0.xyz = input.POSITION0.yyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * input.POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * input.POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * input.POSITION0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-Globals._WorldSpaceCameraPos.xyzx.xyz);
    output.TEXCOORD1.xyz = half3(u_xlat1.xyz);
    u_xlat1.xyw = (-u_xlat0.xyz) * Globals._WorldSpaceLightPos0.www + Globals._WorldSpaceLightPos0.xyz;
    output.TEXCOORD5.xyz = u_xlat0.xyz;
    output.TEXCOORD2.w = half(u_xlat1.x);
    output.TEXCOORD2.xyz = half3(0.0, 0.0, 0.0);
    output.TEXCOORD3.w = half(u_xlat1.y);
    output.TEXCOORD3.xyz = half3(0.0, 0.0, 0.0);
    u_xlat0.x = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = rsqrt(u_xlat6);
    u_xlat1.xyz = float3(u_xlat6) * u_xlat0.xyz;
    output.TEXCOORD4 = half4(u_xlat1);
    output.TEXCOORD6.xy = float2(0.0, 0.0);
    return output;
}


-- Hardware tier variant: Tier 2
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0
Set 2D Texture "_LightTexture0" to slot 1
Set 2D Texture "_LightTextureB0" to slot 2

Constant Buffer "Globals" (96 bytes) on slot 0 {
  Matrix4x4 unity_WorldToLight at 32
  VectorHalf4 _LightColor0 at 0
  VectorHalf4 _Color at 8
  ScalarHalf _Metallic at 16
  ScalarHalf _Glossiness at 18
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    half4 _LightColor0;
    half4 _Color;
    half _Metallic;
    half _Glossiness;
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(0) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_LightTexture0 [[ sampler (1) ]],
    sampler sampler_LightTextureB0 [[ sampler (2) ]],
    texture2d<half, access::sample > _MainTex [[ texture (0) ]] ,
    texture2d<half, access::sample > _LightTexture0 [[ texture (1) ]] ,
    texture2d<half, access::sample > _LightTextureB0 [[ texture (2) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    half3 u_xlat16_0;
    float2 u_xlat1;
    bool u_xlatb1;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    half u_xlat16_6;
    half3 u_xlat16_9;
    half u_xlat16_18;
    half u_xlat16_20;
    half u_xlat16_21;
    u_xlat0 = input.TEXCOORD5.yyyy * Globals.hlslcc_mtx4x4unity_WorldToLight[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_WorldToLight[0] * input.TEXCOORD5.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_WorldToLight[2] * input.TEXCOORD5.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + Globals.hlslcc_mtx4x4unity_WorldToLight[3];
    u_xlat1.xy = u_xlat0.xy / u_xlat0.ww;
    u_xlat1.xy = u_xlat1.xy + float2(0.5, 0.5);
    u_xlat16_18 = _LightTexture0.sample(sampler_LightTexture0, u_xlat1.xy).w;
    u_xlatb1 = 0.0<u_xlat0.z;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat16_0.x = _LightTextureB0.sample(sampler_LightTextureB0, u_xlat0.xx).w;
    u_xlat16_2.x = (u_xlatb1) ? half(1.0) : half(0.0);
    u_xlat16_2.x = u_xlat16_18 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_0.x * u_xlat16_2.x;
    u_xlat16_2.xyz = u_xlat16_2.xxx * Globals._LightColor0.xyz;
    u_xlat16_20 = dot(input.TEXCOORD1.xyz, input.TEXCOORD1.xyz);
    u_xlat16_20 = rsqrt(u_xlat16_20);
    u_xlat16_3.x = input.TEXCOORD2.w;
    u_xlat16_3.y = input.TEXCOORD3.w;
    u_xlat16_3.z = input.TEXCOORD4.w;
    u_xlat16_21 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
    u_xlat16_21 = rsqrt(u_xlat16_21);
    u_xlat16_3.xyz = half3(u_xlat16_21) * u_xlat16_3.xyz;
    u_xlat16_4.xyz = (-input.TEXCOORD1.xyz) * half3(u_xlat16_20) + u_xlat16_3.xyz;
    u_xlat16_20 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
    u_xlat16_0.x = max(u_xlat16_20, half(0.00100000005));
    u_xlat16_20 = rsqrt(u_xlat16_0.x);
    u_xlat16_4.xyz = half3(u_xlat16_20) * u_xlat16_4.xyz;
    u_xlat16_20 = dot(u_xlat16_3.xyz, u_xlat16_4.xyz);
    u_xlat16_20 = clamp(u_xlat16_20, 0.0h, 1.0h);
    u_xlat16_0.x = max(u_xlat16_20, half(0.319999993));
    u_xlat16_20 = (-Globals._Glossiness) + half(1.0);
    u_xlat16_6 = u_xlat16_20 * u_xlat16_20 + half(1.5);
    u_xlat16_20 = u_xlat16_20 * u_xlat16_20;
    u_xlat16_0.x = u_xlat16_6 * u_xlat16_0.x;
    u_xlat16_21 = dot(input.TEXCOORD4.xyz, input.TEXCOORD4.xyz);
    u_xlat16_21 = rsqrt(u_xlat16_21);
    u_xlat16_5.xyz = half3(u_xlat16_21) * input.TEXCOORD4.xyz;
    u_xlat16_21 = dot(u_xlat16_5.xyz, u_xlat16_4.xyz);
    u_xlat16_21 = clamp(u_xlat16_21, 0.0h, 1.0h);
    u_xlat16_3.x = dot(u_xlat16_5.xyz, u_xlat16_3.xyz);
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0h, 1.0h);
    u_xlat16_9.x = u_xlat16_21 * u_xlat16_21;
    u_xlat16_6 = u_xlat16_20 * u_xlat16_20 + half(-1.0);
    u_xlat16_6 = u_xlat16_9.x * u_xlat16_6 + half(1.00001001);
    u_xlat16_0.x = u_xlat16_6 * u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_20 / u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x + half(-9.99999975e-05);
    u_xlat16_20 = max(u_xlat16_0.x, half(0.0));
    u_xlat16_20 = min(u_xlat16_20, half(100.0));
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_9.xyz = Globals._Color.xyz * u_xlat16_0.xyz + half3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat16_0.xyz = u_xlat16_0.xyz * Globals._Color.xyz;
    u_xlat16_9.xyz = half3(Globals._Metallic) * u_xlat16_9.xyz + half3(0.220916301, 0.220916301, 0.220916301);
    u_xlat16_9.xyz = half3(u_xlat16_20) * u_xlat16_9.xyz;
    u_xlat16_20 = (-Globals._Metallic) * half(0.779083729) + half(0.779083729);
    u_xlat16_9.xyz = u_xlat16_0.xyz * half3(u_xlat16_20) + u_xlat16_9.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_9.xyz;
    output.SV_Target0.xyz = u_xlat16_3.xxx * u_xlat16_2.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}


-- Hardware tier variant: Tier 3
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"
Uses vertex data channel "TexCoord0"

Constant Buffer "Globals" (258 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 32
  Matrix4x4 unity_WorldToObject at 96
  Matrix4x4 unity_MatrixVP at 160
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 _MainTex_ST at 224
  Vector4 _DetailAlbedoMap_ST at 240
  ScalarHalf _UVSec at 256
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    float4 _DetailAlbedoMap_ST;
    half _UVSec;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    half3 NORMAL0 [[ attribute(1) ]] ;
    float2 TEXCOORD0 [[ attribute(2) ]] ;
    float2 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float2 TEXCOORD6 [[ user(TEXCOORD6) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool u_xlatb0;
    float4 u_xlat1;
    float u_xlat6;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0] * input.POSITION0.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2] * input.POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    output.mtl_Position = Globals.hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlatb0 = Globals._UVSec==half(0.0);
    u_xlat0.xy = (bool(u_xlatb0)) ? input.TEXCOORD0.xy : input.TEXCOORD1.xy;
    output.TEXCOORD0.zw = u_xlat0.xy * Globals._DetailAlbedoMap_ST.xy + Globals._DetailAlbedoMap_ST.zw;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy * Globals._MainTex_ST.xy + Globals._MainTex_ST.zw;
    u_xlat0.xyz = input.POSITION0.yyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * input.POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * input.POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * input.POSITION0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-Globals._WorldSpaceCameraPos.xyzx.xyz);
    output.TEXCOORD1.xyz = half3(u_xlat1.xyz);
    u_xlat1.xyw = (-u_xlat0.xyz) * Globals._WorldSpaceLightPos0.www + Globals._WorldSpaceLightPos0.xyz;
    output.TEXCOORD5.xyz = u_xlat0.xyz;
    output.TEXCOORD2.w = half(u_xlat1.x);
    output.TEXCOORD2.xyz = half3(0.0, 0.0, 0.0);
    output.TEXCOORD3.w = half(u_xlat1.y);
    output.TEXCOORD3.xyz = half3(0.0, 0.0, 0.0);
    u_xlat0.x = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = rsqrt(u_xlat6);
    u_xlat1.xyz = float3(u_xlat6) * u_xlat0.xyz;
    output.TEXCOORD4 = half4(u_xlat1);
    output.TEXCOORD6.xy = float2(0.0, 0.0);
    return output;
}


-- Hardware tier variant: Tier 3
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0
Set 2D Texture "_LightTexture0" to slot 1
Set 2D Texture "_LightTextureB0" to slot 2

Constant Buffer "Globals" (96 bytes) on slot 0 {
  Matrix4x4 unity_WorldToLight at 32
  VectorHalf4 _LightColor0 at 0
  VectorHalf4 _Color at 8
  ScalarHalf _Metallic at 16
  ScalarHalf _Glossiness at 18
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    half4 _LightColor0;
    half4 _Color;
    half _Metallic;
    half _Glossiness;
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(0) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_LightTexture0 [[ sampler (1) ]],
    sampler sampler_LightTextureB0 [[ sampler (2) ]],
    texture2d<half, access::sample > _MainTex [[ texture (0) ]] ,
    texture2d<half, access::sample > _LightTexture0 [[ texture (1) ]] ,
    texture2d<half, access::sample > _LightTextureB0 [[ texture (2) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    half3 u_xlat16_0;
    float2 u_xlat1;
    bool u_xlatb1;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    half u_xlat16_6;
    half3 u_xlat16_9;
    half u_xlat16_18;
    half u_xlat16_20;
    half u_xlat16_21;
    u_xlat0 = input.TEXCOORD5.yyyy * Globals.hlslcc_mtx4x4unity_WorldToLight[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_WorldToLight[0] * input.TEXCOORD5.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_WorldToLight[2] * input.TEXCOORD5.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + Globals.hlslcc_mtx4x4unity_WorldToLight[3];
    u_xlat1.xy = u_xlat0.xy / u_xlat0.ww;
    u_xlat1.xy = u_xlat1.xy + float2(0.5, 0.5);
    u_xlat16_18 = _LightTexture0.sample(sampler_LightTexture0, u_xlat1.xy).w;
    u_xlatb1 = 0.0<u_xlat0.z;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat16_0.x = _LightTextureB0.sample(sampler_LightTextureB0, u_xlat0.xx).w;
    u_xlat16_2.x = (u_xlatb1) ? half(1.0) : half(0.0);
    u_xlat16_2.x = u_xlat16_18 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_0.x * u_xlat16_2.x;
    u_xlat16_2.xyz = u_xlat16_2.xxx * Globals._LightColor0.xyz;
    u_xlat16_20 = dot(input.TEXCOORD1.xyz, input.TEXCOORD1.xyz);
    u_xlat16_20 = rsqrt(u_xlat16_20);
    u_xlat16_3.x = input.TEXCOORD2.w;
    u_xlat16_3.y = input.TEXCOORD3.w;
    u_xlat16_3.z = input.TEXCOORD4.w;
    u_xlat16_21 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
    u_xlat16_21 = rsqrt(u_xlat16_21);
    u_xlat16_3.xyz = half3(u_xlat16_21) * u_xlat16_3.xyz;
    u_xlat16_4.xyz = (-input.TEXCOORD1.xyz) * half3(u_xlat16_20) + u_xlat16_3.xyz;
    u_xlat16_20 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
    u_xlat16_0.x = max(u_xlat16_20, half(0.00100000005));
    u_xlat16_20 = rsqrt(u_xlat16_0.x);
    u_xlat16_4.xyz = half3(u_xlat16_20) * u_xlat16_4.xyz;
    u_xlat16_20 = dot(u_xlat16_3.xyz, u_xlat16_4.xyz);
    u_xlat16_20 = clamp(u_xlat16_20, 0.0h, 1.0h);
    u_xlat16_0.x = max(u_xlat16_20, half(0.319999993));
    u_xlat16_20 = (-Globals._Glossiness) + half(1.0);
    u_xlat16_6 = u_xlat16_20 * u_xlat16_20 + half(1.5);
    u_xlat16_20 = u_xlat16_20 * u_xlat16_20;
    u_xlat16_0.x = u_xlat16_6 * u_xlat16_0.x;
    u_xlat16_21 = dot(input.TEXCOORD4.xyz, input.TEXCOORD4.xyz);
    u_xlat16_21 = rsqrt(u_xlat16_21);
    u_xlat16_5.xyz = half3(u_xlat16_21) * input.TEXCOORD4.xyz;
    u_xlat16_21 = dot(u_xlat16_5.xyz, u_xlat16_4.xyz);
    u_xlat16_21 = clamp(u_xlat16_21, 0.0h, 1.0h);
    u_xlat16_3.x = dot(u_xlat16_5.xyz, u_xlat16_3.xyz);
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0h, 1.0h);
    u_xlat16_9.x = u_xlat16_21 * u_xlat16_21;
    u_xlat16_6 = u_xlat16_20 * u_xlat16_20 + half(-1.0);
    u_xlat16_6 = u_xlat16_9.x * u_xlat16_6 + half(1.00001001);
    u_xlat16_0.x = u_xlat16_6 * u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_20 / u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x + half(-9.99999975e-05);
    u_xlat16_20 = max(u_xlat16_0.x, half(0.0));
    u_xlat16_20 = min(u_xlat16_20, half(100.0));
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_9.xyz = Globals._Color.xyz * u_xlat16_0.xyz + half3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat16_0.xyz = u_xlat16_0.xyz * Globals._Color.xyz;
    u_xlat16_9.xyz = half3(Globals._Metallic) * u_xlat16_9.xyz + half3(0.220916301, 0.220916301, 0.220916301);
    u_xlat16_9.xyz = half3(u_xlat16_20) * u_xlat16_9.xyz;
    u_xlat16_20 = (-Globals._Metallic) * half(0.779083729) + half(0.779083729);
    u_xlat16_9.xyz = u_xlat16_0.xyz * half3(u_xlat16_20) + u_xlat16_9.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_9.xyz;
    output.SV_Target0.xyz = u_xlat16_3.xxx * u_xlat16_2.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}


//////////////////////////////////////////////////////
Keywords set in this variant: POINT_COOKIE 
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"
Uses vertex data channel "TexCoord0"

Constant Buffer "Globals" (258 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 32
  Matrix4x4 unity_WorldToObject at 96
  Matrix4x4 unity_MatrixVP at 160
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 _MainTex_ST at 224
  Vector4 _DetailAlbedoMap_ST at 240
  ScalarHalf _UVSec at 256
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    float4 _DetailAlbedoMap_ST;
    half _UVSec;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    half3 NORMAL0 [[ attribute(1) ]] ;
    float2 TEXCOORD0 [[ attribute(2) ]] ;
    float2 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float2 TEXCOORD6 [[ user(TEXCOORD6) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool u_xlatb0;
    float4 u_xlat1;
    float u_xlat6;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0] * input.POSITION0.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2] * input.POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    output.mtl_Position = Globals.hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlatb0 = Globals._UVSec==half(0.0);
    u_xlat0.xy = (bool(u_xlatb0)) ? input.TEXCOORD0.xy : input.TEXCOORD1.xy;
    output.TEXCOORD0.zw = u_xlat0.xy * Globals._DetailAlbedoMap_ST.xy + Globals._DetailAlbedoMap_ST.zw;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy * Globals._MainTex_ST.xy + Globals._MainTex_ST.zw;
    u_xlat0.xyz = input.POSITION0.yyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * input.POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * input.POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * input.POSITION0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-Globals._WorldSpaceCameraPos.xyzx.xyz);
    output.TEXCOORD1.xyz = half3(u_xlat1.xyz);
    u_xlat1.xyw = (-u_xlat0.xyz) * Globals._WorldSpaceLightPos0.www + Globals._WorldSpaceLightPos0.xyz;
    output.TEXCOORD5.xyz = u_xlat0.xyz;
    output.TEXCOORD2.w = half(u_xlat1.x);
    output.TEXCOORD2.xyz = half3(0.0, 0.0, 0.0);
    output.TEXCOORD3.w = half(u_xlat1.y);
    output.TEXCOORD3.xyz = half3(0.0, 0.0, 0.0);
    u_xlat0.x = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = rsqrt(u_xlat6);
    u_xlat1.xyz = float3(u_xlat6) * u_xlat0.xyz;
    output.TEXCOORD4 = half4(u_xlat1);
    output.TEXCOORD6.xy = float2(0.0, 0.0);
    return output;
}


-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0 sampler slot 1
Set 2D Texture "_LightTextureB0" to slot 1 sampler slot 3
Set CUBE Texture "_LightTexture0" to slot 2
Set 2D Texture "unity_NHxRoughness" to slot 3 sampler slot 0

Constant Buffer "Globals" (96 bytes) on slot 0 {
  Matrix4x4 unity_WorldToLight at 32
  VectorHalf4 _LightColor0 at 0
  VectorHalf4 _Color at 8
  ScalarHalf _Metallic at 16
  ScalarHalf _Glossiness at 18
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    half4 _LightColor0;
    half4 _Color;
    half _Metallic;
    half _Glossiness;
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(0) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    sampler samplerunity_NHxRoughness [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_LightTexture0 [[ sampler (2) ]],
    sampler sampler_LightTextureB0 [[ sampler (3) ]],
    texture2d<half, access::sample > _MainTex [[ texture (0) ]] ,
    texture2d<half, access::sample > _LightTextureB0 [[ texture (1) ]] ,
    texturecube<half, access::sample > _LightTexture0 [[ texture (2) ]] ,
    texture2d<half, access::sample > unity_NHxRoughness [[ texture (3) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half4 u_xlat16_0;
    half3 u_xlat16_1;
    half3 u_xlat16_2;
    float3 u_xlat3;
    half u_xlat16_3;
    half u_xlat16_4;
    half3 u_xlat16_7;
    half u_xlat16_12;
    float u_xlat15;
    u_xlat16_0.x = dot(input.TEXCOORD1.xyz, input.TEXCOORD1.xyz);
    u_xlat16_0.x = rsqrt(u_xlat16_0.x);
    u_xlat16_0.xyz = u_xlat16_0.xxx * input.TEXCOORD1.xyz;
    u_xlat16_12 = dot(input.TEXCOORD4.xyz, input.TEXCOORD4.xyz);
    u_xlat16_12 = rsqrt(u_xlat16_12);
    u_xlat16_1.xyz = half3(u_xlat16_12) * input.TEXCOORD4.xyz;
    u_xlat16_12 = dot((-u_xlat16_0.xyz), u_xlat16_1.xyz);
    u_xlat16_12 = u_xlat16_12 + u_xlat16_12;
    u_xlat16_0.xyz = u_xlat16_1.xyz * (-half3(u_xlat16_12)) + (-u_xlat16_0.xyz);
    u_xlat16_2.x = input.TEXCOORD2.w;
    u_xlat16_2.y = input.TEXCOORD3.w;
    u_xlat16_2.z = input.TEXCOORD4.w;
    u_xlat16_12 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
    u_xlat16_12 = rsqrt(u_xlat16_12);
    u_xlat16_2.xyz = half3(u_xlat16_12) * u_xlat16_2.xyz;
    u_xlat16_0.x = dot(u_xlat16_0.xyz, u_xlat16_2.xyz);
    u_xlat16_4 = dot(u_xlat16_1.xyz, u_xlat16_2.xyz);
    u_xlat16_4 = clamp(u_xlat16_4, 0.0h, 1.0h);
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_1.x = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_1.y = (-Globals._Glossiness) + half(1.0);
    u_xlat16_3 = unity_NHxRoughness.sample(samplerunity_NHxRoughness, float2(u_xlat16_1.xy)).w;
    u_xlat16_3 = u_xlat16_3 * half(16.0);
    u_xlat16_7.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_0.xzw = Globals._Color.xyz * u_xlat16_7.xyz + half3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat16_7.xyz = u_xlat16_7.xyz * Globals._Color.xyz;
    u_xlat16_0.xzw = half3(Globals._Metallic) * u_xlat16_0.xzw + half3(0.220916301, 0.220916301, 0.220916301);
    u_xlat16_0.xzw = u_xlat16_0.xzw * half3(u_xlat16_3);
    u_xlat16_1.x = (-Globals._Metallic) * half(0.779083729) + half(0.779083729);
    u_xlat16_0.xzw = u_xlat16_7.xyz * u_xlat16_1.xxx + u_xlat16_0.xzw;
    u_xlat3.xyz = input.TEXCOORD5.yyy * Globals.hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat3.xyz = Globals.hlslcc_mtx4x4unity_WorldToLight[0].xyz * input.TEXCOORD5.xxx + u_xlat3.xyz;
    u_xlat3.xyz = Globals.hlslcc_mtx4x4unity_WorldToLight[2].xyz * input.TEXCOORD5.zzz + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + Globals.hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat15 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat16_3 = _LightTexture0.sample(sampler_LightTexture0, u_xlat3.xyz).w;
    u_xlat16_7.x = _LightTextureB0.sample(sampler_LightTextureB0, float2(u_xlat15)).w;
    u_xlat16_3 = u_xlat16_3 * u_xlat16_7.x;
    u_xlat16_1.xyz = half3(u_xlat16_3) * Globals._LightColor0.xyz;
    u_xlat16_1.xyz = half3(u_xlat16_4) * u_xlat16_1.xyz;
    output.SV_Target0.xyz = u_xlat16_0.xzw * u_xlat16_1.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}


-- Hardware tier variant: Tier 2
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"
Uses vertex data channel "TexCoord0"

Constant Buffer "Globals" (258 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 32
  Matrix4x4 unity_WorldToObject at 96
  Matrix4x4 unity_MatrixVP at 160
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 _MainTex_ST at 224
  Vector4 _DetailAlbedoMap_ST at 240
  ScalarHalf _UVSec at 256
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    float4 _DetailAlbedoMap_ST;
    half _UVSec;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    half3 NORMAL0 [[ attribute(1) ]] ;
    float2 TEXCOORD0 [[ attribute(2) ]] ;
    float2 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float2 TEXCOORD6 [[ user(TEXCOORD6) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool u_xlatb0;
    float4 u_xlat1;
    float u_xlat6;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0] * input.POSITION0.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2] * input.POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    output.mtl_Position = Globals.hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlatb0 = Globals._UVSec==half(0.0);
    u_xlat0.xy = (bool(u_xlatb0)) ? input.TEXCOORD0.xy : input.TEXCOORD1.xy;
    output.TEXCOORD0.zw = u_xlat0.xy * Globals._DetailAlbedoMap_ST.xy + Globals._DetailAlbedoMap_ST.zw;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy * Globals._MainTex_ST.xy + Globals._MainTex_ST.zw;
    u_xlat0.xyz = input.POSITION0.yyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * input.POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * input.POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * input.POSITION0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-Globals._WorldSpaceCameraPos.xyzx.xyz);
    output.TEXCOORD1.xyz = half3(u_xlat1.xyz);
    u_xlat1.xyw = (-u_xlat0.xyz) * Globals._WorldSpaceLightPos0.www + Globals._WorldSpaceLightPos0.xyz;
    output.TEXCOORD5.xyz = u_xlat0.xyz;
    output.TEXCOORD2.w = half(u_xlat1.x);
    output.TEXCOORD2.xyz = half3(0.0, 0.0, 0.0);
    output.TEXCOORD3.w = half(u_xlat1.y);
    output.TEXCOORD3.xyz = half3(0.0, 0.0, 0.0);
    u_xlat0.x = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = rsqrt(u_xlat6);
    u_xlat1.xyz = float3(u_xlat6) * u_xlat0.xyz;
    output.TEXCOORD4 = half4(u_xlat1);
    output.TEXCOORD6.xy = float2(0.0, 0.0);
    return output;
}


-- Hardware tier variant: Tier 2
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0
Set 2D Texture "_LightTextureB0" to slot 1 sampler slot 2
Set CUBE Texture "_LightTexture0" to slot 2 sampler slot 1

Constant Buffer "Globals" (96 bytes) on slot 0 {
  Matrix4x4 unity_WorldToLight at 32
  VectorHalf4 _LightColor0 at 0
  VectorHalf4 _Color at 8
  ScalarHalf _Metallic at 16
  ScalarHalf _Glossiness at 18
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    half4 _LightColor0;
    half4 _Color;
    half _Metallic;
    half _Glossiness;
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(0) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_LightTexture0 [[ sampler (1) ]],
    sampler sampler_LightTextureB0 [[ sampler (2) ]],
    texture2d<half, access::sample > _MainTex [[ texture (0) ]] ,
    texture2d<half, access::sample > _LightTextureB0 [[ texture (1) ]] ,
    texturecube<half, access::sample > _LightTexture0 [[ texture (2) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half4 u_xlat16_0;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    half u_xlat16_6;
    half u_xlat16_8;
    half u_xlat16_13;
    float u_xlat14;
    u_xlat16_0.x = dot(input.TEXCOORD1.xyz, input.TEXCOORD1.xyz);
    u_xlat16_0.x = rsqrt(u_xlat16_0.x);
    u_xlat16_1.x = input.TEXCOORD2.w;
    u_xlat16_1.y = input.TEXCOORD3.w;
    u_xlat16_1.z = input.TEXCOORD4.w;
    u_xlat16_4.x = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
    u_xlat16_4.x = rsqrt(u_xlat16_4.x);
    u_xlat16_4.xyz = u_xlat16_4.xxx * u_xlat16_1.xyz;
    u_xlat16_1.xyz = (-input.TEXCOORD1.xyz) * u_xlat16_0.xxx + u_xlat16_4.xyz;
    u_xlat16_0.x = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
    u_xlat16_2.x = max(u_xlat16_0.x, half(0.00100000005));
    u_xlat16_0.x = rsqrt(u_xlat16_2.x);
    u_xlat16_1.xyz = u_xlat16_0.xxx * u_xlat16_1.xyz;
    u_xlat16_0.x = dot(u_xlat16_4.xyz, u_xlat16_1.xyz);
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0h, 1.0h);
    u_xlat16_2.x = max(u_xlat16_0.x, half(0.319999993));
    u_xlat16_0.x = (-Globals._Glossiness) + half(1.0);
    u_xlat16_6 = u_xlat16_0.x * u_xlat16_0.x + half(1.5);
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_2.x = u_xlat16_6 * u_xlat16_2.x;
    u_xlat16_13 = dot(input.TEXCOORD4.xyz, input.TEXCOORD4.xyz);
    u_xlat16_13 = rsqrt(u_xlat16_13);
    u_xlat16_3.xyz = half3(u_xlat16_13) * input.TEXCOORD4.xyz;
    u_xlat16_1.x = dot(u_xlat16_3.xyz, u_xlat16_1.xyz);
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0h, 1.0h);
    u_xlat16_4.x = dot(u_xlat16_3.xyz, u_xlat16_4.xyz);
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0h, 1.0h);
    u_xlat16_8 = u_xlat16_1.x * u_xlat16_1.x;
    u_xlat16_6 = u_xlat16_0.x * u_xlat16_0.x + half(-1.0);
    u_xlat16_6 = u_xlat16_8 * u_xlat16_6 + half(1.00001001);
    u_xlat16_2.x = u_xlat16_6 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_0.x / u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_2.x + half(-9.99999975e-05);
    u_xlat16_0.x = max(u_xlat16_2.x, half(0.0));
    u_xlat16_0.x = min(u_xlat16_0.x, half(100.0));
    u_xlat16_2.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = Globals._Color.xyz * u_xlat16_2.xyz + half3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat16_2.xyz = u_xlat16_2.xyz * Globals._Color.xyz;
    u_xlat16_1.xyz = half3(Globals._Metallic) * u_xlat16_1.xyz + half3(0.220916301, 0.220916301, 0.220916301);
    u_xlat16_0.xzw = u_xlat16_0.xxx * u_xlat16_1.xyz;
    u_xlat16_1.x = (-Globals._Metallic) * half(0.779083729) + half(0.779083729);
    u_xlat16_0.xzw = u_xlat16_2.xyz * u_xlat16_1.xxx + u_xlat16_0.xzw;
    u_xlat2.xyz = input.TEXCOORD5.yyy * Globals.hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat2.xyz = Globals.hlslcc_mtx4x4unity_WorldToLight[0].xyz * input.TEXCOORD5.xxx + u_xlat2.xyz;
    u_xlat2.xyz = Globals.hlslcc_mtx4x4unity_WorldToLight[2].xyz * input.TEXCOORD5.zzz + u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + Globals.hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat14 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat16_2.x = _LightTexture0.sample(sampler_LightTexture0, u_xlat2.xyz).w;
    u_xlat16_6 = _LightTextureB0.sample(sampler_LightTextureB0, float2(u_xlat14)).w;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_6;
    u_xlat16_1.xyz = u_xlat16_2.xxx * Globals._LightColor0.xyz;
    u_xlat16_0.xzw = u_xlat16_0.xzw * u_xlat16_1.xyz;
    output.SV_Target0.xyz = u_xlat16_4.xxx * u_xlat16_0.xzw;
    output.SV_Target0.w = half(1.0);
    return output;
}


-- Hardware tier variant: Tier 3
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"
Uses vertex data channel "TexCoord0"

Constant Buffer "Globals" (258 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 32
  Matrix4x4 unity_WorldToObject at 96
  Matrix4x4 unity_MatrixVP at 160
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 _MainTex_ST at 224
  Vector4 _DetailAlbedoMap_ST at 240
  ScalarHalf _UVSec at 256
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    float4 _DetailAlbedoMap_ST;
    half _UVSec;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    half3 NORMAL0 [[ attribute(1) ]] ;
    float2 TEXCOORD0 [[ attribute(2) ]] ;
    float2 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float2 TEXCOORD6 [[ user(TEXCOORD6) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool u_xlatb0;
    float4 u_xlat1;
    float u_xlat6;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0] * input.POSITION0.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2] * input.POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    output.mtl_Position = Globals.hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlatb0 = Globals._UVSec==half(0.0);
    u_xlat0.xy = (bool(u_xlatb0)) ? input.TEXCOORD0.xy : input.TEXCOORD1.xy;
    output.TEXCOORD0.zw = u_xlat0.xy * Globals._DetailAlbedoMap_ST.xy + Globals._DetailAlbedoMap_ST.zw;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy * Globals._MainTex_ST.xy + Globals._MainTex_ST.zw;
    u_xlat0.xyz = input.POSITION0.yyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * input.POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * input.POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * input.POSITION0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-Globals._WorldSpaceCameraPos.xyzx.xyz);
    output.TEXCOORD1.xyz = half3(u_xlat1.xyz);
    u_xlat1.xyw = (-u_xlat0.xyz) * Globals._WorldSpaceLightPos0.www + Globals._WorldSpaceLightPos0.xyz;
    output.TEXCOORD5.xyz = u_xlat0.xyz;
    output.TEXCOORD2.w = half(u_xlat1.x);
    output.TEXCOORD2.xyz = half3(0.0, 0.0, 0.0);
    output.TEXCOORD3.w = half(u_xlat1.y);
    output.TEXCOORD3.xyz = half3(0.0, 0.0, 0.0);
    u_xlat0.x = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = rsqrt(u_xlat6);
    u_xlat1.xyz = float3(u_xlat6) * u_xlat0.xyz;
    output.TEXCOORD4 = half4(u_xlat1);
    output.TEXCOORD6.xy = float2(0.0, 0.0);
    return output;
}


-- Hardware tier variant: Tier 3
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0
Set 2D Texture "_LightTextureB0" to slot 1 sampler slot 2
Set CUBE Texture "_LightTexture0" to slot 2 sampler slot 1

Constant Buffer "Globals" (96 bytes) on slot 0 {
  Matrix4x4 unity_WorldToLight at 32
  VectorHalf4 _LightColor0 at 0
  VectorHalf4 _Color at 8
  ScalarHalf _Metallic at 16
  ScalarHalf _Glossiness at 18
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    half4 _LightColor0;
    half4 _Color;
    half _Metallic;
    half _Glossiness;
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(0) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_LightTexture0 [[ sampler (1) ]],
    sampler sampler_LightTextureB0 [[ sampler (2) ]],
    texture2d<half, access::sample > _MainTex [[ texture (0) ]] ,
    texture2d<half, access::sample > _LightTextureB0 [[ texture (1) ]] ,
    texturecube<half, access::sample > _LightTexture0 [[ texture (2) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half4 u_xlat16_0;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    half u_xlat16_6;
    half u_xlat16_8;
    half u_xlat16_13;
    float u_xlat14;
    u_xlat16_0.x = dot(input.TEXCOORD1.xyz, input.TEXCOORD1.xyz);
    u_xlat16_0.x = rsqrt(u_xlat16_0.x);
    u_xlat16_1.x = input.TEXCOORD2.w;
    u_xlat16_1.y = input.TEXCOORD3.w;
    u_xlat16_1.z = input.TEXCOORD4.w;
    u_xlat16_4.x = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
    u_xlat16_4.x = rsqrt(u_xlat16_4.x);
    u_xlat16_4.xyz = u_xlat16_4.xxx * u_xlat16_1.xyz;
    u_xlat16_1.xyz = (-input.TEXCOORD1.xyz) * u_xlat16_0.xxx + u_xlat16_4.xyz;
    u_xlat16_0.x = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
    u_xlat16_2.x = max(u_xlat16_0.x, half(0.00100000005));
    u_xlat16_0.x = rsqrt(u_xlat16_2.x);
    u_xlat16_1.xyz = u_xlat16_0.xxx * u_xlat16_1.xyz;
    u_xlat16_0.x = dot(u_xlat16_4.xyz, u_xlat16_1.xyz);
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0h, 1.0h);
    u_xlat16_2.x = max(u_xlat16_0.x, half(0.319999993));
    u_xlat16_0.x = (-Globals._Glossiness) + half(1.0);
    u_xlat16_6 = u_xlat16_0.x * u_xlat16_0.x + half(1.5);
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_2.x = u_xlat16_6 * u_xlat16_2.x;
    u_xlat16_13 = dot(input.TEXCOORD4.xyz, input.TEXCOORD4.xyz);
    u_xlat16_13 = rsqrt(u_xlat16_13);
    u_xlat16_3.xyz = half3(u_xlat16_13) * input.TEXCOORD4.xyz;
    u_xlat16_1.x = dot(u_xlat16_3.xyz, u_xlat16_1.xyz);
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0h, 1.0h);
    u_xlat16_4.x = dot(u_xlat16_3.xyz, u_xlat16_4.xyz);
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0h, 1.0h);
    u_xlat16_8 = u_xlat16_1.x * u_xlat16_1.x;
    u_xlat16_6 = u_xlat16_0.x * u_xlat16_0.x + half(-1.0);
    u_xlat16_6 = u_xlat16_8 * u_xlat16_6 + half(1.00001001);
    u_xlat16_2.x = u_xlat16_6 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_0.x / u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_2.x + half(-9.99999975e-05);
    u_xlat16_0.x = max(u_xlat16_2.x, half(0.0));
    u_xlat16_0.x = min(u_xlat16_0.x, half(100.0));
    u_xlat16_2.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = Globals._Color.xyz * u_xlat16_2.xyz + half3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat16_2.xyz = u_xlat16_2.xyz * Globals._Color.xyz;
    u_xlat16_1.xyz = half3(Globals._Metallic) * u_xlat16_1.xyz + half3(0.220916301, 0.220916301, 0.220916301);
    u_xlat16_0.xzw = u_xlat16_0.xxx * u_xlat16_1.xyz;
    u_xlat16_1.x = (-Globals._Metallic) * half(0.779083729) + half(0.779083729);
    u_xlat16_0.xzw = u_xlat16_2.xyz * u_xlat16_1.xxx + u_xlat16_0.xzw;
    u_xlat2.xyz = input.TEXCOORD5.yyy * Globals.hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat2.xyz = Globals.hlslcc_mtx4x4unity_WorldToLight[0].xyz * input.TEXCOORD5.xxx + u_xlat2.xyz;
    u_xlat2.xyz = Globals.hlslcc_mtx4x4unity_WorldToLight[2].xyz * input.TEXCOORD5.zzz + u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + Globals.hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat14 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat16_2.x = _LightTexture0.sample(sampler_LightTexture0, u_xlat2.xyz).w;
    u_xlat16_6 = _LightTextureB0.sample(sampler_LightTextureB0, float2(u_xlat14)).w;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_6;
    u_xlat16_1.xyz = u_xlat16_2.xxx * Globals._LightColor0.xyz;
    u_xlat16_0.xzw = u_xlat16_0.xzw * u_xlat16_1.xyz;
    output.SV_Target0.xyz = u_xlat16_4.xxx * u_xlat16_0.xzw;
    output.SV_Target0.w = half(1.0);
    return output;
}


-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"
Uses vertex data channel "TexCoord0"

Constant Buffer "Globals" (258 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 32
  Matrix4x4 unity_WorldToObject at 96
  Matrix4x4 unity_MatrixVP at 160
  Vector3 _WorldSpaceCameraPos at 0
  VectorHalf4 _WorldSpaceLightPos0 at 16
  Vector4 _MainTex_ST at 224
  Vector4 _DetailAlbedoMap_ST at 240
  ScalarHalf _UVSec at 256
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    half4 _WorldSpaceLightPos0;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    float4 _DetailAlbedoMap_ST;
    half _UVSec;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    half3 NORMAL0 [[ attribute(1) ]] ;
    float2 TEXCOORD0 [[ attribute(2) ]] ;
    float2 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float2 TEXCOORD6 [[ user(TEXCOORD6) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool u_xlatb0;
    float4 u_xlat1;
    float u_xlat6;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0] * input.POSITION0.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2] * input.POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    output.mtl_Position = Globals.hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlatb0 = Globals._UVSec==half(0.0);
    u_xlat0.xy = (bool(u_xlatb0)) ? input.TEXCOORD0.xy : input.TEXCOORD1.xy;
    output.TEXCOORD0.zw = u_xlat0.xy * Globals._DetailAlbedoMap_ST.xy + Globals._DetailAlbedoMap_ST.zw;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy * Globals._MainTex_ST.xy + Globals._MainTex_ST.zw;
    u_xlat0.xyz = input.POSITION0.yyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * input.POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * input.POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * input.POSITION0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-Globals._WorldSpaceCameraPos.xyzx.xyz);
    output.TEXCOORD1.xyz = half3(u_xlat1.xyz);
    u_xlat1.xyw = (-u_xlat0.xyz) * float3(Globals._WorldSpaceLightPos0.www) + float3(Globals._WorldSpaceLightPos0.xyz);
    output.TEXCOORD5.xyz = u_xlat0.xyz;
    output.TEXCOORD2.w = half(u_xlat1.x);
    output.TEXCOORD2.xyz = half3(0.0, 0.0, 0.0);
    output.TEXCOORD3.w = half(u_xlat1.y);
    output.TEXCOORD3.xyz = half3(0.0, 0.0, 0.0);
    u_xlat0.x = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = rsqrt(u_xlat6);
    u_xlat1.xyz = float3(u_xlat6) * u_xlat0.xyz;
    output.TEXCOORD4 = half4(u_xlat1);
    output.TEXCOORD6.xy = float2(0.0, 0.0);
    return output;
}


-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0 sampler slot 1
Set 2D Texture "_LightTexture0" to slot 1 sampler slot 2
Set 2D Texture "unity_NHxRoughness" to slot 2 sampler slot 0

Constant Buffer "Globals" (96 bytes) on slot 0 {
  Matrix4x4 unity_WorldToLight at 32
  VectorHalf4 _LightColor0 at 0
  VectorHalf4 _Color at 8
  ScalarHalf _Metallic at 16
  ScalarHalf _Glossiness at 18
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    half4 _LightColor0;
    half4 _Color;
    half _Metallic;
    half _Glossiness;
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(0) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    sampler samplerunity_NHxRoughness [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_LightTexture0 [[ sampler (2) ]],
    texture2d<half, access::sample > _MainTex [[ texture (0) ]] ,
    texture2d<half, access::sample > _LightTexture0 [[ texture (1) ]] ,
    texture2d<half, access::sample > unity_NHxRoughness [[ texture (2) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half4 u_xlat16_0;
    half3 u_xlat16_1;
    half3 u_xlat16_2;
    float2 u_xlat3;
    half u_xlat16_3;
    half u_xlat16_4;
    half3 u_xlat16_7;
    half u_xlat16_12;
    u_xlat16_0.x = dot(input.TEXCOORD1.xyz, input.TEXCOORD1.xyz);
    u_xlat16_0.x = rsqrt(u_xlat16_0.x);
    u_xlat16_0.xyz = u_xlat16_0.xxx * input.TEXCOORD1.xyz;
    u_xlat16_12 = dot(input.TEXCOORD4.xyz, input.TEXCOORD4.xyz);
    u_xlat16_12 = rsqrt(u_xlat16_12);
    u_xlat16_1.xyz = half3(u_xlat16_12) * input.TEXCOORD4.xyz;
    u_xlat16_12 = dot((-u_xlat16_0.xyz), u_xlat16_1.xyz);
    u_xlat16_12 = u_xlat16_12 + u_xlat16_12;
    u_xlat16_0.xyz = u_xlat16_1.xyz * (-half3(u_xlat16_12)) + (-u_xlat16_0.xyz);
    u_xlat16_2.x = input.TEXCOORD2.w;
    u_xlat16_2.y = input.TEXCOORD3.w;
    u_xlat16_2.z = input.TEXCOORD4.w;
    u_xlat16_0.x = dot(u_xlat16_0.xyz, u_xlat16_2.xyz);
    u_xlat16_4 = dot(u_xlat16_1.xyz, u_xlat16_2.xyz);
    u_xlat16_4 = clamp(u_xlat16_4, 0.0h, 1.0h);
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_1.x = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_1.y = (-Globals._Glossiness) + half(1.0);
    u_xlat16_3 = unity_NHxRoughness.sample(samplerunity_NHxRoughness, float2(u_xlat16_1.xy)).w;
    u_xlat16_3 = u_xlat16_3 * half(16.0);
    u_xlat16_7.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_0.xzw = Globals._Color.xyz * u_xlat16_7.xyz + half3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat16_7.xyz = u_xlat16_7.xyz * Globals._Color.xyz;
    u_xlat16_0.xzw = half3(Globals._Metallic) * u_xlat16_0.xzw + half3(0.220916301, 0.220916301, 0.220916301);
    u_xlat16_0.xzw = u_xlat16_0.xzw * half3(u_xlat16_3);
    u_xlat16_1.x = (-Globals._Metallic) * half(0.779083729) + half(0.779083729);
    u_xlat16_0.xzw = u_xlat16_7.xyz * u_xlat16_1.xxx + u_xlat16_0.xzw;
    u_xlat3.xy = input.TEXCOORD5.yy * Globals.hlslcc_mtx4x4unity_WorldToLight[1].xy;
    u_xlat3.xy = Globals.hlslcc_mtx4x4unity_WorldToLight[0].xy * input.TEXCOORD5.xx + u_xlat3.xy;
    u_xlat3.xy = Globals.hlslcc_mtx4x4unity_WorldToLight[2].xy * input.TEXCOORD5.zz + u_xlat3.xy;
    u_xlat3.xy = u_xlat3.xy + Globals.hlslcc_mtx4x4unity_WorldToLight[3].xy;
    u_xlat16_3 = _LightTexture0.sample(sampler_LightTexture0, u_xlat3.xy).w;
    u_xlat16_1.xyz = half3(u_xlat16_3) * Globals._LightColor0.xyz;
    u_xlat16_1.xyz = half3(u_xlat16_4) * u_xlat16_1.xyz;
    output.SV_Target0.xyz = u_xlat16_0.xzw * u_xlat16_1.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}


-- Hardware tier variant: Tier 2
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"
Uses vertex data channel "TexCoord0"

Constant Buffer "Globals" (258 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 32
  Matrix4x4 unity_WorldToObject at 96
  Matrix4x4 unity_MatrixVP at 160
  Vector3 _WorldSpaceCameraPos at 0
  VectorHalf4 _WorldSpaceLightPos0 at 16
  Vector4 _MainTex_ST at 224
  Vector4 _DetailAlbedoMap_ST at 240
  ScalarHalf _UVSec at 256
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    half4 _WorldSpaceLightPos0;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    float4 _DetailAlbedoMap_ST;
    half _UVSec;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    half3 NORMAL0 [[ attribute(1) ]] ;
    float2 TEXCOORD0 [[ attribute(2) ]] ;
    float2 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float2 TEXCOORD6 [[ user(TEXCOORD6) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool u_xlatb0;
    float4 u_xlat1;
    float u_xlat6;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0] * input.POSITION0.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2] * input.POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    output.mtl_Position = Globals.hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlatb0 = Globals._UVSec==half(0.0);
    u_xlat0.xy = (bool(u_xlatb0)) ? input.TEXCOORD0.xy : input.TEXCOORD1.xy;
    output.TEXCOORD0.zw = u_xlat0.xy * Globals._DetailAlbedoMap_ST.xy + Globals._DetailAlbedoMap_ST.zw;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy * Globals._MainTex_ST.xy + Globals._MainTex_ST.zw;
    u_xlat0.xyz = input.POSITION0.yyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * input.POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * input.POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * input.POSITION0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-Globals._WorldSpaceCameraPos.xyzx.xyz);
    output.TEXCOORD1.xyz = half3(u_xlat1.xyz);
    u_xlat1.xyw = (-u_xlat0.xyz) * float3(Globals._WorldSpaceLightPos0.www) + float3(Globals._WorldSpaceLightPos0.xyz);
    output.TEXCOORD5.xyz = u_xlat0.xyz;
    output.TEXCOORD2.w = half(u_xlat1.x);
    output.TEXCOORD2.xyz = half3(0.0, 0.0, 0.0);
    output.TEXCOORD3.w = half(u_xlat1.y);
    output.TEXCOORD3.xyz = half3(0.0, 0.0, 0.0);
    u_xlat0.x = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = rsqrt(u_xlat6);
    u_xlat1.xyz = float3(u_xlat6) * u_xlat0.xyz;
    output.TEXCOORD4 = half4(u_xlat1);
    output.TEXCOORD6.xy = float2(0.0, 0.0);
    return output;
}


-- Hardware tier variant: Tier 2
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0
Set 2D Texture "_LightTexture0" to slot 1

Constant Buffer "Globals" (96 bytes) on slot 0 {
  Matrix4x4 unity_WorldToLight at 32
  VectorHalf4 _LightColor0 at 0
  VectorHalf4 _Color at 8
  ScalarHalf _Metallic at 16
  ScalarHalf _Glossiness at 18
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    half4 _LightColor0;
    half4 _Color;
    half _Metallic;
    half _Glossiness;
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(0) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_LightTexture0 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture (0) ]] ,
    texture2d<half, access::sample > _LightTexture0 [[ texture (1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half4 u_xlat16_0;
    half3 u_xlat16_1;
    float2 u_xlat2;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    half u_xlat16_4;
    half u_xlat16_6;
    half u_xlat16_12;
    half u_xlat16_13;
    u_xlat16_0.x = dot(input.TEXCOORD1.xyz, input.TEXCOORD1.xyz);
    u_xlat16_0.x = rsqrt(u_xlat16_0.x);
    u_xlat16_1.x = input.TEXCOORD2.w;
    u_xlat16_1.y = input.TEXCOORD3.w;
    u_xlat16_1.z = input.TEXCOORD4.w;
    u_xlat16_0.xyz = (-input.TEXCOORD1.xyz) * u_xlat16_0.xxx + u_xlat16_1.xyz;
    u_xlat16_12 = dot(u_xlat16_0.xyz, u_xlat16_0.xyz);
    u_xlat16_2.x = max(u_xlat16_12, half(0.00100000005));
    u_xlat16_12 = rsqrt(u_xlat16_2.x);
    u_xlat16_0.xyz = half3(u_xlat16_12) * u_xlat16_0.xyz;
    u_xlat16_12 = dot(u_xlat16_1.xyz, u_xlat16_0.xyz);
    u_xlat16_12 = clamp(u_xlat16_12, 0.0h, 1.0h);
    u_xlat16_2.x = max(u_xlat16_12, half(0.319999993));
    u_xlat16_12 = (-Globals._Glossiness) + half(1.0);
    u_xlat16_6 = u_xlat16_12 * u_xlat16_12 + half(1.5);
    u_xlat16_12 = u_xlat16_12 * u_xlat16_12;
    u_xlat16_2.x = u_xlat16_6 * u_xlat16_2.x;
    u_xlat16_13 = dot(input.TEXCOORD4.xyz, input.TEXCOORD4.xyz);
    u_xlat16_13 = rsqrt(u_xlat16_13);
    u_xlat16_3.xyz = half3(u_xlat16_13) * input.TEXCOORD4.xyz;
    u_xlat16_0.x = dot(u_xlat16_3.xyz, u_xlat16_0.xyz);
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0h, 1.0h);
    u_xlat16_4 = dot(u_xlat16_3.xyz, u_xlat16_1.xyz);
    u_xlat16_4 = clamp(u_xlat16_4, 0.0h, 1.0h);
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_6 = u_xlat16_12 * u_xlat16_12 + half(-1.0);
    u_xlat16_6 = u_xlat16_0.x * u_xlat16_6 + half(1.00001001);
    u_xlat16_2.x = u_xlat16_6 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_12 / u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_2.x + half(-9.99999975e-05);
    u_xlat16_0.x = max(u_xlat16_2.x, half(0.0));
    u_xlat16_0.x = min(u_xlat16_0.x, half(100.0));
    u_xlat16_2.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = Globals._Color.xyz * u_xlat16_2.xyz + half3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat16_2.xyz = u_xlat16_2.xyz * Globals._Color.xyz;
    u_xlat16_1.xyz = half3(Globals._Metallic) * u_xlat16_1.xyz + half3(0.220916301, 0.220916301, 0.220916301);
    u_xlat16_0.xzw = u_xlat16_0.xxx * u_xlat16_1.xyz;
    u_xlat16_1.x = (-Globals._Metallic) * half(0.779083729) + half(0.779083729);
    u_xlat16_0.xzw = u_xlat16_2.xyz * u_xlat16_1.xxx + u_xlat16_0.xzw;
    u_xlat2.xy = input.TEXCOORD5.yy * Globals.hlslcc_mtx4x4unity_WorldToLight[1].xy;
    u_xlat2.xy = Globals.hlslcc_mtx4x4unity_WorldToLight[0].xy * input.TEXCOORD5.xx + u_xlat2.xy;
    u_xlat2.xy = Globals.hlslcc_mtx4x4unity_WorldToLight[2].xy * input.TEXCOORD5.zz + u_xlat2.xy;
    u_xlat2.xy = u_xlat2.xy + Globals.hlslcc_mtx4x4unity_WorldToLight[3].xy;
    u_xlat16_2.x = _LightTexture0.sample(sampler_LightTexture0, u_xlat2.xy).w;
    u_xlat16_1.xyz = u_xlat16_2.xxx * Globals._LightColor0.xyz;
    u_xlat16_0.xzw = u_xlat16_0.xzw * u_xlat16_1.xyz;
    output.SV_Target0.xyz = half3(u_xlat16_4) * u_xlat16_0.xzw;
    output.SV_Target0.w = half(1.0);
    return output;
}


-- Hardware tier variant: Tier 3
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"
Uses vertex data channel "TexCoord0"

Constant Buffer "Globals" (258 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 32
  Matrix4x4 unity_WorldToObject at 96
  Matrix4x4 unity_MatrixVP at 160
  Vector3 _WorldSpaceCameraPos at 0
  VectorHalf4 _WorldSpaceLightPos0 at 16
  Vector4 _MainTex_ST at 224
  Vector4 _DetailAlbedoMap_ST at 240
  ScalarHalf _UVSec at 256
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    half4 _WorldSpaceLightPos0;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    float4 _DetailAlbedoMap_ST;
    half _UVSec;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    half3 NORMAL0 [[ attribute(1) ]] ;
    float2 TEXCOORD0 [[ attribute(2) ]] ;
    float2 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float2 TEXCOORD6 [[ user(TEXCOORD6) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool u_xlatb0;
    float4 u_xlat1;
    float u_xlat6;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0] * input.POSITION0.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2] * input.POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    output.mtl_Position = Globals.hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlatb0 = Globals._UVSec==half(0.0);
    u_xlat0.xy = (bool(u_xlatb0)) ? input.TEXCOORD0.xy : input.TEXCOORD1.xy;
    output.TEXCOORD0.zw = u_xlat0.xy * Globals._DetailAlbedoMap_ST.xy + Globals._DetailAlbedoMap_ST.zw;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy * Globals._MainTex_ST.xy + Globals._MainTex_ST.zw;
    u_xlat0.xyz = input.POSITION0.yyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * input.POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * input.POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * input.POSITION0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-Globals._WorldSpaceCameraPos.xyzx.xyz);
    output.TEXCOORD1.xyz = half3(u_xlat1.xyz);
    u_xlat1.xyw = (-u_xlat0.xyz) * float3(Globals._WorldSpaceLightPos0.www) + float3(Globals._WorldSpaceLightPos0.xyz);
    output.TEXCOORD5.xyz = u_xlat0.xyz;
    output.TEXCOORD2.w = half(u_xlat1.x);
    output.TEXCOORD2.xyz = half3(0.0, 0.0, 0.0);
    output.TEXCOORD3.w = half(u_xlat1.y);
    output.TEXCOORD3.xyz = half3(0.0, 0.0, 0.0);
    u_xlat0.x = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = rsqrt(u_xlat6);
    u_xlat1.xyz = float3(u_xlat6) * u_xlat0.xyz;
    output.TEXCOORD4 = half4(u_xlat1);
    output.TEXCOORD6.xy = float2(0.0, 0.0);
    return output;
}


-- Hardware tier variant: Tier 3
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0
Set 2D Texture "_LightTexture0" to slot 1

Constant Buffer "Globals" (96 bytes) on slot 0 {
  Matrix4x4 unity_WorldToLight at 32
  VectorHalf4 _LightColor0 at 0
  VectorHalf4 _Color at 8
  ScalarHalf _Metallic at 16
  ScalarHalf _Glossiness at 18
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    half4 _LightColor0;
    half4 _Color;
    half _Metallic;
    half _Glossiness;
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(0) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_LightTexture0 [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture (0) ]] ,
    texture2d<half, access::sample > _LightTexture0 [[ texture (1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half4 u_xlat16_0;
    half3 u_xlat16_1;
    float2 u_xlat2;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    half u_xlat16_4;
    half u_xlat16_6;
    half u_xlat16_12;
    half u_xlat16_13;
    u_xlat16_0.x = dot(input.TEXCOORD1.xyz, input.TEXCOORD1.xyz);
    u_xlat16_0.x = rsqrt(u_xlat16_0.x);
    u_xlat16_1.x = input.TEXCOORD2.w;
    u_xlat16_1.y = input.TEXCOORD3.w;
    u_xlat16_1.z = input.TEXCOORD4.w;
    u_xlat16_0.xyz = (-input.TEXCOORD1.xyz) * u_xlat16_0.xxx + u_xlat16_1.xyz;
    u_xlat16_12 = dot(u_xlat16_0.xyz, u_xlat16_0.xyz);
    u_xlat16_2.x = max(u_xlat16_12, half(0.00100000005));
    u_xlat16_12 = rsqrt(u_xlat16_2.x);
    u_xlat16_0.xyz = half3(u_xlat16_12) * u_xlat16_0.xyz;
    u_xlat16_12 = dot(u_xlat16_1.xyz, u_xlat16_0.xyz);
    u_xlat16_12 = clamp(u_xlat16_12, 0.0h, 1.0h);
    u_xlat16_2.x = max(u_xlat16_12, half(0.319999993));
    u_xlat16_12 = (-Globals._Glossiness) + half(1.0);
    u_xlat16_6 = u_xlat16_12 * u_xlat16_12 + half(1.5);
    u_xlat16_12 = u_xlat16_12 * u_xlat16_12;
    u_xlat16_2.x = u_xlat16_6 * u_xlat16_2.x;
    u_xlat16_13 = dot(input.TEXCOORD4.xyz, input.TEXCOORD4.xyz);
    u_xlat16_13 = rsqrt(u_xlat16_13);
    u_xlat16_3.xyz = half3(u_xlat16_13) * input.TEXCOORD4.xyz;
    u_xlat16_0.x = dot(u_xlat16_3.xyz, u_xlat16_0.xyz);
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0h, 1.0h);
    u_xlat16_4 = dot(u_xlat16_3.xyz, u_xlat16_1.xyz);
    u_xlat16_4 = clamp(u_xlat16_4, 0.0h, 1.0h);
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_6 = u_xlat16_12 * u_xlat16_12 + half(-1.0);
    u_xlat16_6 = u_xlat16_0.x * u_xlat16_6 + half(1.00001001);
    u_xlat16_2.x = u_xlat16_6 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_12 / u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_2.x + half(-9.99999975e-05);
    u_xlat16_0.x = max(u_xlat16_2.x, half(0.0));
    u_xlat16_0.x = min(u_xlat16_0.x, half(100.0));
    u_xlat16_2.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = Globals._Color.xyz * u_xlat16_2.xyz + half3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat16_2.xyz = u_xlat16_2.xyz * Globals._Color.xyz;
    u_xlat16_1.xyz = half3(Globals._Metallic) * u_xlat16_1.xyz + half3(0.220916301, 0.220916301, 0.220916301);
    u_xlat16_0.xzw = u_xlat16_0.xxx * u_xlat16_1.xyz;
    u_xlat16_1.x = (-Globals._Metallic) * half(0.779083729) + half(0.779083729);
    u_xlat16_0.xzw = u_xlat16_2.xyz * u_xlat16_1.xxx + u_xlat16_0.xzw;
    u_xlat2.xy = input.TEXCOORD5.yy * Globals.hlslcc_mtx4x4unity_WorldToLight[1].xy;
    u_xlat2.xy = Globals.hlslcc_mtx4x4unity_WorldToLight[0].xy * input.TEXCOORD5.xx + u_xlat2.xy;
    u_xlat2.xy = Globals.hlslcc_mtx4x4unity_WorldToLight[2].xy * input.TEXCOORD5.zz + u_xlat2.xy;
    u_xlat2.xy = u_xlat2.xy + Globals.hlslcc_mtx4x4unity_WorldToLight[3].xy;
    u_xlat16_2.x = _LightTexture0.sample(sampler_LightTexture0, u_xlat2.xy).w;
    u_xlat16_1.xyz = u_xlat16_2.xxx * Globals._LightColor0.xyz;
    u_xlat16_0.xzw = u_xlat16_0.xzw * u_xlat16_1.xyz;
    output.SV_Target0.xyz = half3(u_xlat16_4) * u_xlat16_0.xzw;
    output.SV_Target0.w = half(1.0);
    return output;
}


//////////////////////////////////////////////////////
Keywords set in this variant: SPOT SHADOWS_DEPTH 
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"
Uses vertex data channel "TexCoord0"

Constant Buffer "Globals" (258 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 32
  Matrix4x4 unity_WorldToObject at 96
  Matrix4x4 unity_MatrixVP at 160
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 _MainTex_ST at 224
  Vector4 _DetailAlbedoMap_ST at 240
  ScalarHalf _UVSec at 256
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    float4 _DetailAlbedoMap_ST;
    half _UVSec;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    half3 NORMAL0 [[ attribute(1) ]] ;
    float2 TEXCOORD0 [[ attribute(2) ]] ;
    float2 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float2 TEXCOORD6 [[ user(TEXCOORD6) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool u_xlatb0;
    float4 u_xlat1;
    float u_xlat6;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0] * input.POSITION0.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2] * input.POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    output.mtl_Position = Globals.hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlatb0 = Globals._UVSec==half(0.0);
    u_xlat0.xy = (bool(u_xlatb0)) ? input.TEXCOORD0.xy : input.TEXCOORD1.xy;
    output.TEXCOORD0.zw = u_xlat0.xy * Globals._DetailAlbedoMap_ST.xy + Globals._DetailAlbedoMap_ST.zw;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy * Globals._MainTex_ST.xy + Globals._MainTex_ST.zw;
    u_xlat0.xyz = input.POSITION0.yyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * input.POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * input.POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * input.POSITION0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-Globals._WorldSpaceCameraPos.xyzx.xyz);
    output.TEXCOORD1.xyz = half3(u_xlat1.xyz);
    u_xlat1.xyw = (-u_xlat0.xyz) * Globals._WorldSpaceLightPos0.www + Globals._WorldSpaceLightPos0.xyz;
    output.TEXCOORD5.xyz = u_xlat0.xyz;
    output.TEXCOORD2.w = half(u_xlat1.x);
    output.TEXCOORD2.xyz = half3(0.0, 0.0, 0.0);
    output.TEXCOORD3.w = half(u_xlat1.y);
    output.TEXCOORD3.xyz = half3(0.0, 0.0, 0.0);
    u_xlat0.x = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = rsqrt(u_xlat6);
    u_xlat1.xyz = float3(u_xlat6) * u_xlat0.xyz;
    output.TEXCOORD4 = half4(u_xlat1);
    output.TEXCOORD6.xy = float2(0.0, 0.0);
    return output;
}


-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0 sampler slot 2
Set 2D Texture "_LightTexture0" to slot 1 sampler slot 3
Set 2D Texture "_LightTextureB0" to slot 2 sampler slot 4
Set 2D Texture "unity_NHxRoughness" to slot 3 sampler slot 0
Set 2D Texture "_ShadowMapTexture" to slot 4 sampler slot 1

Constant Buffer "Globals" (464 bytes) on slot 0 {
  Matrix4x4 unity_WorldToShadow[4] at 16
  Matrix4x4 unity_MatrixV at 304
  Matrix4x4 unity_WorldToLight at 400
  Vector3 _WorldSpaceCameraPos at 0
  VectorHalf4 _LightShadowData at 272
  Vector4 unity_ShadowFadeCenterAndType at 288
  VectorHalf4 _LightColor0 at 368
  VectorHalf4 _Color at 376
  ScalarHalf _Metallic at 384
  ScalarHalf _Glossiness at 386
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 hlslcc_mtx4x4unity_WorldToShadow[16];
    half4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    half4 _LightColor0;
    half4 _Color;
    half _Metallic;
    half _Glossiness;
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(0) ]];
};

constexpr sampler _mtl_xl_shadow_sampler(address::clamp_to_edge, filter::linear, compare_func::greater_equal);
fragment Mtl_FragmentOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    sampler samplerunity_NHxRoughness [[ sampler (0) ]],
    sampler sampler_ShadowMapTexture [[ sampler (1) ]],
    sampler sampler_MainTex [[ sampler (2) ]],
    sampler sampler_LightTexture0 [[ sampler (3) ]],
    sampler sampler_LightTextureB0 [[ sampler (4) ]],
    texture2d<half, access::sample > _MainTex [[ texture (0) ]] ,
    texture2d<half, access::sample > _LightTexture0 [[ texture (1) ]] ,
    texture2d<half, access::sample > _LightTextureB0 [[ texture (2) ]] ,
    texture2d<half, access::sample > unity_NHxRoughness [[ texture (3) ]] ,
    depth2d<float, access::sample > _ShadowMapTexture [[ texture (4) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    half u_xlat16_0;
    float4 u_xlat1;
    bool u_xlatb1;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    float3 u_xlat6;
    half3 u_xlat16_6;
    half u_xlat16_8;
    half u_xlat16_12;
    half u_xlat16_18;
    half u_xlat16_20;
    u_xlat0.xyz = input.TEXCOORD5.xyz + (-Globals.unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat6.xyz = (-input.TEXCOORD5.xyz) + Globals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat1.x = Globals.hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = Globals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = Globals.hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat6.x = dot(u_xlat6.xyz, u_xlat1.xyz);
    u_xlat0.x = (-u_xlat6.x) + u_xlat0.x;
    u_xlat0.x = Globals.unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat6.x;
    u_xlat0.x = u_xlat0.x * float(Globals._LightShadowData.z) + float(Globals._LightShadowData.w);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat1 = input.TEXCOORD5.yyyy * Globals.hlslcc_mtx4x4unity_WorldToShadow[1];
    u_xlat1 = Globals.hlslcc_mtx4x4unity_WorldToShadow[0] * input.TEXCOORD5.xxxx + u_xlat1;
    u_xlat1 = Globals.hlslcc_mtx4x4unity_WorldToShadow[2] * input.TEXCOORD5.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + Globals.hlslcc_mtx4x4unity_WorldToShadow[3];
    u_xlat6.xyz = u_xlat1.xyz / u_xlat1.www;
    u_xlat16_6.x = _ShadowMapTexture.sample_compare(_mtl_xl_shadow_sampler, u_xlat6.xy, saturate(u_xlat6.z), level(0.0));
    u_xlat16_12 = (-Globals._LightShadowData.x) + half(1.0);
    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_12 + Globals._LightShadowData.x;
    u_xlat16_2.x = half(u_xlat0.x + float(u_xlat16_6.x));
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0h, 1.0h);
    u_xlat0 = input.TEXCOORD5.yyyy * Globals.hlslcc_mtx4x4unity_WorldToLight[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_WorldToLight[0] * input.TEXCOORD5.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_WorldToLight[2] * input.TEXCOORD5.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + Globals.hlslcc_mtx4x4unity_WorldToLight[3];
    u_xlat1.xy = u_xlat0.xy / u_xlat0.ww;
    u_xlat1.xy = u_xlat1.xy + float2(0.5, 0.5);
    u_xlat16_18 = _LightTexture0.sample(sampler_LightTexture0, u_xlat1.xy).w;
    u_xlatb1 = 0.0<u_xlat0.z;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat16_0 = _LightTextureB0.sample(sampler_LightTextureB0, u_xlat0.xx).w;
    u_xlat16_8 = (u_xlatb1) ? half(1.0) : half(0.0);
    u_xlat16_8 = u_xlat16_18 * u_xlat16_8;
    u_xlat16_8 = u_xlat16_0 * u_xlat16_8;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_8;
    u_xlat16_2.xyz = u_xlat16_2.xxx * Globals._LightColor0.xyz;
    u_xlat16_3.x = input.TEXCOORD2.w;
    u_xlat16_3.y = input.TEXCOORD3.w;
    u_xlat16_3.z = input.TEXCOORD4.w;
    u_xlat16_20 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
    u_xlat16_20 = rsqrt(u_xlat16_20);
    u_xlat16_3.xyz = half3(u_xlat16_20) * u_xlat16_3.xyz;
    u_xlat16_20 = dot(input.TEXCOORD4.xyz, input.TEXCOORD4.xyz);
    u_xlat16_20 = rsqrt(u_xlat16_20);
    u_xlat16_4.xyz = half3(u_xlat16_20) * input.TEXCOORD4.xyz;
    u_xlat16_20 = dot(u_xlat16_4.xyz, u_xlat16_3.xyz);
    u_xlat16_20 = clamp(u_xlat16_20, 0.0h, 1.0h);
    u_xlat16_2.xyz = half3(u_xlat16_20) * u_xlat16_2.xyz;
    u_xlat16_20 = dot(input.TEXCOORD1.xyz, input.TEXCOORD1.xyz);
    u_xlat16_20 = rsqrt(u_xlat16_20);
    u_xlat16_5.xyz = half3(u_xlat16_20) * input.TEXCOORD1.xyz;
    u_xlat16_20 = dot((-u_xlat16_5.xyz), u_xlat16_4.xyz);
    u_xlat16_20 = u_xlat16_20 + u_xlat16_20;
    u_xlat16_4.xyz = u_xlat16_4.xyz * (-half3(u_xlat16_20)) + (-u_xlat16_5.xyz);
    u_xlat16_20 = dot(u_xlat16_4.xyz, u_xlat16_3.xyz);
    u_xlat16_20 = u_xlat16_20 * u_xlat16_20;
    u_xlat16_3.x = u_xlat16_20 * u_xlat16_20;
    u_xlat16_3.y = (-Globals._Glossiness) + half(1.0);
    u_xlat16_0 = unity_NHxRoughness.sample(samplerunity_NHxRoughness, float2(u_xlat16_3.xy)).w;
    u_xlat16_0 = u_xlat16_0 * half(16.0);
    u_xlat16_6.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_3.xyz = Globals._Color.xyz * u_xlat16_6.xyz + half3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat16_6.xyz = u_xlat16_6.xyz * Globals._Color.xyz;
    u_xlat16_3.xyz = half3(Globals._Metallic) * u_xlat16_3.xyz + half3(0.220916301, 0.220916301, 0.220916301);
    u_xlat16_3.xyz = half3(u_xlat16_0) * u_xlat16_3.xyz;
    u_xlat16_20 = (-Globals._Metallic) * half(0.779083729) + half(0.779083729);
    u_xlat16_3.xyz = u_xlat16_6.xyz * half3(u_xlat16_20) + u_xlat16_3.xyz;
    output.SV_Target0.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}


-- Hardware tier variant: Tier 2
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"
Uses vertex data channel "TexCoord0"

Constant Buffer "Globals" (258 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 32
  Matrix4x4 unity_WorldToObject at 96
  Matrix4x4 unity_MatrixVP at 160
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 _MainTex_ST at 224
  Vector4 _DetailAlbedoMap_ST at 240
  ScalarHalf _UVSec at 256
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    float4 _DetailAlbedoMap_ST;
    half _UVSec;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    half3 NORMAL0 [[ attribute(1) ]] ;
    float2 TEXCOORD0 [[ attribute(2) ]] ;
    float2 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float2 TEXCOORD6 [[ user(TEXCOORD6) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool u_xlatb0;
    float4 u_xlat1;
    float u_xlat6;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0] * input.POSITION0.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2] * input.POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    output.mtl_Position = Globals.hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlatb0 = Globals._UVSec==half(0.0);
    u_xlat0.xy = (bool(u_xlatb0)) ? input.TEXCOORD0.xy : input.TEXCOORD1.xy;
    output.TEXCOORD0.zw = u_xlat0.xy * Globals._DetailAlbedoMap_ST.xy + Globals._DetailAlbedoMap_ST.zw;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy * Globals._MainTex_ST.xy + Globals._MainTex_ST.zw;
    u_xlat0.xyz = input.POSITION0.yyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * input.POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * input.POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * input.POSITION0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-Globals._WorldSpaceCameraPos.xyzx.xyz);
    output.TEXCOORD1.xyz = half3(u_xlat1.xyz);
    u_xlat1.xyw = (-u_xlat0.xyz) * Globals._WorldSpaceLightPos0.www + Globals._WorldSpaceLightPos0.xyz;
    output.TEXCOORD5.xyz = u_xlat0.xyz;
    output.TEXCOORD2.w = half(u_xlat1.x);
    output.TEXCOORD2.xyz = half3(0.0, 0.0, 0.0);
    output.TEXCOORD3.w = half(u_xlat1.y);
    output.TEXCOORD3.xyz = half3(0.0, 0.0, 0.0);
    u_xlat0.x = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = rsqrt(u_xlat6);
    u_xlat1.xyz = float3(u_xlat6) * u_xlat0.xyz;
    output.TEXCOORD4 = half4(u_xlat1);
    output.TEXCOORD6.xy = float2(0.0, 0.0);
    return output;
}


-- Hardware tier variant: Tier 2
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0 sampler slot 1
Set 2D Texture "_LightTexture0" to slot 1 sampler slot 2
Set 2D Texture "_LightTextureB0" to slot 2 sampler slot 3
Set 2D Texture "_ShadowMapTexture" to slot 3 sampler slot 0

Constant Buffer "Globals" (464 bytes) on slot 0 {
  Matrix4x4 unity_WorldToShadow[4] at 16
  Matrix4x4 unity_MatrixV at 304
  Matrix4x4 unity_WorldToLight at 400
  Vector3 _WorldSpaceCameraPos at 0
  VectorHalf4 _LightShadowData at 272
  Vector4 unity_ShadowFadeCenterAndType at 288
  VectorHalf4 _LightColor0 at 368
  VectorHalf4 _Color at 376
  ScalarHalf _Metallic at 384
  ScalarHalf _Glossiness at 386
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 hlslcc_mtx4x4unity_WorldToShadow[16];
    half4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    half4 _LightColor0;
    half4 _Color;
    half _Metallic;
    half _Glossiness;
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(0) ]];
};

constexpr sampler _mtl_xl_shadow_sampler(address::clamp_to_edge, filter::linear, compare_func::greater_equal);
fragment Mtl_FragmentOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    sampler sampler_ShadowMapTexture [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_LightTexture0 [[ sampler (2) ]],
    sampler sampler_LightTextureB0 [[ sampler (3) ]],
    texture2d<half, access::sample > _MainTex [[ texture (0) ]] ,
    texture2d<half, access::sample > _LightTexture0 [[ texture (1) ]] ,
    texture2d<half, access::sample > _LightTextureB0 [[ texture (2) ]] ,
    depth2d<float, access::sample > _ShadowMapTexture [[ texture (3) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    half3 u_xlat16_0;
    float4 u_xlat1;
    bool u_xlatb1;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    float3 u_xlat6;
    half u_xlat16_6;
    half u_xlat16_8;
    half3 u_xlat16_9;
    half u_xlat16_12;
    half u_xlat16_18;
    half u_xlat16_20;
    half u_xlat16_21;
    u_xlat0.xyz = input.TEXCOORD5.xyz + (-Globals.unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat6.xyz = (-input.TEXCOORD5.xyz) + Globals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat1.x = Globals.hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = Globals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = Globals.hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat6.x = dot(u_xlat6.xyz, u_xlat1.xyz);
    u_xlat0.x = (-u_xlat6.x) + u_xlat0.x;
    u_xlat0.x = Globals.unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat6.x;
    u_xlat0.x = u_xlat0.x * float(Globals._LightShadowData.z) + float(Globals._LightShadowData.w);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat1 = input.TEXCOORD5.yyyy * Globals.hlslcc_mtx4x4unity_WorldToShadow[1];
    u_xlat1 = Globals.hlslcc_mtx4x4unity_WorldToShadow[0] * input.TEXCOORD5.xxxx + u_xlat1;
    u_xlat1 = Globals.hlslcc_mtx4x4unity_WorldToShadow[2] * input.TEXCOORD5.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + Globals.hlslcc_mtx4x4unity_WorldToShadow[3];
    u_xlat6.xyz = u_xlat1.xyz / u_xlat1.www;
    u_xlat16_6 = _ShadowMapTexture.sample_compare(_mtl_xl_shadow_sampler, u_xlat6.xy, saturate(u_xlat6.z), level(0.0));
    u_xlat16_12 = (-Globals._LightShadowData.x) + half(1.0);
    u_xlat16_6 = u_xlat16_6 * u_xlat16_12 + Globals._LightShadowData.x;
    u_xlat16_2.x = half(u_xlat0.x + float(u_xlat16_6));
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0h, 1.0h);
    u_xlat0 = input.TEXCOORD5.yyyy * Globals.hlslcc_mtx4x4unity_WorldToLight[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_WorldToLight[0] * input.TEXCOORD5.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_WorldToLight[2] * input.TEXCOORD5.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + Globals.hlslcc_mtx4x4unity_WorldToLight[3];
    u_xlat1.xy = u_xlat0.xy / u_xlat0.ww;
    u_xlat1.xy = u_xlat1.xy + float2(0.5, 0.5);
    u_xlat16_18 = _LightTexture0.sample(sampler_LightTexture0, u_xlat1.xy).w;
    u_xlatb1 = 0.0<u_xlat0.z;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat16_0.x = _LightTextureB0.sample(sampler_LightTextureB0, u_xlat0.xx).w;
    u_xlat16_8 = (u_xlatb1) ? half(1.0) : half(0.0);
    u_xlat16_8 = u_xlat16_18 * u_xlat16_8;
    u_xlat16_8 = u_xlat16_0.x * u_xlat16_8;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_8;
    u_xlat16_2.xyz = u_xlat16_2.xxx * Globals._LightColor0.xyz;
    u_xlat16_20 = dot(input.TEXCOORD1.xyz, input.TEXCOORD1.xyz);
    u_xlat16_20 = rsqrt(u_xlat16_20);
    u_xlat16_3.x = input.TEXCOORD2.w;
    u_xlat16_3.y = input.TEXCOORD3.w;
    u_xlat16_3.z = input.TEXCOORD4.w;
    u_xlat16_21 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
    u_xlat16_21 = rsqrt(u_xlat16_21);
    u_xlat16_3.xyz = half3(u_xlat16_21) * u_xlat16_3.xyz;
    u_xlat16_4.xyz = (-input.TEXCOORD1.xyz) * half3(u_xlat16_20) + u_xlat16_3.xyz;
    u_xlat16_20 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
    u_xlat16_0.x = max(u_xlat16_20, half(0.00100000005));
    u_xlat16_20 = rsqrt(u_xlat16_0.x);
    u_xlat16_4.xyz = half3(u_xlat16_20) * u_xlat16_4.xyz;
    u_xlat16_20 = dot(u_xlat16_3.xyz, u_xlat16_4.xyz);
    u_xlat16_20 = clamp(u_xlat16_20, 0.0h, 1.0h);
    u_xlat16_0.x = max(u_xlat16_20, half(0.319999993));
    u_xlat16_20 = (-Globals._Glossiness) + half(1.0);
    u_xlat16_6 = u_xlat16_20 * u_xlat16_20 + half(1.5);
    u_xlat16_20 = u_xlat16_20 * u_xlat16_20;
    u_xlat16_0.x = u_xlat16_6 * u_xlat16_0.x;
    u_xlat16_21 = dot(input.TEXCOORD4.xyz, input.TEXCOORD4.xyz);
    u_xlat16_21 = rsqrt(u_xlat16_21);
    u_xlat16_5.xyz = half3(u_xlat16_21) * input.TEXCOORD4.xyz;
    u_xlat16_21 = dot(u_xlat16_5.xyz, u_xlat16_4.xyz);
    u_xlat16_21 = clamp(u_xlat16_21, 0.0h, 1.0h);
    u_xlat16_3.x = dot(u_xlat16_5.xyz, u_xlat16_3.xyz);
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0h, 1.0h);
    u_xlat16_9.x = u_xlat16_21 * u_xlat16_21;
    u_xlat16_6 = u_xlat16_20 * u_xlat16_20 + half(-1.0);
    u_xlat16_6 = u_xlat16_9.x * u_xlat16_6 + half(1.00001001);
    u_xlat16_0.x = u_xlat16_6 * u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_20 / u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x + half(-9.99999975e-05);
    u_xlat16_20 = max(u_xlat16_0.x, half(0.0));
    u_xlat16_20 = min(u_xlat16_20, half(100.0));
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_9.xyz = Globals._Color.xyz * u_xlat16_0.xyz + half3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat16_0.xyz = u_xlat16_0.xyz * Globals._Color.xyz;
    u_xlat16_9.xyz = half3(Globals._Metallic) * u_xlat16_9.xyz + half3(0.220916301, 0.220916301, 0.220916301);
    u_xlat16_9.xyz = half3(u_xlat16_20) * u_xlat16_9.xyz;
    u_xlat16_20 = (-Globals._Metallic) * half(0.779083729) + half(0.779083729);
    u_xlat16_9.xyz = u_xlat16_0.xyz * half3(u_xlat16_20) + u_xlat16_9.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_9.xyz;
    output.SV_Target0.xyz = u_xlat16_3.xxx * u_xlat16_2.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}


-- Hardware tier variant: Tier 3
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"
Uses vertex data channel "TexCoord0"

Constant Buffer "Globals" (258 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 32
  Matrix4x4 unity_WorldToObject at 96
  Matrix4x4 unity_MatrixVP at 160
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 _MainTex_ST at 224
  Vector4 _DetailAlbedoMap_ST at 240
  ScalarHalf _UVSec at 256
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    float4 _DetailAlbedoMap_ST;
    half _UVSec;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    half3 NORMAL0 [[ attribute(1) ]] ;
    float2 TEXCOORD0 [[ attribute(2) ]] ;
    float2 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float2 TEXCOORD6 [[ user(TEXCOORD6) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool u_xlatb0;
    float4 u_xlat1;
    float u_xlat6;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0] * input.POSITION0.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2] * input.POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    output.mtl_Position = Globals.hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlatb0 = Globals._UVSec==half(0.0);
    u_xlat0.xy = (bool(u_xlatb0)) ? input.TEXCOORD0.xy : input.TEXCOORD1.xy;
    output.TEXCOORD0.zw = u_xlat0.xy * Globals._DetailAlbedoMap_ST.xy + Globals._DetailAlbedoMap_ST.zw;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy * Globals._MainTex_ST.xy + Globals._MainTex_ST.zw;
    u_xlat0.xyz = input.POSITION0.yyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * input.POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * input.POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * input.POSITION0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-Globals._WorldSpaceCameraPos.xyzx.xyz);
    output.TEXCOORD1.xyz = half3(u_xlat1.xyz);
    u_xlat1.xyw = (-u_xlat0.xyz) * Globals._WorldSpaceLightPos0.www + Globals._WorldSpaceLightPos0.xyz;
    output.TEXCOORD5.xyz = u_xlat0.xyz;
    output.TEXCOORD2.w = half(u_xlat1.x);
    output.TEXCOORD2.xyz = half3(0.0, 0.0, 0.0);
    output.TEXCOORD3.w = half(u_xlat1.y);
    output.TEXCOORD3.xyz = half3(0.0, 0.0, 0.0);
    u_xlat0.x = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = rsqrt(u_xlat6);
    u_xlat1.xyz = float3(u_xlat6) * u_xlat0.xyz;
    output.TEXCOORD4 = half4(u_xlat1);
    output.TEXCOORD6.xy = float2(0.0, 0.0);
    return output;
}


-- Hardware tier variant: Tier 3
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0 sampler slot 1
Set 2D Texture "_LightTexture0" to slot 1 sampler slot 2
Set 2D Texture "_LightTextureB0" to slot 2 sampler slot 3
Set 2D Texture "_ShadowMapTexture" to slot 3 sampler slot 0

Constant Buffer "Globals" (464 bytes) on slot 0 {
  Matrix4x4 unity_WorldToShadow[4] at 16
  Matrix4x4 unity_MatrixV at 304
  Matrix4x4 unity_WorldToLight at 400
  Vector3 _WorldSpaceCameraPos at 0
  VectorHalf4 _LightShadowData at 272
  Vector4 unity_ShadowFadeCenterAndType at 288
  VectorHalf4 _LightColor0 at 368
  VectorHalf4 _Color at 376
  ScalarHalf _Metallic at 384
  ScalarHalf _Glossiness at 386
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 hlslcc_mtx4x4unity_WorldToShadow[16];
    half4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    half4 _LightColor0;
    half4 _Color;
    half _Metallic;
    half _Glossiness;
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(0) ]];
};

constexpr sampler _mtl_xl_shadow_sampler(address::clamp_to_edge, filter::linear, compare_func::greater_equal);
fragment Mtl_FragmentOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    sampler sampler_ShadowMapTexture [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_LightTexture0 [[ sampler (2) ]],
    sampler sampler_LightTextureB0 [[ sampler (3) ]],
    texture2d<half, access::sample > _MainTex [[ texture (0) ]] ,
    texture2d<half, access::sample > _LightTexture0 [[ texture (1) ]] ,
    texture2d<half, access::sample > _LightTextureB0 [[ texture (2) ]] ,
    depth2d<float, access::sample > _ShadowMapTexture [[ texture (3) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    half3 u_xlat16_0;
    float4 u_xlat1;
    bool u_xlatb1;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    float3 u_xlat6;
    half u_xlat16_6;
    half u_xlat16_8;
    half3 u_xlat16_9;
    half u_xlat16_12;
    half u_xlat16_18;
    half u_xlat16_20;
    half u_xlat16_21;
    u_xlat0.xyz = input.TEXCOORD5.xyz + (-Globals.unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat6.xyz = (-input.TEXCOORD5.xyz) + Globals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat1.x = Globals.hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = Globals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = Globals.hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat6.x = dot(u_xlat6.xyz, u_xlat1.xyz);
    u_xlat0.x = (-u_xlat6.x) + u_xlat0.x;
    u_xlat0.x = Globals.unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat6.x;
    u_xlat0.x = u_xlat0.x * float(Globals._LightShadowData.z) + float(Globals._LightShadowData.w);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat1 = input.TEXCOORD5.yyyy * Globals.hlslcc_mtx4x4unity_WorldToShadow[1];
    u_xlat1 = Globals.hlslcc_mtx4x4unity_WorldToShadow[0] * input.TEXCOORD5.xxxx + u_xlat1;
    u_xlat1 = Globals.hlslcc_mtx4x4unity_WorldToShadow[2] * input.TEXCOORD5.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + Globals.hlslcc_mtx4x4unity_WorldToShadow[3];
    u_xlat6.xyz = u_xlat1.xyz / u_xlat1.www;
    u_xlat16_6 = _ShadowMapTexture.sample_compare(_mtl_xl_shadow_sampler, u_xlat6.xy, saturate(u_xlat6.z), level(0.0));
    u_xlat16_12 = (-Globals._LightShadowData.x) + half(1.0);
    u_xlat16_6 = u_xlat16_6 * u_xlat16_12 + Globals._LightShadowData.x;
    u_xlat16_2.x = half(u_xlat0.x + float(u_xlat16_6));
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0h, 1.0h);
    u_xlat0 = input.TEXCOORD5.yyyy * Globals.hlslcc_mtx4x4unity_WorldToLight[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_WorldToLight[0] * input.TEXCOORD5.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_WorldToLight[2] * input.TEXCOORD5.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + Globals.hlslcc_mtx4x4unity_WorldToLight[3];
    u_xlat1.xy = u_xlat0.xy / u_xlat0.ww;
    u_xlat1.xy = u_xlat1.xy + float2(0.5, 0.5);
    u_xlat16_18 = _LightTexture0.sample(sampler_LightTexture0, u_xlat1.xy).w;
    u_xlatb1 = 0.0<u_xlat0.z;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat16_0.x = _LightTextureB0.sample(sampler_LightTextureB0, u_xlat0.xx).w;
    u_xlat16_8 = (u_xlatb1) ? half(1.0) : half(0.0);
    u_xlat16_8 = u_xlat16_18 * u_xlat16_8;
    u_xlat16_8 = u_xlat16_0.x * u_xlat16_8;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_8;
    u_xlat16_2.xyz = u_xlat16_2.xxx * Globals._LightColor0.xyz;
    u_xlat16_20 = dot(input.TEXCOORD1.xyz, input.TEXCOORD1.xyz);
    u_xlat16_20 = rsqrt(u_xlat16_20);
    u_xlat16_3.x = input.TEXCOORD2.w;
    u_xlat16_3.y = input.TEXCOORD3.w;
    u_xlat16_3.z = input.TEXCOORD4.w;
    u_xlat16_21 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
    u_xlat16_21 = rsqrt(u_xlat16_21);
    u_xlat16_3.xyz = half3(u_xlat16_21) * u_xlat16_3.xyz;
    u_xlat16_4.xyz = (-input.TEXCOORD1.xyz) * half3(u_xlat16_20) + u_xlat16_3.xyz;
    u_xlat16_20 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
    u_xlat16_0.x = max(u_xlat16_20, half(0.00100000005));
    u_xlat16_20 = rsqrt(u_xlat16_0.x);
    u_xlat16_4.xyz = half3(u_xlat16_20) * u_xlat16_4.xyz;
    u_xlat16_20 = dot(u_xlat16_3.xyz, u_xlat16_4.xyz);
    u_xlat16_20 = clamp(u_xlat16_20, 0.0h, 1.0h);
    u_xlat16_0.x = max(u_xlat16_20, half(0.319999993));
    u_xlat16_20 = (-Globals._Glossiness) + half(1.0);
    u_xlat16_6 = u_xlat16_20 * u_xlat16_20 + half(1.5);
    u_xlat16_20 = u_xlat16_20 * u_xlat16_20;
    u_xlat16_0.x = u_xlat16_6 * u_xlat16_0.x;
    u_xlat16_21 = dot(input.TEXCOORD4.xyz, input.TEXCOORD4.xyz);
    u_xlat16_21 = rsqrt(u_xlat16_21);
    u_xlat16_5.xyz = half3(u_xlat16_21) * input.TEXCOORD4.xyz;
    u_xlat16_21 = dot(u_xlat16_5.xyz, u_xlat16_4.xyz);
    u_xlat16_21 = clamp(u_xlat16_21, 0.0h, 1.0h);
    u_xlat16_3.x = dot(u_xlat16_5.xyz, u_xlat16_3.xyz);
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0h, 1.0h);
    u_xlat16_9.x = u_xlat16_21 * u_xlat16_21;
    u_xlat16_6 = u_xlat16_20 * u_xlat16_20 + half(-1.0);
    u_xlat16_6 = u_xlat16_9.x * u_xlat16_6 + half(1.00001001);
    u_xlat16_0.x = u_xlat16_6 * u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_20 / u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x + half(-9.99999975e-05);
    u_xlat16_20 = max(u_xlat16_0.x, half(0.0));
    u_xlat16_20 = min(u_xlat16_20, half(100.0));
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_9.xyz = Globals._Color.xyz * u_xlat16_0.xyz + half3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat16_0.xyz = u_xlat16_0.xyz * Globals._Color.xyz;
    u_xlat16_9.xyz = half3(Globals._Metallic) * u_xlat16_9.xyz + half3(0.220916301, 0.220916301, 0.220916301);
    u_xlat16_9.xyz = half3(u_xlat16_20) * u_xlat16_9.xyz;
    u_xlat16_20 = (-Globals._Metallic) * half(0.779083729) + half(0.779083729);
    u_xlat16_9.xyz = u_xlat16_0.xyz * half3(u_xlat16_20) + u_xlat16_9.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_9.xyz;
    output.SV_Target0.xyz = u_xlat16_3.xxx * u_xlat16_2.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}


//////////////////////////////////////////////////////
Keywords set in this variant: SPOT SHADOWS_DEPTH SHADOWS_SOFT 
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"
Uses vertex data channel "TexCoord0"

Constant Buffer "Globals" (258 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 32
  Matrix4x4 unity_WorldToObject at 96
  Matrix4x4 unity_MatrixVP at 160
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 _MainTex_ST at 224
  Vector4 _DetailAlbedoMap_ST at 240
  ScalarHalf _UVSec at 256
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    float4 _DetailAlbedoMap_ST;
    half _UVSec;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    half3 NORMAL0 [[ attribute(1) ]] ;
    float2 TEXCOORD0 [[ attribute(2) ]] ;
    float2 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float2 TEXCOORD6 [[ user(TEXCOORD6) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool u_xlatb0;
    float4 u_xlat1;
    float u_xlat6;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0] * input.POSITION0.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2] * input.POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    output.mtl_Position = Globals.hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlatb0 = Globals._UVSec==half(0.0);
    u_xlat0.xy = (bool(u_xlatb0)) ? input.TEXCOORD0.xy : input.TEXCOORD1.xy;
    output.TEXCOORD0.zw = u_xlat0.xy * Globals._DetailAlbedoMap_ST.xy + Globals._DetailAlbedoMap_ST.zw;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy * Globals._MainTex_ST.xy + Globals._MainTex_ST.zw;
    u_xlat0.xyz = input.POSITION0.yyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * input.POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * input.POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * input.POSITION0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-Globals._WorldSpaceCameraPos.xyzx.xyz);
    output.TEXCOORD1.xyz = half3(u_xlat1.xyz);
    u_xlat1.xyw = (-u_xlat0.xyz) * Globals._WorldSpaceLightPos0.www + Globals._WorldSpaceLightPos0.xyz;
    output.TEXCOORD5.xyz = u_xlat0.xyz;
    output.TEXCOORD2.w = half(u_xlat1.x);
    output.TEXCOORD2.xyz = half3(0.0, 0.0, 0.0);
    output.TEXCOORD3.w = half(u_xlat1.y);
    output.TEXCOORD3.xyz = half3(0.0, 0.0, 0.0);
    u_xlat0.x = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = rsqrt(u_xlat6);
    u_xlat1.xyz = float3(u_xlat6) * u_xlat0.xyz;
    output.TEXCOORD4 = half4(u_xlat1);
    output.TEXCOORD6.xy = float2(0.0, 0.0);
    return output;
}


-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0 sampler slot 2
Set 2D Texture "_LightTexture0" to slot 1 sampler slot 3
Set 2D Texture "_LightTextureB0" to slot 2 sampler slot 4
Set 2D Texture "unity_NHxRoughness" to slot 3 sampler slot 0
Set 2D Texture "_ShadowMapTexture" to slot 4 sampler slot 1

Constant Buffer "Globals" (528 bytes) on slot 0 {
  Matrix4x4 unity_WorldToShadow[4] at 16
  Matrix4x4 unity_MatrixV at 304
  Matrix4x4 unity_WorldToLight at 464
  Vector3 _WorldSpaceCameraPos at 0
  VectorHalf4 _LightShadowData at 272
  Vector4 unity_ShadowFadeCenterAndType at 288
  VectorHalf4 _LightColor0 at 368
  Vector4 _ShadowOffsets[4] at 384
  VectorHalf4 _Color at 448
  ScalarHalf _Metallic at 456
  ScalarHalf _Glossiness at 458
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 hlslcc_mtx4x4unity_WorldToShadow[16];
    half4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    half4 _LightColor0;
    float4 _ShadowOffsets[4];
    half4 _Color;
    half _Metallic;
    half _Glossiness;
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(0) ]];
};

constexpr sampler _mtl_xl_shadow_sampler(address::clamp_to_edge, filter::linear, compare_func::greater_equal);
fragment Mtl_FragmentOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    sampler samplerunity_NHxRoughness [[ sampler (0) ]],
    sampler sampler_ShadowMapTexture [[ sampler (1) ]],
    sampler sampler_MainTex [[ sampler (2) ]],
    sampler sampler_LightTexture0 [[ sampler (3) ]],
    sampler sampler_LightTextureB0 [[ sampler (4) ]],
    texture2d<half, access::sample > _MainTex [[ texture (0) ]] ,
    texture2d<half, access::sample > _LightTexture0 [[ texture (1) ]] ,
    texture2d<half, access::sample > _LightTextureB0 [[ texture (2) ]] ,
    texture2d<half, access::sample > unity_NHxRoughness [[ texture (3) ]] ,
    depth2d<float, access::sample > _ShadowMapTexture [[ texture (4) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    float4 u_xlat5;
    half u_xlat16_5;
    bool u_xlatb5;
    float4 u_xlat6;
    float3 u_xlat7;
    half3 u_xlat16_8;
    half3 u_xlat16_9;
    half u_xlat16_13;
    half u_xlat16_15;
    half u_xlat16_30;
    float u_xlat31;
    bool u_xlatb31;
    half u_xlat16_32;
    half u_xlat16_33;
    half u_xlat16_34;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * Globals._Color.xyz;
    u_xlat16_2.xyz = Globals._Color.xyz * u_xlat16_0.xyz + half3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat16_2.xyz = half3(Globals._Metallic) * u_xlat16_2.xyz + half3(0.220916301, 0.220916301, 0.220916301);
    u_xlat16_32 = (-Globals._Metallic) * half(0.779083729) + half(0.779083729);
    u_xlat16_3.x = dot(input.TEXCOORD4.xyz, input.TEXCOORD4.xyz);
    u_xlat16_3.x = rsqrt(u_xlat16_3.x);
    u_xlat16_3.xyz = u_xlat16_3.xxx * input.TEXCOORD4.xyz;
    u_xlat16_33 = dot(input.TEXCOORD1.xyz, input.TEXCOORD1.xyz);
    u_xlat16_33 = rsqrt(u_xlat16_33);
    u_xlat16_4.xyz = half3(u_xlat16_33) * input.TEXCOORD1.xyz;
    u_xlat0 = input.TEXCOORD5.yyyy * Globals.hlslcc_mtx4x4unity_WorldToLight[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_WorldToLight[0] * input.TEXCOORD5.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_WorldToLight[2] * input.TEXCOORD5.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + Globals.hlslcc_mtx4x4unity_WorldToLight[3];
    u_xlat5.xyz = (-input.TEXCOORD5.xyz) + Globals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat6.x = Globals.hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat6.y = Globals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat6.z = Globals.hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat31 = dot(u_xlat5.xyz, u_xlat6.xyz);
    u_xlat5.xyz = input.TEXCOORD5.xyz + (-Globals.unity_ShadowFadeCenterAndType.xyz);
    u_xlat5.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat5.x = sqrt(u_xlat5.x);
    u_xlat5.x = (-u_xlat31) + u_xlat5.x;
    u_xlat31 = Globals.unity_ShadowFadeCenterAndType.w * u_xlat5.x + u_xlat31;
    u_xlat31 = u_xlat31 * float(Globals._LightShadowData.z) + float(Globals._LightShadowData.w);
    u_xlat31 = clamp(u_xlat31, 0.0f, 1.0f);
    u_xlatb5 = u_xlat31<0.99000001;
    if(u_xlatb5){
        u_xlat5 = input.TEXCOORD5.yyyy * Globals.hlslcc_mtx4x4unity_WorldToShadow[1];
        u_xlat5 = Globals.hlslcc_mtx4x4unity_WorldToShadow[0] * input.TEXCOORD5.xxxx + u_xlat5;
        u_xlat5 = Globals.hlslcc_mtx4x4unity_WorldToShadow[2] * input.TEXCOORD5.zzzz + u_xlat5;
        u_xlat5 = u_xlat5 + Globals.hlslcc_mtx4x4unity_WorldToShadow[3];
        u_xlat5.xyz = u_xlat5.xyz / u_xlat5.www;
        u_xlat6.xyz = u_xlat5.xyz + Globals._ShadowOffsets[0].xyz;
        u_xlat6.x = float(_ShadowMapTexture.sample_compare(_mtl_xl_shadow_sampler, u_xlat6.xy, saturate(u_xlat6.z), level(0.0)));
        u_xlat7.xyz = u_xlat5.xyz + Globals._ShadowOffsets[1].xyz;
        u_xlat6.y = float(_ShadowMapTexture.sample_compare(_mtl_xl_shadow_sampler, u_xlat7.xy, saturate(u_xlat7.z), level(0.0)));
        u_xlat7.xyz = u_xlat5.xyz + Globals._ShadowOffsets[2].xyz;
        u_xlat6.z = float(_ShadowMapTexture.sample_compare(_mtl_xl_shadow_sampler, u_xlat7.xy, saturate(u_xlat7.z), level(0.0)));
        u_xlat5.xyz = u_xlat5.xyz + Globals._ShadowOffsets[3].xyz;
        u_xlat6.w = float(_ShadowMapTexture.sample_compare(_mtl_xl_shadow_sampler, u_xlat5.xy, saturate(u_xlat5.z), level(0.0)));
        u_xlat5.x = dot(u_xlat6, float4(0.25, 0.25, 0.25, 0.25));
        u_xlat16_15 = (-Globals._LightShadowData.x) + half(1.0);
        u_xlat5.x = u_xlat5.x * float(u_xlat16_15) + float(Globals._LightShadowData.x);
        u_xlat16_5 = half(u_xlat5.x);
    } else {
        u_xlat16_5 = half(1.0);
    }
    u_xlat16_33 = half(u_xlat31 + float(u_xlat16_5));
    u_xlat16_33 = clamp(u_xlat16_33, 0.0h, 1.0h);
    u_xlatb31 = 0.0<u_xlat0.z;
    u_xlat16_34 = (u_xlatb31) ? half(1.0) : half(0.0);
    u_xlat6.xy = u_xlat0.xy / u_xlat0.ww;
    u_xlat6.xy = u_xlat6.xy + float2(0.5, 0.5);
    u_xlat16_30 = _LightTexture0.sample(sampler_LightTexture0, u_xlat6.xy).w;
    u_xlat16_34 = u_xlat16_30 * u_xlat16_34;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat16_0.x = _LightTextureB0.sample(sampler_LightTextureB0, u_xlat0.xx).w;
    u_xlat16_34 = u_xlat16_0.x * u_xlat16_34;
    u_xlat16_33 = u_xlat16_33 * u_xlat16_34;
    u_xlat16_8.x = input.TEXCOORD2.w;
    u_xlat16_8.y = input.TEXCOORD3.w;
    u_xlat16_8.z = input.TEXCOORD4.w;
    u_xlat16_34 = dot(u_xlat16_8.xyz, u_xlat16_8.xyz);
    u_xlat16_34 = rsqrt(u_xlat16_34);
    u_xlat16_8.xyz = half3(u_xlat16_34) * u_xlat16_8.xyz;
    u_xlat16_9.xyz = half3(u_xlat16_33) * Globals._LightColor0.xyz;
    u_xlat16_33 = dot((-u_xlat16_4.xyz), u_xlat16_3.xyz);
    u_xlat16_33 = u_xlat16_33 + u_xlat16_33;
    u_xlat16_4.xyz = u_xlat16_3.xyz * (-half3(u_xlat16_33)) + (-u_xlat16_4.xyz);
    u_xlat16_3.x = dot(u_xlat16_3.xyz, u_xlat16_8.xyz);
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0h, 1.0h);
    u_xlat16_13 = dot(u_xlat16_4.xyz, u_xlat16_8.xyz);
    u_xlat16_13 = u_xlat16_13 * u_xlat16_13;
    u_xlat16_4.x = u_xlat16_13 * u_xlat16_13;
    u_xlat16_4.y = (-Globals._Glossiness) + half(1.0);
    u_xlat16_0.x = unity_NHxRoughness.sample(samplerunity_NHxRoughness, float2(u_xlat16_4.xy)).w;
    u_xlat16_0.x = u_xlat16_0.x * half(16.0);
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_0.xxx;
    u_xlat16_2.xyz = u_xlat16_1.xyz * half3(u_xlat16_32) + u_xlat16_2.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_9.xyz;
    output.SV_Target0.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}


-- Hardware tier variant: Tier 2
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"
Uses vertex data channel "TexCoord0"

Constant Buffer "Globals" (258 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 32
  Matrix4x4 unity_WorldToObject at 96
  Matrix4x4 unity_MatrixVP at 160
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 _MainTex_ST at 224
  Vector4 _DetailAlbedoMap_ST at 240
  ScalarHalf _UVSec at 256
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    float4 _DetailAlbedoMap_ST;
    half _UVSec;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    half3 NORMAL0 [[ attribute(1) ]] ;
    float2 TEXCOORD0 [[ attribute(2) ]] ;
    float2 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float2 TEXCOORD6 [[ user(TEXCOORD6) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool u_xlatb0;
    float4 u_xlat1;
    float u_xlat6;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0] * input.POSITION0.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2] * input.POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    output.mtl_Position = Globals.hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlatb0 = Globals._UVSec==half(0.0);
    u_xlat0.xy = (bool(u_xlatb0)) ? input.TEXCOORD0.xy : input.TEXCOORD1.xy;
    output.TEXCOORD0.zw = u_xlat0.xy * Globals._DetailAlbedoMap_ST.xy + Globals._DetailAlbedoMap_ST.zw;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy * Globals._MainTex_ST.xy + Globals._MainTex_ST.zw;
    u_xlat0.xyz = input.POSITION0.yyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * input.POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * input.POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * input.POSITION0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-Globals._WorldSpaceCameraPos.xyzx.xyz);
    output.TEXCOORD1.xyz = half3(u_xlat1.xyz);
    u_xlat1.xyw = (-u_xlat0.xyz) * Globals._WorldSpaceLightPos0.www + Globals._WorldSpaceLightPos0.xyz;
    output.TEXCOORD5.xyz = u_xlat0.xyz;
    output.TEXCOORD2.w = half(u_xlat1.x);
    output.TEXCOORD2.xyz = half3(0.0, 0.0, 0.0);
    output.TEXCOORD3.w = half(u_xlat1.y);
    output.TEXCOORD3.xyz = half3(0.0, 0.0, 0.0);
    u_xlat0.x = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = rsqrt(u_xlat6);
    u_xlat1.xyz = float3(u_xlat6) * u_xlat0.xyz;
    output.TEXCOORD4 = half4(u_xlat1);
    output.TEXCOORD6.xy = float2(0.0, 0.0);
    return output;
}


-- Hardware tier variant: Tier 2
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0 sampler slot 1
Set 2D Texture "_LightTexture0" to slot 1 sampler slot 2
Set 2D Texture "_LightTextureB0" to slot 2 sampler slot 3
Set 2D Texture "_ShadowMapTexture" to slot 3 sampler slot 0

Constant Buffer "Globals" (528 bytes) on slot 0 {
  Matrix4x4 unity_WorldToShadow[4] at 16
  Matrix4x4 unity_MatrixV at 304
  Matrix4x4 unity_WorldToLight at 464
  Vector3 _WorldSpaceCameraPos at 0
  VectorHalf4 _LightShadowData at 272
  Vector4 unity_ShadowFadeCenterAndType at 288
  VectorHalf4 _LightColor0 at 368
  Vector4 _ShadowOffsets[4] at 384
  VectorHalf4 _Color at 448
  ScalarHalf _Metallic at 456
  ScalarHalf _Glossiness at 458
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 hlslcc_mtx4x4unity_WorldToShadow[16];
    half4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    half4 _LightColor0;
    float4 _ShadowOffsets[4];
    half4 _Color;
    half _Metallic;
    half _Glossiness;
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(0) ]];
};

constexpr sampler _mtl_xl_shadow_sampler(address::clamp_to_edge, filter::linear, compare_func::greater_equal);
fragment Mtl_FragmentOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    sampler sampler_ShadowMapTexture [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_LightTexture0 [[ sampler (2) ]],
    sampler sampler_LightTextureB0 [[ sampler (3) ]],
    texture2d<half, access::sample > _MainTex [[ texture (0) ]] ,
    texture2d<half, access::sample > _LightTexture0 [[ texture (1) ]] ,
    texture2d<half, access::sample > _LightTextureB0 [[ texture (2) ]] ,
    depth2d<float, access::sample > _ShadowMapTexture [[ texture (3) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    float4 u_xlat4;
    half u_xlat16_4;
    bool u_xlatb4;
    float4 u_xlat5;
    float3 u_xlat6;
    half u_xlat16_7;
    half3 u_xlat16_8;
    half3 u_xlat16_9;
    half u_xlat16_10;
    half u_xlat16_13;
    half u_xlat16_14;
    half3 u_xlat16_17;
    half u_xlat16_20;
    half u_xlat16_23;
    half u_xlat16_30;
    float u_xlat31;
    bool u_xlatb31;
    half u_xlat16_32;
    half u_xlat16_33;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * Globals._Color.xyz;
    u_xlat16_2.xyz = Globals._Color.xyz * u_xlat16_0.xyz + half3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat16_2.xyz = half3(Globals._Metallic) * u_xlat16_2.xyz + half3(0.220916301, 0.220916301, 0.220916301);
    u_xlat16_32 = (-Globals._Metallic) * half(0.779083729) + half(0.779083729);
    u_xlat16_3.x = dot(input.TEXCOORD4.xyz, input.TEXCOORD4.xyz);
    u_xlat16_3.x = rsqrt(u_xlat16_3.x);
    u_xlat16_3.xyz = u_xlat16_3.xxx * input.TEXCOORD4.xyz;
    u_xlat16_33 = dot(input.TEXCOORD1.xyz, input.TEXCOORD1.xyz);
    u_xlat16_33 = rsqrt(u_xlat16_33);
    u_xlat0 = input.TEXCOORD5.yyyy * Globals.hlslcc_mtx4x4unity_WorldToLight[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_WorldToLight[0] * input.TEXCOORD5.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_WorldToLight[2] * input.TEXCOORD5.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + Globals.hlslcc_mtx4x4unity_WorldToLight[3];
    u_xlat4.xyz = (-input.TEXCOORD5.xyz) + Globals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat5.x = Globals.hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat5.y = Globals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat5.z = Globals.hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat31 = dot(u_xlat4.xyz, u_xlat5.xyz);
    u_xlat4.xyz = input.TEXCOORD5.xyz + (-Globals.unity_ShadowFadeCenterAndType.xyz);
    u_xlat4.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat4.x = sqrt(u_xlat4.x);
    u_xlat4.x = (-u_xlat31) + u_xlat4.x;
    u_xlat31 = Globals.unity_ShadowFadeCenterAndType.w * u_xlat4.x + u_xlat31;
    u_xlat31 = u_xlat31 * float(Globals._LightShadowData.z) + float(Globals._LightShadowData.w);
    u_xlat31 = clamp(u_xlat31, 0.0f, 1.0f);
    u_xlatb4 = u_xlat31<0.99000001;
    if(u_xlatb4){
        u_xlat4 = input.TEXCOORD5.yyyy * Globals.hlslcc_mtx4x4unity_WorldToShadow[1];
        u_xlat4 = Globals.hlslcc_mtx4x4unity_WorldToShadow[0] * input.TEXCOORD5.xxxx + u_xlat4;
        u_xlat4 = Globals.hlslcc_mtx4x4unity_WorldToShadow[2] * input.TEXCOORD5.zzzz + u_xlat4;
        u_xlat4 = u_xlat4 + Globals.hlslcc_mtx4x4unity_WorldToShadow[3];
        u_xlat4.xyz = u_xlat4.xyz / u_xlat4.www;
        u_xlat5.xyz = u_xlat4.xyz + Globals._ShadowOffsets[0].xyz;
        u_xlat5.x = float(_ShadowMapTexture.sample_compare(_mtl_xl_shadow_sampler, u_xlat5.xy, saturate(u_xlat5.z), level(0.0)));
        u_xlat6.xyz = u_xlat4.xyz + Globals._ShadowOffsets[1].xyz;
        u_xlat5.y = float(_ShadowMapTexture.sample_compare(_mtl_xl_shadow_sampler, u_xlat6.xy, saturate(u_xlat6.z), level(0.0)));
        u_xlat6.xyz = u_xlat4.xyz + Globals._ShadowOffsets[2].xyz;
        u_xlat5.z = float(_ShadowMapTexture.sample_compare(_mtl_xl_shadow_sampler, u_xlat6.xy, saturate(u_xlat6.z), level(0.0)));
        u_xlat4.xyz = u_xlat4.xyz + Globals._ShadowOffsets[3].xyz;
        u_xlat5.w = float(_ShadowMapTexture.sample_compare(_mtl_xl_shadow_sampler, u_xlat4.xy, saturate(u_xlat4.z), level(0.0)));
        u_xlat4.x = dot(u_xlat5, float4(0.25, 0.25, 0.25, 0.25));
        u_xlat16_14 = (-Globals._LightShadowData.x) + half(1.0);
        u_xlat4.x = u_xlat4.x * float(u_xlat16_14) + float(Globals._LightShadowData.x);
        u_xlat16_4 = half(u_xlat4.x);
    } else {
        u_xlat16_4 = half(1.0);
    }
    u_xlat16_7 = half(u_xlat31 + float(u_xlat16_4));
    u_xlat16_7 = clamp(u_xlat16_7, 0.0h, 1.0h);
    u_xlatb31 = 0.0<u_xlat0.z;
    u_xlat16_17.x = (u_xlatb31) ? half(1.0) : half(0.0);
    u_xlat5.xy = u_xlat0.xy / u_xlat0.ww;
    u_xlat5.xy = u_xlat5.xy + float2(0.5, 0.5);
    u_xlat16_30 = _LightTexture0.sample(sampler_LightTexture0, u_xlat5.xy).w;
    u_xlat16_17.x = u_xlat16_30 * u_xlat16_17.x;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat16_0.x = _LightTextureB0.sample(sampler_LightTextureB0, u_xlat0.xx).w;
    u_xlat16_17.x = u_xlat16_0.x * u_xlat16_17.x;
    u_xlat16_7 = u_xlat16_7 * u_xlat16_17.x;
    u_xlat16_8.x = input.TEXCOORD2.w;
    u_xlat16_8.y = input.TEXCOORD3.w;
    u_xlat16_8.z = input.TEXCOORD4.w;
    u_xlat16_17.x = dot(u_xlat16_8.xyz, u_xlat16_8.xyz);
    u_xlat16_17.x = rsqrt(u_xlat16_17.x);
    u_xlat16_17.xyz = u_xlat16_17.xxx * u_xlat16_8.xyz;
    u_xlat16_8.xyz = half3(u_xlat16_7) * Globals._LightColor0.xyz;
    u_xlat16_9.xyz = (-input.TEXCOORD1.xyz) * half3(u_xlat16_33) + u_xlat16_17.xyz;
    u_xlat16_33 = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
    u_xlat16_0.x = max(u_xlat16_33, half(0.00100000005));
    u_xlat16_33 = rsqrt(u_xlat16_0.x);
    u_xlat16_9.xyz = half3(u_xlat16_33) * u_xlat16_9.xyz;
    u_xlat16_33 = dot(u_xlat16_3.xyz, u_xlat16_17.xyz);
    u_xlat16_33 = clamp(u_xlat16_33, 0.0h, 1.0h);
    u_xlat16_3.x = dot(u_xlat16_3.xyz, u_xlat16_9.xyz);
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0h, 1.0h);
    u_xlat16_13 = dot(u_xlat16_17.xyz, u_xlat16_9.xyz);
    u_xlat16_13 = clamp(u_xlat16_13, 0.0h, 1.0h);
    u_xlat16_23 = (-Globals._Glossiness) + half(1.0);
    u_xlat16_7 = u_xlat16_23 * u_xlat16_23;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_0.x = u_xlat16_7 * u_xlat16_7 + half(-1.0);
    u_xlat16_0.x = u_xlat16_3.x * u_xlat16_0.x + half(1.00001001);
    u_xlat16_10 = max(u_xlat16_13, half(0.319999993));
    u_xlat16_20 = u_xlat16_23 * u_xlat16_23 + half(1.5);
    u_xlat16_10 = u_xlat16_20 * u_xlat16_10;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_10;
    u_xlat16_0.x = u_xlat16_7 / u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x + half(-9.99999975e-05);
    u_xlat16_3.x = max(u_xlat16_0.x, half(0.0));
    u_xlat16_3.x = min(u_xlat16_3.x, half(100.0));
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xxx;
    u_xlat16_2.xyz = u_xlat16_1.xyz * half3(u_xlat16_32) + u_xlat16_2.xyz;
    u_xlat16_2.xyz = u_xlat16_8.xyz * u_xlat16_2.xyz;
    output.SV_Target0.xyz = half3(u_xlat16_33) * u_xlat16_2.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}


-- Hardware tier variant: Tier 3
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"
Uses vertex data channel "TexCoord0"

Constant Buffer "Globals" (258 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 32
  Matrix4x4 unity_WorldToObject at 96
  Matrix4x4 unity_MatrixVP at 160
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 _MainTex_ST at 224
  Vector4 _DetailAlbedoMap_ST at 240
  ScalarHalf _UVSec at 256
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    float4 _DetailAlbedoMap_ST;
    half _UVSec;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    half3 NORMAL0 [[ attribute(1) ]] ;
    float2 TEXCOORD0 [[ attribute(2) ]] ;
    float2 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float2 TEXCOORD6 [[ user(TEXCOORD6) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool u_xlatb0;
    float4 u_xlat1;
    float u_xlat6;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0] * input.POSITION0.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2] * input.POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    output.mtl_Position = Globals.hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlatb0 = Globals._UVSec==half(0.0);
    u_xlat0.xy = (bool(u_xlatb0)) ? input.TEXCOORD0.xy : input.TEXCOORD1.xy;
    output.TEXCOORD0.zw = u_xlat0.xy * Globals._DetailAlbedoMap_ST.xy + Globals._DetailAlbedoMap_ST.zw;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy * Globals._MainTex_ST.xy + Globals._MainTex_ST.zw;
    u_xlat0.xyz = input.POSITION0.yyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * input.POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * input.POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * input.POSITION0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-Globals._WorldSpaceCameraPos.xyzx.xyz);
    output.TEXCOORD1.xyz = half3(u_xlat1.xyz);
    u_xlat1.xyw = (-u_xlat0.xyz) * Globals._WorldSpaceLightPos0.www + Globals._WorldSpaceLightPos0.xyz;
    output.TEXCOORD5.xyz = u_xlat0.xyz;
    output.TEXCOORD2.w = half(u_xlat1.x);
    output.TEXCOORD2.xyz = half3(0.0, 0.0, 0.0);
    output.TEXCOORD3.w = half(u_xlat1.y);
    output.TEXCOORD3.xyz = half3(0.0, 0.0, 0.0);
    u_xlat0.x = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = rsqrt(u_xlat6);
    u_xlat1.xyz = float3(u_xlat6) * u_xlat0.xyz;
    output.TEXCOORD4 = half4(u_xlat1);
    output.TEXCOORD6.xy = float2(0.0, 0.0);
    return output;
}


-- Hardware tier variant: Tier 3
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0 sampler slot 1
Set 2D Texture "_LightTexture0" to slot 1 sampler slot 2
Set 2D Texture "_LightTextureB0" to slot 2 sampler slot 3
Set 2D Texture "_ShadowMapTexture" to slot 3 sampler slot 0

Constant Buffer "Globals" (528 bytes) on slot 0 {
  Matrix4x4 unity_WorldToShadow[4] at 16
  Matrix4x4 unity_MatrixV at 304
  Matrix4x4 unity_WorldToLight at 464
  Vector3 _WorldSpaceCameraPos at 0
  VectorHalf4 _LightShadowData at 272
  Vector4 unity_ShadowFadeCenterAndType at 288
  VectorHalf4 _LightColor0 at 368
  Vector4 _ShadowOffsets[4] at 384
  VectorHalf4 _Color at 448
  ScalarHalf _Metallic at 456
  ScalarHalf _Glossiness at 458
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 hlslcc_mtx4x4unity_WorldToShadow[16];
    half4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    half4 _LightColor0;
    float4 _ShadowOffsets[4];
    half4 _Color;
    half _Metallic;
    half _Glossiness;
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(0) ]];
};

constexpr sampler _mtl_xl_shadow_sampler(address::clamp_to_edge, filter::linear, compare_func::greater_equal);
fragment Mtl_FragmentOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    sampler sampler_ShadowMapTexture [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_LightTexture0 [[ sampler (2) ]],
    sampler sampler_LightTextureB0 [[ sampler (3) ]],
    texture2d<half, access::sample > _MainTex [[ texture (0) ]] ,
    texture2d<half, access::sample > _LightTexture0 [[ texture (1) ]] ,
    texture2d<half, access::sample > _LightTextureB0 [[ texture (2) ]] ,
    depth2d<float, access::sample > _ShadowMapTexture [[ texture (3) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    float4 u_xlat4;
    half u_xlat16_4;
    bool u_xlatb4;
    float4 u_xlat5;
    float3 u_xlat6;
    half u_xlat16_7;
    half3 u_xlat16_8;
    half3 u_xlat16_9;
    half u_xlat16_10;
    half u_xlat16_13;
    half u_xlat16_14;
    half3 u_xlat16_17;
    half u_xlat16_20;
    half u_xlat16_23;
    half u_xlat16_30;
    float u_xlat31;
    bool u_xlatb31;
    half u_xlat16_32;
    half u_xlat16_33;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * Globals._Color.xyz;
    u_xlat16_2.xyz = Globals._Color.xyz * u_xlat16_0.xyz + half3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat16_2.xyz = half3(Globals._Metallic) * u_xlat16_2.xyz + half3(0.220916301, 0.220916301, 0.220916301);
    u_xlat16_32 = (-Globals._Metallic) * half(0.779083729) + half(0.779083729);
    u_xlat16_3.x = dot(input.TEXCOORD4.xyz, input.TEXCOORD4.xyz);
    u_xlat16_3.x = rsqrt(u_xlat16_3.x);
    u_xlat16_3.xyz = u_xlat16_3.xxx * input.TEXCOORD4.xyz;
    u_xlat16_33 = dot(input.TEXCOORD1.xyz, input.TEXCOORD1.xyz);
    u_xlat16_33 = rsqrt(u_xlat16_33);
    u_xlat0 = input.TEXCOORD5.yyyy * Globals.hlslcc_mtx4x4unity_WorldToLight[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_WorldToLight[0] * input.TEXCOORD5.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_WorldToLight[2] * input.TEXCOORD5.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + Globals.hlslcc_mtx4x4unity_WorldToLight[3];
    u_xlat4.xyz = (-input.TEXCOORD5.xyz) + Globals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat5.x = Globals.hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat5.y = Globals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat5.z = Globals.hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat31 = dot(u_xlat4.xyz, u_xlat5.xyz);
    u_xlat4.xyz = input.TEXCOORD5.xyz + (-Globals.unity_ShadowFadeCenterAndType.xyz);
    u_xlat4.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat4.x = sqrt(u_xlat4.x);
    u_xlat4.x = (-u_xlat31) + u_xlat4.x;
    u_xlat31 = Globals.unity_ShadowFadeCenterAndType.w * u_xlat4.x + u_xlat31;
    u_xlat31 = u_xlat31 * float(Globals._LightShadowData.z) + float(Globals._LightShadowData.w);
    u_xlat31 = clamp(u_xlat31, 0.0f, 1.0f);
    u_xlatb4 = u_xlat31<0.99000001;
    if(u_xlatb4){
        u_xlat4 = input.TEXCOORD5.yyyy * Globals.hlslcc_mtx4x4unity_WorldToShadow[1];
        u_xlat4 = Globals.hlslcc_mtx4x4unity_WorldToShadow[0] * input.TEXCOORD5.xxxx + u_xlat4;
        u_xlat4 = Globals.hlslcc_mtx4x4unity_WorldToShadow[2] * input.TEXCOORD5.zzzz + u_xlat4;
        u_xlat4 = u_xlat4 + Globals.hlslcc_mtx4x4unity_WorldToShadow[3];
        u_xlat4.xyz = u_xlat4.xyz / u_xlat4.www;
        u_xlat5.xyz = u_xlat4.xyz + Globals._ShadowOffsets[0].xyz;
        u_xlat5.x = float(_ShadowMapTexture.sample_compare(_mtl_xl_shadow_sampler, u_xlat5.xy, saturate(u_xlat5.z), level(0.0)));
        u_xlat6.xyz = u_xlat4.xyz + Globals._ShadowOffsets[1].xyz;
        u_xlat5.y = float(_ShadowMapTexture.sample_compare(_mtl_xl_shadow_sampler, u_xlat6.xy, saturate(u_xlat6.z), level(0.0)));
        u_xlat6.xyz = u_xlat4.xyz + Globals._ShadowOffsets[2].xyz;
        u_xlat5.z = float(_ShadowMapTexture.sample_compare(_mtl_xl_shadow_sampler, u_xlat6.xy, saturate(u_xlat6.z), level(0.0)));
        u_xlat4.xyz = u_xlat4.xyz + Globals._ShadowOffsets[3].xyz;
        u_xlat5.w = float(_ShadowMapTexture.sample_compare(_mtl_xl_shadow_sampler, u_xlat4.xy, saturate(u_xlat4.z), level(0.0)));
        u_xlat4.x = dot(u_xlat5, float4(0.25, 0.25, 0.25, 0.25));
        u_xlat16_14 = (-Globals._LightShadowData.x) + half(1.0);
        u_xlat4.x = u_xlat4.x * float(u_xlat16_14) + float(Globals._LightShadowData.x);
        u_xlat16_4 = half(u_xlat4.x);
    } else {
        u_xlat16_4 = half(1.0);
    }
    u_xlat16_7 = half(u_xlat31 + float(u_xlat16_4));
    u_xlat16_7 = clamp(u_xlat16_7, 0.0h, 1.0h);
    u_xlatb31 = 0.0<u_xlat0.z;
    u_xlat16_17.x = (u_xlatb31) ? half(1.0) : half(0.0);
    u_xlat5.xy = u_xlat0.xy / u_xlat0.ww;
    u_xlat5.xy = u_xlat5.xy + float2(0.5, 0.5);
    u_xlat16_30 = _LightTexture0.sample(sampler_LightTexture0, u_xlat5.xy).w;
    u_xlat16_17.x = u_xlat16_30 * u_xlat16_17.x;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat16_0.x = _LightTextureB0.sample(sampler_LightTextureB0, u_xlat0.xx).w;
    u_xlat16_17.x = u_xlat16_0.x * u_xlat16_17.x;
    u_xlat16_7 = u_xlat16_7 * u_xlat16_17.x;
    u_xlat16_8.x = input.TEXCOORD2.w;
    u_xlat16_8.y = input.TEXCOORD3.w;
    u_xlat16_8.z = input.TEXCOORD4.w;
    u_xlat16_17.x = dot(u_xlat16_8.xyz, u_xlat16_8.xyz);
    u_xlat16_17.x = rsqrt(u_xlat16_17.x);
    u_xlat16_17.xyz = u_xlat16_17.xxx * u_xlat16_8.xyz;
    u_xlat16_8.xyz = half3(u_xlat16_7) * Globals._LightColor0.xyz;
    u_xlat16_9.xyz = (-input.TEXCOORD1.xyz) * half3(u_xlat16_33) + u_xlat16_17.xyz;
    u_xlat16_33 = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
    u_xlat16_0.x = max(u_xlat16_33, half(0.00100000005));
    u_xlat16_33 = rsqrt(u_xlat16_0.x);
    u_xlat16_9.xyz = half3(u_xlat16_33) * u_xlat16_9.xyz;
    u_xlat16_33 = dot(u_xlat16_3.xyz, u_xlat16_17.xyz);
    u_xlat16_33 = clamp(u_xlat16_33, 0.0h, 1.0h);
    u_xlat16_3.x = dot(u_xlat16_3.xyz, u_xlat16_9.xyz);
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0h, 1.0h);
    u_xlat16_13 = dot(u_xlat16_17.xyz, u_xlat16_9.xyz);
    u_xlat16_13 = clamp(u_xlat16_13, 0.0h, 1.0h);
    u_xlat16_23 = (-Globals._Glossiness) + half(1.0);
    u_xlat16_7 = u_xlat16_23 * u_xlat16_23;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_0.x = u_xlat16_7 * u_xlat16_7 + half(-1.0);
    u_xlat16_0.x = u_xlat16_3.x * u_xlat16_0.x + half(1.00001001);
    u_xlat16_10 = max(u_xlat16_13, half(0.319999993));
    u_xlat16_20 = u_xlat16_23 * u_xlat16_23 + half(1.5);
    u_xlat16_10 = u_xlat16_20 * u_xlat16_10;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_10;
    u_xlat16_0.x = u_xlat16_7 / u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x + half(-9.99999975e-05);
    u_xlat16_3.x = max(u_xlat16_0.x, half(0.0));
    u_xlat16_3.x = min(u_xlat16_3.x, half(100.0));
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xxx;
    u_xlat16_2.xyz = u_xlat16_1.xyz * half3(u_xlat16_32) + u_xlat16_2.xyz;
    u_xlat16_2.xyz = u_xlat16_8.xyz * u_xlat16_2.xyz;
    output.SV_Target0.xyz = half3(u_xlat16_33) * u_xlat16_2.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}


-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"
Uses vertex data channel "TexCoord0"

Constant Buffer "Globals" (258 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 32
  Matrix4x4 unity_WorldToObject at 96
  Matrix4x4 unity_MatrixVP at 160
  Vector3 _WorldSpaceCameraPos at 0
  VectorHalf4 _WorldSpaceLightPos0 at 16
  Vector4 _MainTex_ST at 224
  Vector4 _DetailAlbedoMap_ST at 240
  ScalarHalf _UVSec at 256
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    half4 _WorldSpaceLightPos0;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    float4 _DetailAlbedoMap_ST;
    half _UVSec;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    half3 NORMAL0 [[ attribute(1) ]] ;
    float2 TEXCOORD0 [[ attribute(2) ]] ;
    float2 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float2 TEXCOORD6 [[ user(TEXCOORD6) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool u_xlatb0;
    float4 u_xlat1;
    float u_xlat6;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0] * input.POSITION0.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2] * input.POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    output.mtl_Position = Globals.hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlatb0 = Globals._UVSec==half(0.0);
    u_xlat0.xy = (bool(u_xlatb0)) ? input.TEXCOORD0.xy : input.TEXCOORD1.xy;
    output.TEXCOORD0.zw = u_xlat0.xy * Globals._DetailAlbedoMap_ST.xy + Globals._DetailAlbedoMap_ST.zw;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy * Globals._MainTex_ST.xy + Globals._MainTex_ST.zw;
    u_xlat0.xyz = input.POSITION0.yyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * input.POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * input.POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * input.POSITION0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-Globals._WorldSpaceCameraPos.xyzx.xyz);
    output.TEXCOORD1.xyz = half3(u_xlat1.xyz);
    u_xlat1.xyw = (-u_xlat0.xyz) * float3(Globals._WorldSpaceLightPos0.www) + float3(Globals._WorldSpaceLightPos0.xyz);
    output.TEXCOORD5.xyz = u_xlat0.xyz;
    output.TEXCOORD2.w = half(u_xlat1.x);
    output.TEXCOORD2.xyz = half3(0.0, 0.0, 0.0);
    output.TEXCOORD3.w = half(u_xlat1.y);
    output.TEXCOORD3.xyz = half3(0.0, 0.0, 0.0);
    u_xlat0.x = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = rsqrt(u_xlat6);
    u_xlat1.xyz = float3(u_xlat6) * u_xlat0.xyz;
    output.TEXCOORD4 = half4(u_xlat1);
    output.TEXCOORD6.xy = float2(0.0, 0.0);
    return output;
}


-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0 sampler slot 1
Set 2D Texture "unity_NHxRoughness" to slot 1 sampler slot 0
Set 2D Texture "_ShadowMapTexture" to slot 2

Constant Buffer "Globals" (388 bytes) on slot 0 {
  Matrix4x4 unity_WorldToShadow[4] at 16
  Matrix4x4 unity_MatrixV at 304
  Vector3 _WorldSpaceCameraPos at 0
  VectorHalf4 _LightShadowData at 272
  Vector4 unity_ShadowFadeCenterAndType at 288
  VectorHalf4 _LightColor0 at 368
  VectorHalf4 _Color at 376
  ScalarHalf _Metallic at 384
  ScalarHalf _Glossiness at 386
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 hlslcc_mtx4x4unity_WorldToShadow[16];
    half4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    half4 _LightColor0;
    half4 _Color;
    half _Metallic;
    half _Glossiness;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(0) ]];
};

constexpr sampler _mtl_xl_shadow_sampler(address::clamp_to_edge, filter::linear, compare_func::greater_equal);
fragment Mtl_FragmentOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    sampler samplerunity_NHxRoughness [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_ShadowMapTexture [[ sampler (2) ]],
    texture2d<half, access::sample > _MainTex [[ texture (0) ]] ,
    texture2d<half, access::sample > unity_NHxRoughness [[ texture (1) ]] ,
    depth2d<float, access::sample > _ShadowMapTexture [[ texture (2) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half4 u_xlat16_0;
    half3 u_xlat16_1;
    half3 u_xlat16_2;
    float3 u_xlat3;
    half u_xlat16_3;
    float3 u_xlat4;
    half u_xlat16_5;
    float3 u_xlat8;
    half3 u_xlat16_8;
    half u_xlat16_15;
    u_xlat16_0.x = dot(input.TEXCOORD1.xyz, input.TEXCOORD1.xyz);
    u_xlat16_0.x = rsqrt(u_xlat16_0.x);
    u_xlat16_0.xyz = u_xlat16_0.xxx * input.TEXCOORD1.xyz;
    u_xlat16_15 = dot(input.TEXCOORD4.xyz, input.TEXCOORD4.xyz);
    u_xlat16_15 = rsqrt(u_xlat16_15);
    u_xlat16_1.xyz = half3(u_xlat16_15) * input.TEXCOORD4.xyz;
    u_xlat16_15 = dot((-u_xlat16_0.xyz), u_xlat16_1.xyz);
    u_xlat16_15 = u_xlat16_15 + u_xlat16_15;
    u_xlat16_0.xyz = u_xlat16_1.xyz * (-half3(u_xlat16_15)) + (-u_xlat16_0.xyz);
    u_xlat16_2.x = input.TEXCOORD2.w;
    u_xlat16_2.y = input.TEXCOORD3.w;
    u_xlat16_2.z = input.TEXCOORD4.w;
    u_xlat16_0.x = dot(u_xlat16_0.xyz, u_xlat16_2.xyz);
    u_xlat16_5 = dot(u_xlat16_1.xyz, u_xlat16_2.xyz);
    u_xlat16_5 = clamp(u_xlat16_5, 0.0h, 1.0h);
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_1.x = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_1.y = (-Globals._Glossiness) + half(1.0);
    u_xlat16_3 = unity_NHxRoughness.sample(samplerunity_NHxRoughness, float2(u_xlat16_1.xy)).w;
    u_xlat16_3 = u_xlat16_3 * half(16.0);
    u_xlat16_8.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_0.xzw = Globals._Color.xyz * u_xlat16_8.xyz + half3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat16_8.xyz = u_xlat16_8.xyz * Globals._Color.xyz;
    u_xlat16_0.xzw = half3(Globals._Metallic) * u_xlat16_0.xzw + half3(0.220916301, 0.220916301, 0.220916301);
    u_xlat16_0.xzw = u_xlat16_0.xzw * half3(u_xlat16_3);
    u_xlat16_1.x = (-Globals._Metallic) * half(0.779083729) + half(0.779083729);
    u_xlat16_0.xzw = u_xlat16_8.xyz * u_xlat16_1.xxx + u_xlat16_0.xzw;
    u_xlat3.xyz = input.TEXCOORD5.xyz + (-Globals.unity_ShadowFadeCenterAndType.xyz);
    u_xlat3.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat3.x = sqrt(u_xlat3.x);
    u_xlat8.xyz = (-input.TEXCOORD5.xyz) + Globals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat4.x = Globals.hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat4.y = Globals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.z = Globals.hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat8.x = dot(u_xlat8.xyz, u_xlat4.xyz);
    u_xlat3.x = (-u_xlat8.x) + u_xlat3.x;
    u_xlat3.x = Globals.unity_ShadowFadeCenterAndType.w * u_xlat3.x + u_xlat8.x;
    u_xlat3.x = u_xlat3.x * float(Globals._LightShadowData.z) + float(Globals._LightShadowData.w);
    u_xlat3.x = clamp(u_xlat3.x, 0.0f, 1.0f);
    u_xlat8.xyz = input.TEXCOORD5.yyy * Globals.hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
    u_xlat8.xyz = Globals.hlslcc_mtx4x4unity_WorldToShadow[0].xyz * input.TEXCOORD5.xxx + u_xlat8.xyz;
    u_xlat8.xyz = Globals.hlslcc_mtx4x4unity_WorldToShadow[2].xyz * input.TEXCOORD5.zzz + u_xlat8.xyz;
    u_xlat8.xyz = u_xlat8.xyz + Globals.hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
    u_xlat16_8.x = _ShadowMapTexture.sample_compare(_mtl_xl_shadow_sampler, u_xlat8.xy, saturate(u_xlat8.z), level(0.0));
    u_xlat16_1.x = (-Globals._LightShadowData.x) + half(1.0);
    u_xlat16_1.x = u_xlat16_8.x * u_xlat16_1.x + Globals._LightShadowData.x;
    u_xlat16_1.x = half(u_xlat3.x + float(u_xlat16_1.x));
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0h, 1.0h);
    u_xlat16_1.xyz = u_xlat16_1.xxx * Globals._LightColor0.xyz;
    u_xlat16_1.xyz = half3(u_xlat16_5) * u_xlat16_1.xyz;
    output.SV_Target0.xyz = u_xlat16_0.xzw * u_xlat16_1.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}


-- Hardware tier variant: Tier 2
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"
Uses vertex data channel "TexCoord0"

Constant Buffer "Globals" (258 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 32
  Matrix4x4 unity_WorldToObject at 96
  Matrix4x4 unity_MatrixVP at 160
  Vector3 _WorldSpaceCameraPos at 0
  VectorHalf4 _WorldSpaceLightPos0 at 16
  Vector4 _MainTex_ST at 224
  Vector4 _DetailAlbedoMap_ST at 240
  ScalarHalf _UVSec at 256
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    half4 _WorldSpaceLightPos0;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    float4 _DetailAlbedoMap_ST;
    half _UVSec;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    half3 NORMAL0 [[ attribute(1) ]] ;
    float2 TEXCOORD0 [[ attribute(2) ]] ;
    float2 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float2 TEXCOORD6 [[ user(TEXCOORD6) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool u_xlatb0;
    float4 u_xlat1;
    float u_xlat6;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0] * input.POSITION0.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2] * input.POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    output.mtl_Position = Globals.hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlatb0 = Globals._UVSec==half(0.0);
    u_xlat0.xy = (bool(u_xlatb0)) ? input.TEXCOORD0.xy : input.TEXCOORD1.xy;
    output.TEXCOORD0.zw = u_xlat0.xy * Globals._DetailAlbedoMap_ST.xy + Globals._DetailAlbedoMap_ST.zw;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy * Globals._MainTex_ST.xy + Globals._MainTex_ST.zw;
    u_xlat0.xyz = input.POSITION0.yyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * input.POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * input.POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * input.POSITION0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-Globals._WorldSpaceCameraPos.xyzx.xyz);
    output.TEXCOORD1.xyz = half3(u_xlat1.xyz);
    u_xlat1.xyw = (-u_xlat0.xyz) * float3(Globals._WorldSpaceLightPos0.www) + float3(Globals._WorldSpaceLightPos0.xyz);
    output.TEXCOORD5.xyz = u_xlat0.xyz;
    output.TEXCOORD2.w = half(u_xlat1.x);
    output.TEXCOORD2.xyz = half3(0.0, 0.0, 0.0);
    output.TEXCOORD3.w = half(u_xlat1.y);
    output.TEXCOORD3.xyz = half3(0.0, 0.0, 0.0);
    u_xlat0.x = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = rsqrt(u_xlat6);
    u_xlat1.xyz = float3(u_xlat6) * u_xlat0.xyz;
    output.TEXCOORD4 = half4(u_xlat1);
    output.TEXCOORD6.xy = float2(0.0, 0.0);
    return output;
}


-- Hardware tier variant: Tier 2
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0
Set 2D Texture "_ShadowMapTexture" to slot 1

Constant Buffer "Globals" (388 bytes) on slot 0 {
  Matrix4x4 unity_WorldToShadow[4] at 16
  Matrix4x4 unity_MatrixV at 304
  Vector3 _WorldSpaceCameraPos at 0
  VectorHalf4 _LightShadowData at 272
  Vector4 unity_ShadowFadeCenterAndType at 288
  VectorHalf4 _LightColor0 at 368
  VectorHalf4 _Color at 376
  ScalarHalf _Metallic at 384
  ScalarHalf _Glossiness at 386
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 hlslcc_mtx4x4unity_WorldToShadow[16];
    half4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    half4 _LightColor0;
    half4 _Color;
    half _Metallic;
    half _Glossiness;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(0) ]];
};

constexpr sampler _mtl_xl_shadow_sampler(address::clamp_to_edge, filter::linear, compare_func::greater_equal);
fragment Mtl_FragmentOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_ShadowMapTexture [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture (0) ]] ,
    depth2d<float, access::sample > _ShadowMapTexture [[ texture (1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    float3 u_xlat6;
    half u_xlat16_6;
    half3 u_xlat16_9;
    half u_xlat16_20;
    half u_xlat16_21;
    u_xlat0.xyz = input.TEXCOORD5.xyz + (-Globals.unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat6.xyz = (-input.TEXCOORD5.xyz) + Globals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat1.x = Globals.hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = Globals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = Globals.hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat6.x = dot(u_xlat6.xyz, u_xlat1.xyz);
    u_xlat0.x = (-u_xlat6.x) + u_xlat0.x;
    u_xlat0.x = Globals.unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat6.x;
    u_xlat0.x = u_xlat0.x * float(Globals._LightShadowData.z) + float(Globals._LightShadowData.w);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat6.xyz = input.TEXCOORD5.yyy * Globals.hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
    u_xlat6.xyz = Globals.hlslcc_mtx4x4unity_WorldToShadow[0].xyz * input.TEXCOORD5.xxx + u_xlat6.xyz;
    u_xlat6.xyz = Globals.hlslcc_mtx4x4unity_WorldToShadow[2].xyz * input.TEXCOORD5.zzz + u_xlat6.xyz;
    u_xlat6.xyz = u_xlat6.xyz + Globals.hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
    u_xlat16_6 = _ShadowMapTexture.sample_compare(_mtl_xl_shadow_sampler, u_xlat6.xy, saturate(u_xlat6.z), level(0.0));
    u_xlat16_2.x = (-Globals._LightShadowData.x) + half(1.0);
    u_xlat16_2.x = u_xlat16_6 * u_xlat16_2.x + Globals._LightShadowData.x;
    u_xlat16_2.x = half(u_xlat0.x + float(u_xlat16_2.x));
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0h, 1.0h);
    u_xlat16_2.xyz = u_xlat16_2.xxx * Globals._LightColor0.xyz;
    u_xlat16_20 = dot(input.TEXCOORD1.xyz, input.TEXCOORD1.xyz);
    u_xlat16_20 = rsqrt(u_xlat16_20);
    u_xlat16_3.x = input.TEXCOORD2.w;
    u_xlat16_3.y = input.TEXCOORD3.w;
    u_xlat16_3.z = input.TEXCOORD4.w;
    u_xlat16_4.xyz = (-input.TEXCOORD1.xyz) * half3(u_xlat16_20) + u_xlat16_3.xyz;
    u_xlat16_20 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
    u_xlat16_0.x = max(u_xlat16_20, half(0.00100000005));
    u_xlat16_20 = rsqrt(u_xlat16_0.x);
    u_xlat16_4.xyz = half3(u_xlat16_20) * u_xlat16_4.xyz;
    u_xlat16_20 = dot(u_xlat16_3.xyz, u_xlat16_4.xyz);
    u_xlat16_20 = clamp(u_xlat16_20, 0.0h, 1.0h);
    u_xlat16_0.x = max(u_xlat16_20, half(0.319999993));
    u_xlat16_20 = (-Globals._Glossiness) + half(1.0);
    u_xlat16_6 = u_xlat16_20 * u_xlat16_20 + half(1.5);
    u_xlat16_20 = u_xlat16_20 * u_xlat16_20;
    u_xlat16_0.x = u_xlat16_6 * u_xlat16_0.x;
    u_xlat16_21 = dot(input.TEXCOORD4.xyz, input.TEXCOORD4.xyz);
    u_xlat16_21 = rsqrt(u_xlat16_21);
    u_xlat16_5.xyz = half3(u_xlat16_21) * input.TEXCOORD4.xyz;
    u_xlat16_21 = dot(u_xlat16_5.xyz, u_xlat16_4.xyz);
    u_xlat16_21 = clamp(u_xlat16_21, 0.0h, 1.0h);
    u_xlat16_3.x = dot(u_xlat16_5.xyz, u_xlat16_3.xyz);
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0h, 1.0h);
    u_xlat16_9.x = u_xlat16_21 * u_xlat16_21;
    u_xlat16_6 = u_xlat16_20 * u_xlat16_20 + half(-1.0);
    u_xlat16_6 = u_xlat16_9.x * u_xlat16_6 + half(1.00001001);
    u_xlat16_0.x = u_xlat16_6 * u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_20 / u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x + half(-9.99999975e-05);
    u_xlat16_20 = max(u_xlat16_0.x, half(0.0));
    u_xlat16_20 = min(u_xlat16_20, half(100.0));
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_9.xyz = Globals._Color.xyz * u_xlat16_0.xyz + half3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat16_0.xyz = u_xlat16_0.xyz * Globals._Color.xyz;
    u_xlat16_9.xyz = half3(Globals._Metallic) * u_xlat16_9.xyz + half3(0.220916301, 0.220916301, 0.220916301);
    u_xlat16_9.xyz = half3(u_xlat16_20) * u_xlat16_9.xyz;
    u_xlat16_20 = (-Globals._Metallic) * half(0.779083729) + half(0.779083729);
    u_xlat16_9.xyz = u_xlat16_0.xyz * half3(u_xlat16_20) + u_xlat16_9.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_9.xyz;
    output.SV_Target0.xyz = u_xlat16_3.xxx * u_xlat16_2.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}


-- Hardware tier variant: Tier 3
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"
Uses vertex data channel "TexCoord0"

Constant Buffer "Globals" (258 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 32
  Matrix4x4 unity_WorldToObject at 96
  Matrix4x4 unity_MatrixVP at 160
  Vector3 _WorldSpaceCameraPos at 0
  VectorHalf4 _WorldSpaceLightPos0 at 16
  Vector4 _MainTex_ST at 224
  Vector4 _DetailAlbedoMap_ST at 240
  ScalarHalf _UVSec at 256
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    half4 _WorldSpaceLightPos0;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    float4 _DetailAlbedoMap_ST;
    half _UVSec;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    half3 NORMAL0 [[ attribute(1) ]] ;
    float2 TEXCOORD0 [[ attribute(2) ]] ;
    float2 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float2 TEXCOORD6 [[ user(TEXCOORD6) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool u_xlatb0;
    float4 u_xlat1;
    float u_xlat6;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0] * input.POSITION0.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2] * input.POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    output.mtl_Position = Globals.hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlatb0 = Globals._UVSec==half(0.0);
    u_xlat0.xy = (bool(u_xlatb0)) ? input.TEXCOORD0.xy : input.TEXCOORD1.xy;
    output.TEXCOORD0.zw = u_xlat0.xy * Globals._DetailAlbedoMap_ST.xy + Globals._DetailAlbedoMap_ST.zw;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy * Globals._MainTex_ST.xy + Globals._MainTex_ST.zw;
    u_xlat0.xyz = input.POSITION0.yyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * input.POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * input.POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * input.POSITION0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-Globals._WorldSpaceCameraPos.xyzx.xyz);
    output.TEXCOORD1.xyz = half3(u_xlat1.xyz);
    u_xlat1.xyw = (-u_xlat0.xyz) * float3(Globals._WorldSpaceLightPos0.www) + float3(Globals._WorldSpaceLightPos0.xyz);
    output.TEXCOORD5.xyz = u_xlat0.xyz;
    output.TEXCOORD2.w = half(u_xlat1.x);
    output.TEXCOORD2.xyz = half3(0.0, 0.0, 0.0);
    output.TEXCOORD3.w = half(u_xlat1.y);
    output.TEXCOORD3.xyz = half3(0.0, 0.0, 0.0);
    u_xlat0.x = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = rsqrt(u_xlat6);
    u_xlat1.xyz = float3(u_xlat6) * u_xlat0.xyz;
    output.TEXCOORD4 = half4(u_xlat1);
    output.TEXCOORD6.xy = float2(0.0, 0.0);
    return output;
}


-- Hardware tier variant: Tier 3
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0
Set 2D Texture "_ShadowMapTexture" to slot 1

Constant Buffer "Globals" (388 bytes) on slot 0 {
  Matrix4x4 unity_WorldToShadow[4] at 16
  Matrix4x4 unity_MatrixV at 304
  Vector3 _WorldSpaceCameraPos at 0
  VectorHalf4 _LightShadowData at 272
  Vector4 unity_ShadowFadeCenterAndType at 288
  VectorHalf4 _LightColor0 at 368
  VectorHalf4 _Color at 376
  ScalarHalf _Metallic at 384
  ScalarHalf _Glossiness at 386
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 hlslcc_mtx4x4unity_WorldToShadow[16];
    half4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    half4 _LightColor0;
    half4 _Color;
    half _Metallic;
    half _Glossiness;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(0) ]];
};

constexpr sampler _mtl_xl_shadow_sampler(address::clamp_to_edge, filter::linear, compare_func::greater_equal);
fragment Mtl_FragmentOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_ShadowMapTexture [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture (0) ]] ,
    depth2d<float, access::sample > _ShadowMapTexture [[ texture (1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    float3 u_xlat6;
    half u_xlat16_6;
    half3 u_xlat16_9;
    half u_xlat16_20;
    half u_xlat16_21;
    u_xlat0.xyz = input.TEXCOORD5.xyz + (-Globals.unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat6.xyz = (-input.TEXCOORD5.xyz) + Globals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat1.x = Globals.hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = Globals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = Globals.hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat6.x = dot(u_xlat6.xyz, u_xlat1.xyz);
    u_xlat0.x = (-u_xlat6.x) + u_xlat0.x;
    u_xlat0.x = Globals.unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat6.x;
    u_xlat0.x = u_xlat0.x * float(Globals._LightShadowData.z) + float(Globals._LightShadowData.w);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat6.xyz = input.TEXCOORD5.yyy * Globals.hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
    u_xlat6.xyz = Globals.hlslcc_mtx4x4unity_WorldToShadow[0].xyz * input.TEXCOORD5.xxx + u_xlat6.xyz;
    u_xlat6.xyz = Globals.hlslcc_mtx4x4unity_WorldToShadow[2].xyz * input.TEXCOORD5.zzz + u_xlat6.xyz;
    u_xlat6.xyz = u_xlat6.xyz + Globals.hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
    u_xlat16_6 = _ShadowMapTexture.sample_compare(_mtl_xl_shadow_sampler, u_xlat6.xy, saturate(u_xlat6.z), level(0.0));
    u_xlat16_2.x = (-Globals._LightShadowData.x) + half(1.0);
    u_xlat16_2.x = u_xlat16_6 * u_xlat16_2.x + Globals._LightShadowData.x;
    u_xlat16_2.x = half(u_xlat0.x + float(u_xlat16_2.x));
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0h, 1.0h);
    u_xlat16_2.xyz = u_xlat16_2.xxx * Globals._LightColor0.xyz;
    u_xlat16_20 = dot(input.TEXCOORD1.xyz, input.TEXCOORD1.xyz);
    u_xlat16_20 = rsqrt(u_xlat16_20);
    u_xlat16_3.x = input.TEXCOORD2.w;
    u_xlat16_3.y = input.TEXCOORD3.w;
    u_xlat16_3.z = input.TEXCOORD4.w;
    u_xlat16_4.xyz = (-input.TEXCOORD1.xyz) * half3(u_xlat16_20) + u_xlat16_3.xyz;
    u_xlat16_20 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
    u_xlat16_0.x = max(u_xlat16_20, half(0.00100000005));
    u_xlat16_20 = rsqrt(u_xlat16_0.x);
    u_xlat16_4.xyz = half3(u_xlat16_20) * u_xlat16_4.xyz;
    u_xlat16_20 = dot(u_xlat16_3.xyz, u_xlat16_4.xyz);
    u_xlat16_20 = clamp(u_xlat16_20, 0.0h, 1.0h);
    u_xlat16_0.x = max(u_xlat16_20, half(0.319999993));
    u_xlat16_20 = (-Globals._Glossiness) + half(1.0);
    u_xlat16_6 = u_xlat16_20 * u_xlat16_20 + half(1.5);
    u_xlat16_20 = u_xlat16_20 * u_xlat16_20;
    u_xlat16_0.x = u_xlat16_6 * u_xlat16_0.x;
    u_xlat16_21 = dot(input.TEXCOORD4.xyz, input.TEXCOORD4.xyz);
    u_xlat16_21 = rsqrt(u_xlat16_21);
    u_xlat16_5.xyz = half3(u_xlat16_21) * input.TEXCOORD4.xyz;
    u_xlat16_21 = dot(u_xlat16_5.xyz, u_xlat16_4.xyz);
    u_xlat16_21 = clamp(u_xlat16_21, 0.0h, 1.0h);
    u_xlat16_3.x = dot(u_xlat16_5.xyz, u_xlat16_3.xyz);
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0h, 1.0h);
    u_xlat16_9.x = u_xlat16_21 * u_xlat16_21;
    u_xlat16_6 = u_xlat16_20 * u_xlat16_20 + half(-1.0);
    u_xlat16_6 = u_xlat16_9.x * u_xlat16_6 + half(1.00001001);
    u_xlat16_0.x = u_xlat16_6 * u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_20 / u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x + half(-9.99999975e-05);
    u_xlat16_20 = max(u_xlat16_0.x, half(0.0));
    u_xlat16_20 = min(u_xlat16_20, half(100.0));
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_9.xyz = Globals._Color.xyz * u_xlat16_0.xyz + half3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat16_0.xyz = u_xlat16_0.xyz * Globals._Color.xyz;
    u_xlat16_9.xyz = half3(Globals._Metallic) * u_xlat16_9.xyz + half3(0.220916301, 0.220916301, 0.220916301);
    u_xlat16_9.xyz = half3(u_xlat16_20) * u_xlat16_9.xyz;
    u_xlat16_20 = (-Globals._Metallic) * half(0.779083729) + half(0.779083729);
    u_xlat16_9.xyz = u_xlat16_0.xyz * half3(u_xlat16_20) + u_xlat16_9.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_9.xyz;
    output.SV_Target0.xyz = u_xlat16_3.xxx * u_xlat16_2.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}


//////////////////////////////////////////////////////
Keywords set in this variant: DIRECTIONAL_COOKIE SHADOWS_SCREEN 
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"
Uses vertex data channel "TexCoord0"

Constant Buffer "Globals" (258 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 32
  Matrix4x4 unity_WorldToObject at 96
  Matrix4x4 unity_MatrixVP at 160
  Vector3 _WorldSpaceCameraPos at 0
  VectorHalf4 _WorldSpaceLightPos0 at 16
  Vector4 _MainTex_ST at 224
  Vector4 _DetailAlbedoMap_ST at 240
  ScalarHalf _UVSec at 256
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    half4 _WorldSpaceLightPos0;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    float4 _DetailAlbedoMap_ST;
    half _UVSec;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    half3 NORMAL0 [[ attribute(1) ]] ;
    float2 TEXCOORD0 [[ attribute(2) ]] ;
    float2 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float2 TEXCOORD6 [[ user(TEXCOORD6) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool u_xlatb0;
    float4 u_xlat1;
    float u_xlat6;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0] * input.POSITION0.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2] * input.POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    output.mtl_Position = Globals.hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlatb0 = Globals._UVSec==half(0.0);
    u_xlat0.xy = (bool(u_xlatb0)) ? input.TEXCOORD0.xy : input.TEXCOORD1.xy;
    output.TEXCOORD0.zw = u_xlat0.xy * Globals._DetailAlbedoMap_ST.xy + Globals._DetailAlbedoMap_ST.zw;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy * Globals._MainTex_ST.xy + Globals._MainTex_ST.zw;
    u_xlat0.xyz = input.POSITION0.yyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * input.POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * input.POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * input.POSITION0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-Globals._WorldSpaceCameraPos.xyzx.xyz);
    output.TEXCOORD1.xyz = half3(u_xlat1.xyz);
    u_xlat1.xyw = (-u_xlat0.xyz) * float3(Globals._WorldSpaceLightPos0.www) + float3(Globals._WorldSpaceLightPos0.xyz);
    output.TEXCOORD5.xyz = u_xlat0.xyz;
    output.TEXCOORD2.w = half(u_xlat1.x);
    output.TEXCOORD2.xyz = half3(0.0, 0.0, 0.0);
    output.TEXCOORD3.w = half(u_xlat1.y);
    output.TEXCOORD3.xyz = half3(0.0, 0.0, 0.0);
    u_xlat0.x = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = rsqrt(u_xlat6);
    u_xlat1.xyz = float3(u_xlat6) * u_xlat0.xyz;
    output.TEXCOORD4 = half4(u_xlat1);
    output.TEXCOORD6.xy = float2(0.0, 0.0);
    return output;
}


-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0 sampler slot 1
Set 2D Texture "_LightTexture0" to slot 1 sampler slot 3
Set 2D Texture "unity_NHxRoughness" to slot 2 sampler slot 0
Set 2D Texture "_ShadowMapTexture" to slot 3 sampler slot 2

Constant Buffer "Globals" (464 bytes) on slot 0 {
  Matrix4x4 unity_WorldToShadow[4] at 16
  Matrix4x4 unity_MatrixV at 304
  Matrix4x4 unity_WorldToLight at 400
  Vector3 _WorldSpaceCameraPos at 0
  VectorHalf4 _LightShadowData at 272
  Vector4 unity_ShadowFadeCenterAndType at 288
  VectorHalf4 _LightColor0 at 368
  VectorHalf4 _Color at 376
  ScalarHalf _Metallic at 384
  ScalarHalf _Glossiness at 386
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 hlslcc_mtx4x4unity_WorldToShadow[16];
    half4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    half4 _LightColor0;
    half4 _Color;
    half _Metallic;
    half _Glossiness;
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(0) ]];
};

constexpr sampler _mtl_xl_shadow_sampler(address::clamp_to_edge, filter::linear, compare_func::greater_equal);
fragment Mtl_FragmentOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    sampler samplerunity_NHxRoughness [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_ShadowMapTexture [[ sampler (2) ]],
    sampler sampler_LightTexture0 [[ sampler (3) ]],
    texture2d<half, access::sample > _MainTex [[ texture (0) ]] ,
    texture2d<half, access::sample > _LightTexture0 [[ texture (1) ]] ,
    texture2d<half, access::sample > unity_NHxRoughness [[ texture (2) ]] ,
    depth2d<float, access::sample > _ShadowMapTexture [[ texture (3) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    float3 u_xlat6;
    half3 u_xlat16_6;
    half u_xlat16_20;
    u_xlat0.xyz = input.TEXCOORD5.xyz + (-Globals.unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat6.xyz = (-input.TEXCOORD5.xyz) + Globals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat1.x = Globals.hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = Globals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = Globals.hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat6.x = dot(u_xlat6.xyz, u_xlat1.xyz);
    u_xlat0.x = (-u_xlat6.x) + u_xlat0.x;
    u_xlat0.x = Globals.unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat6.x;
    u_xlat0.x = u_xlat0.x * float(Globals._LightShadowData.z) + float(Globals._LightShadowData.w);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat6.xyz = input.TEXCOORD5.yyy * Globals.hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
    u_xlat6.xyz = Globals.hlslcc_mtx4x4unity_WorldToShadow[0].xyz * input.TEXCOORD5.xxx + u_xlat6.xyz;
    u_xlat6.xyz = Globals.hlslcc_mtx4x4unity_WorldToShadow[2].xyz * input.TEXCOORD5.zzz + u_xlat6.xyz;
    u_xlat6.xyz = u_xlat6.xyz + Globals.hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
    u_xlat16_6.x = _ShadowMapTexture.sample_compare(_mtl_xl_shadow_sampler, u_xlat6.xy, saturate(u_xlat6.z), level(0.0));
    u_xlat16_2.x = (-Globals._LightShadowData.x) + half(1.0);
    u_xlat16_2.x = u_xlat16_6.x * u_xlat16_2.x + Globals._LightShadowData.x;
    u_xlat16_2.x = half(u_xlat0.x + float(u_xlat16_2.x));
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0h, 1.0h);
    u_xlat0.xy = input.TEXCOORD5.yy * Globals.hlslcc_mtx4x4unity_WorldToLight[1].xy;
    u_xlat0.xy = Globals.hlslcc_mtx4x4unity_WorldToLight[0].xy * input.TEXCOORD5.xx + u_xlat0.xy;
    u_xlat0.xy = Globals.hlslcc_mtx4x4unity_WorldToLight[2].xy * input.TEXCOORD5.zz + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy + Globals.hlslcc_mtx4x4unity_WorldToLight[3].xy;
    u_xlat16_0 = _LightTexture0.sample(sampler_LightTexture0, u_xlat0.xy).w;
    u_xlat16_0 = u_xlat16_2.x * u_xlat16_0;
    u_xlat16_2.xyz = half3(u_xlat16_0) * Globals._LightColor0.xyz;
    u_xlat16_20 = dot(input.TEXCOORD4.xyz, input.TEXCOORD4.xyz);
    u_xlat16_20 = rsqrt(u_xlat16_20);
    u_xlat16_3.xyz = half3(u_xlat16_20) * input.TEXCOORD4.xyz;
    u_xlat16_4.x = input.TEXCOORD2.w;
    u_xlat16_4.y = input.TEXCOORD3.w;
    u_xlat16_4.z = input.TEXCOORD4.w;
    u_xlat16_20 = dot(u_xlat16_3.xyz, u_xlat16_4.xyz);
    u_xlat16_20 = clamp(u_xlat16_20, 0.0h, 1.0h);
    u_xlat16_2.xyz = half3(u_xlat16_20) * u_xlat16_2.xyz;
    u_xlat16_20 = dot(input.TEXCOORD1.xyz, input.TEXCOORD1.xyz);
    u_xlat16_20 = rsqrt(u_xlat16_20);
    u_xlat16_5.xyz = half3(u_xlat16_20) * input.TEXCOORD1.xyz;
    u_xlat16_20 = dot((-u_xlat16_5.xyz), u_xlat16_3.xyz);
    u_xlat16_20 = u_xlat16_20 + u_xlat16_20;
    u_xlat16_3.xyz = u_xlat16_3.xyz * (-half3(u_xlat16_20)) + (-u_xlat16_5.xyz);
    u_xlat16_20 = dot(u_xlat16_3.xyz, u_xlat16_4.xyz);
    u_xlat16_20 = u_xlat16_20 * u_xlat16_20;
    u_xlat16_3.x = u_xlat16_20 * u_xlat16_20;
    u_xlat16_3.y = (-Globals._Glossiness) + half(1.0);
    u_xlat16_0 = unity_NHxRoughness.sample(samplerunity_NHxRoughness, float2(u_xlat16_3.xy)).w;
    u_xlat16_0 = u_xlat16_0 * half(16.0);
    u_xlat16_6.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_3.xyz = Globals._Color.xyz * u_xlat16_6.xyz + half3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat16_6.xyz = u_xlat16_6.xyz * Globals._Color.xyz;
    u_xlat16_3.xyz = half3(Globals._Metallic) * u_xlat16_3.xyz + half3(0.220916301, 0.220916301, 0.220916301);
    u_xlat16_3.xyz = half3(u_xlat16_0) * u_xlat16_3.xyz;
    u_xlat16_20 = (-Globals._Metallic) * half(0.779083729) + half(0.779083729);
    u_xlat16_3.xyz = u_xlat16_6.xyz * half3(u_xlat16_20) + u_xlat16_3.xyz;
    output.SV_Target0.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}


-- Hardware tier variant: Tier 2
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"
Uses vertex data channel "TexCoord0"

Constant Buffer "Globals" (258 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 32
  Matrix4x4 unity_WorldToObject at 96
  Matrix4x4 unity_MatrixVP at 160
  Vector3 _WorldSpaceCameraPos at 0
  VectorHalf4 _WorldSpaceLightPos0 at 16
  Vector4 _MainTex_ST at 224
  Vector4 _DetailAlbedoMap_ST at 240
  ScalarHalf _UVSec at 256
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    half4 _WorldSpaceLightPos0;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    float4 _DetailAlbedoMap_ST;
    half _UVSec;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    half3 NORMAL0 [[ attribute(1) ]] ;
    float2 TEXCOORD0 [[ attribute(2) ]] ;
    float2 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float2 TEXCOORD6 [[ user(TEXCOORD6) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool u_xlatb0;
    float4 u_xlat1;
    float u_xlat6;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0] * input.POSITION0.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2] * input.POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    output.mtl_Position = Globals.hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlatb0 = Globals._UVSec==half(0.0);
    u_xlat0.xy = (bool(u_xlatb0)) ? input.TEXCOORD0.xy : input.TEXCOORD1.xy;
    output.TEXCOORD0.zw = u_xlat0.xy * Globals._DetailAlbedoMap_ST.xy + Globals._DetailAlbedoMap_ST.zw;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy * Globals._MainTex_ST.xy + Globals._MainTex_ST.zw;
    u_xlat0.xyz = input.POSITION0.yyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * input.POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * input.POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * input.POSITION0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-Globals._WorldSpaceCameraPos.xyzx.xyz);
    output.TEXCOORD1.xyz = half3(u_xlat1.xyz);
    u_xlat1.xyw = (-u_xlat0.xyz) * float3(Globals._WorldSpaceLightPos0.www) + float3(Globals._WorldSpaceLightPos0.xyz);
    output.TEXCOORD5.xyz = u_xlat0.xyz;
    output.TEXCOORD2.w = half(u_xlat1.x);
    output.TEXCOORD2.xyz = half3(0.0, 0.0, 0.0);
    output.TEXCOORD3.w = half(u_xlat1.y);
    output.TEXCOORD3.xyz = half3(0.0, 0.0, 0.0);
    u_xlat0.x = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = rsqrt(u_xlat6);
    u_xlat1.xyz = float3(u_xlat6) * u_xlat0.xyz;
    output.TEXCOORD4 = half4(u_xlat1);
    output.TEXCOORD6.xy = float2(0.0, 0.0);
    return output;
}


-- Hardware tier variant: Tier 2
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0
Set 2D Texture "_LightTexture0" to slot 1 sampler slot 2
Set 2D Texture "_ShadowMapTexture" to slot 2 sampler slot 1

Constant Buffer "Globals" (464 bytes) on slot 0 {
  Matrix4x4 unity_WorldToShadow[4] at 16
  Matrix4x4 unity_MatrixV at 304
  Matrix4x4 unity_WorldToLight at 400
  Vector3 _WorldSpaceCameraPos at 0
  VectorHalf4 _LightShadowData at 272
  Vector4 unity_ShadowFadeCenterAndType at 288
  VectorHalf4 _LightColor0 at 368
  VectorHalf4 _Color at 376
  ScalarHalf _Metallic at 384
  ScalarHalf _Glossiness at 386
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 hlslcc_mtx4x4unity_WorldToShadow[16];
    half4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    half4 _LightColor0;
    half4 _Color;
    half _Metallic;
    half _Glossiness;
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(0) ]];
};

constexpr sampler _mtl_xl_shadow_sampler(address::clamp_to_edge, filter::linear, compare_func::greater_equal);
fragment Mtl_FragmentOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_ShadowMapTexture [[ sampler (1) ]],
    sampler sampler_LightTexture0 [[ sampler (2) ]],
    texture2d<half, access::sample > _MainTex [[ texture (0) ]] ,
    texture2d<half, access::sample > _LightTexture0 [[ texture (1) ]] ,
    depth2d<float, access::sample > _ShadowMapTexture [[ texture (2) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    float3 u_xlat6;
    half u_xlat16_6;
    half3 u_xlat16_9;
    half u_xlat16_20;
    half u_xlat16_21;
    u_xlat0.xyz = input.TEXCOORD5.xyz + (-Globals.unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat6.xyz = (-input.TEXCOORD5.xyz) + Globals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat1.x = Globals.hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = Globals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = Globals.hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat6.x = dot(u_xlat6.xyz, u_xlat1.xyz);
    u_xlat0.x = (-u_xlat6.x) + u_xlat0.x;
    u_xlat0.x = Globals.unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat6.x;
    u_xlat0.x = u_xlat0.x * float(Globals._LightShadowData.z) + float(Globals._LightShadowData.w);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat6.xyz = input.TEXCOORD5.yyy * Globals.hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
    u_xlat6.xyz = Globals.hlslcc_mtx4x4unity_WorldToShadow[0].xyz * input.TEXCOORD5.xxx + u_xlat6.xyz;
    u_xlat6.xyz = Globals.hlslcc_mtx4x4unity_WorldToShadow[2].xyz * input.TEXCOORD5.zzz + u_xlat6.xyz;
    u_xlat6.xyz = u_xlat6.xyz + Globals.hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
    u_xlat16_6 = _ShadowMapTexture.sample_compare(_mtl_xl_shadow_sampler, u_xlat6.xy, saturate(u_xlat6.z), level(0.0));
    u_xlat16_2.x = (-Globals._LightShadowData.x) + half(1.0);
    u_xlat16_2.x = u_xlat16_6 * u_xlat16_2.x + Globals._LightShadowData.x;
    u_xlat16_2.x = half(u_xlat0.x + float(u_xlat16_2.x));
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0h, 1.0h);
    u_xlat0.xy = input.TEXCOORD5.yy * Globals.hlslcc_mtx4x4unity_WorldToLight[1].xy;
    u_xlat0.xy = Globals.hlslcc_mtx4x4unity_WorldToLight[0].xy * input.TEXCOORD5.xx + u_xlat0.xy;
    u_xlat0.xy = Globals.hlslcc_mtx4x4unity_WorldToLight[2].xy * input.TEXCOORD5.zz + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy + Globals.hlslcc_mtx4x4unity_WorldToLight[3].xy;
    u_xlat16_0.x = _LightTexture0.sample(sampler_LightTexture0, u_xlat0.xy).w;
    u_xlat16_0.x = u_xlat16_2.x * u_xlat16_0.x;
    u_xlat16_2.xyz = u_xlat16_0.xxx * Globals._LightColor0.xyz;
    u_xlat16_20 = dot(input.TEXCOORD1.xyz, input.TEXCOORD1.xyz);
    u_xlat16_20 = rsqrt(u_xlat16_20);
    u_xlat16_3.x = input.TEXCOORD2.w;
    u_xlat16_3.y = input.TEXCOORD3.w;
    u_xlat16_3.z = input.TEXCOORD4.w;
    u_xlat16_4.xyz = (-input.TEXCOORD1.xyz) * half3(u_xlat16_20) + u_xlat16_3.xyz;
    u_xlat16_20 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
    u_xlat16_0.x = max(u_xlat16_20, half(0.00100000005));
    u_xlat16_20 = rsqrt(u_xlat16_0.x);
    u_xlat16_4.xyz = half3(u_xlat16_20) * u_xlat16_4.xyz;
    u_xlat16_20 = dot(u_xlat16_3.xyz, u_xlat16_4.xyz);
    u_xlat16_20 = clamp(u_xlat16_20, 0.0h, 1.0h);
    u_xlat16_0.x = max(u_xlat16_20, half(0.319999993));
    u_xlat16_20 = (-Globals._Glossiness) + half(1.0);
    u_xlat16_6 = u_xlat16_20 * u_xlat16_20 + half(1.5);
    u_xlat16_20 = u_xlat16_20 * u_xlat16_20;
    u_xlat16_0.x = u_xlat16_6 * u_xlat16_0.x;
    u_xlat16_21 = dot(input.TEXCOORD4.xyz, input.TEXCOORD4.xyz);
    u_xlat16_21 = rsqrt(u_xlat16_21);
    u_xlat16_5.xyz = half3(u_xlat16_21) * input.TEXCOORD4.xyz;
    u_xlat16_21 = dot(u_xlat16_5.xyz, u_xlat16_4.xyz);
    u_xlat16_21 = clamp(u_xlat16_21, 0.0h, 1.0h);
    u_xlat16_3.x = dot(u_xlat16_5.xyz, u_xlat16_3.xyz);
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0h, 1.0h);
    u_xlat16_9.x = u_xlat16_21 * u_xlat16_21;
    u_xlat16_6 = u_xlat16_20 * u_xlat16_20 + half(-1.0);
    u_xlat16_6 = u_xlat16_9.x * u_xlat16_6 + half(1.00001001);
    u_xlat16_0.x = u_xlat16_6 * u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_20 / u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x + half(-9.99999975e-05);
    u_xlat16_20 = max(u_xlat16_0.x, half(0.0));
    u_xlat16_20 = min(u_xlat16_20, half(100.0));
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_9.xyz = Globals._Color.xyz * u_xlat16_0.xyz + half3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat16_0.xyz = u_xlat16_0.xyz * Globals._Color.xyz;
    u_xlat16_9.xyz = half3(Globals._Metallic) * u_xlat16_9.xyz + half3(0.220916301, 0.220916301, 0.220916301);
    u_xlat16_9.xyz = half3(u_xlat16_20) * u_xlat16_9.xyz;
    u_xlat16_20 = (-Globals._Metallic) * half(0.779083729) + half(0.779083729);
    u_xlat16_9.xyz = u_xlat16_0.xyz * half3(u_xlat16_20) + u_xlat16_9.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_9.xyz;
    output.SV_Target0.xyz = u_xlat16_3.xxx * u_xlat16_2.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}


-- Hardware tier variant: Tier 3
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"
Uses vertex data channel "TexCoord0"

Constant Buffer "Globals" (258 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 32
  Matrix4x4 unity_WorldToObject at 96
  Matrix4x4 unity_MatrixVP at 160
  Vector3 _WorldSpaceCameraPos at 0
  VectorHalf4 _WorldSpaceLightPos0 at 16
  Vector4 _MainTex_ST at 224
  Vector4 _DetailAlbedoMap_ST at 240
  ScalarHalf _UVSec at 256
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    half4 _WorldSpaceLightPos0;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    float4 _DetailAlbedoMap_ST;
    half _UVSec;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    half3 NORMAL0 [[ attribute(1) ]] ;
    float2 TEXCOORD0 [[ attribute(2) ]] ;
    float2 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float2 TEXCOORD6 [[ user(TEXCOORD6) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool u_xlatb0;
    float4 u_xlat1;
    float u_xlat6;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0] * input.POSITION0.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2] * input.POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    output.mtl_Position = Globals.hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlatb0 = Globals._UVSec==half(0.0);
    u_xlat0.xy = (bool(u_xlatb0)) ? input.TEXCOORD0.xy : input.TEXCOORD1.xy;
    output.TEXCOORD0.zw = u_xlat0.xy * Globals._DetailAlbedoMap_ST.xy + Globals._DetailAlbedoMap_ST.zw;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy * Globals._MainTex_ST.xy + Globals._MainTex_ST.zw;
    u_xlat0.xyz = input.POSITION0.yyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * input.POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * input.POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * input.POSITION0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-Globals._WorldSpaceCameraPos.xyzx.xyz);
    output.TEXCOORD1.xyz = half3(u_xlat1.xyz);
    u_xlat1.xyw = (-u_xlat0.xyz) * float3(Globals._WorldSpaceLightPos0.www) + float3(Globals._WorldSpaceLightPos0.xyz);
    output.TEXCOORD5.xyz = u_xlat0.xyz;
    output.TEXCOORD2.w = half(u_xlat1.x);
    output.TEXCOORD2.xyz = half3(0.0, 0.0, 0.0);
    output.TEXCOORD3.w = half(u_xlat1.y);
    output.TEXCOORD3.xyz = half3(0.0, 0.0, 0.0);
    u_xlat0.x = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = rsqrt(u_xlat6);
    u_xlat1.xyz = float3(u_xlat6) * u_xlat0.xyz;
    output.TEXCOORD4 = half4(u_xlat1);
    output.TEXCOORD6.xy = float2(0.0, 0.0);
    return output;
}


-- Hardware tier variant: Tier 3
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0
Set 2D Texture "_LightTexture0" to slot 1 sampler slot 2
Set 2D Texture "_ShadowMapTexture" to slot 2 sampler slot 1

Constant Buffer "Globals" (464 bytes) on slot 0 {
  Matrix4x4 unity_WorldToShadow[4] at 16
  Matrix4x4 unity_MatrixV at 304
  Matrix4x4 unity_WorldToLight at 400
  Vector3 _WorldSpaceCameraPos at 0
  VectorHalf4 _LightShadowData at 272
  Vector4 unity_ShadowFadeCenterAndType at 288
  VectorHalf4 _LightColor0 at 368
  VectorHalf4 _Color at 376
  ScalarHalf _Metallic at 384
  ScalarHalf _Glossiness at 386
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 hlslcc_mtx4x4unity_WorldToShadow[16];
    half4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    half4 _LightColor0;
    half4 _Color;
    half _Metallic;
    half _Glossiness;
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(0) ]];
};

constexpr sampler _mtl_xl_shadow_sampler(address::clamp_to_edge, filter::linear, compare_func::greater_equal);
fragment Mtl_FragmentOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_ShadowMapTexture [[ sampler (1) ]],
    sampler sampler_LightTexture0 [[ sampler (2) ]],
    texture2d<half, access::sample > _MainTex [[ texture (0) ]] ,
    texture2d<half, access::sample > _LightTexture0 [[ texture (1) ]] ,
    depth2d<float, access::sample > _ShadowMapTexture [[ texture (2) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    float3 u_xlat6;
    half u_xlat16_6;
    half3 u_xlat16_9;
    half u_xlat16_20;
    half u_xlat16_21;
    u_xlat0.xyz = input.TEXCOORD5.xyz + (-Globals.unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat6.xyz = (-input.TEXCOORD5.xyz) + Globals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat1.x = Globals.hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = Globals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = Globals.hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat6.x = dot(u_xlat6.xyz, u_xlat1.xyz);
    u_xlat0.x = (-u_xlat6.x) + u_xlat0.x;
    u_xlat0.x = Globals.unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat6.x;
    u_xlat0.x = u_xlat0.x * float(Globals._LightShadowData.z) + float(Globals._LightShadowData.w);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat6.xyz = input.TEXCOORD5.yyy * Globals.hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
    u_xlat6.xyz = Globals.hlslcc_mtx4x4unity_WorldToShadow[0].xyz * input.TEXCOORD5.xxx + u_xlat6.xyz;
    u_xlat6.xyz = Globals.hlslcc_mtx4x4unity_WorldToShadow[2].xyz * input.TEXCOORD5.zzz + u_xlat6.xyz;
    u_xlat6.xyz = u_xlat6.xyz + Globals.hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
    u_xlat16_6 = _ShadowMapTexture.sample_compare(_mtl_xl_shadow_sampler, u_xlat6.xy, saturate(u_xlat6.z), level(0.0));
    u_xlat16_2.x = (-Globals._LightShadowData.x) + half(1.0);
    u_xlat16_2.x = u_xlat16_6 * u_xlat16_2.x + Globals._LightShadowData.x;
    u_xlat16_2.x = half(u_xlat0.x + float(u_xlat16_2.x));
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0h, 1.0h);
    u_xlat0.xy = input.TEXCOORD5.yy * Globals.hlslcc_mtx4x4unity_WorldToLight[1].xy;
    u_xlat0.xy = Globals.hlslcc_mtx4x4unity_WorldToLight[0].xy * input.TEXCOORD5.xx + u_xlat0.xy;
    u_xlat0.xy = Globals.hlslcc_mtx4x4unity_WorldToLight[2].xy * input.TEXCOORD5.zz + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy + Globals.hlslcc_mtx4x4unity_WorldToLight[3].xy;
    u_xlat16_0.x = _LightTexture0.sample(sampler_LightTexture0, u_xlat0.xy).w;
    u_xlat16_0.x = u_xlat16_2.x * u_xlat16_0.x;
    u_xlat16_2.xyz = u_xlat16_0.xxx * Globals._LightColor0.xyz;
    u_xlat16_20 = dot(input.TEXCOORD1.xyz, input.TEXCOORD1.xyz);
    u_xlat16_20 = rsqrt(u_xlat16_20);
    u_xlat16_3.x = input.TEXCOORD2.w;
    u_xlat16_3.y = input.TEXCOORD3.w;
    u_xlat16_3.z = input.TEXCOORD4.w;
    u_xlat16_4.xyz = (-input.TEXCOORD1.xyz) * half3(u_xlat16_20) + u_xlat16_3.xyz;
    u_xlat16_20 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
    u_xlat16_0.x = max(u_xlat16_20, half(0.00100000005));
    u_xlat16_20 = rsqrt(u_xlat16_0.x);
    u_xlat16_4.xyz = half3(u_xlat16_20) * u_xlat16_4.xyz;
    u_xlat16_20 = dot(u_xlat16_3.xyz, u_xlat16_4.xyz);
    u_xlat16_20 = clamp(u_xlat16_20, 0.0h, 1.0h);
    u_xlat16_0.x = max(u_xlat16_20, half(0.319999993));
    u_xlat16_20 = (-Globals._Glossiness) + half(1.0);
    u_xlat16_6 = u_xlat16_20 * u_xlat16_20 + half(1.5);
    u_xlat16_20 = u_xlat16_20 * u_xlat16_20;
    u_xlat16_0.x = u_xlat16_6 * u_xlat16_0.x;
    u_xlat16_21 = dot(input.TEXCOORD4.xyz, input.TEXCOORD4.xyz);
    u_xlat16_21 = rsqrt(u_xlat16_21);
    u_xlat16_5.xyz = half3(u_xlat16_21) * input.TEXCOORD4.xyz;
    u_xlat16_21 = dot(u_xlat16_5.xyz, u_xlat16_4.xyz);
    u_xlat16_21 = clamp(u_xlat16_21, 0.0h, 1.0h);
    u_xlat16_3.x = dot(u_xlat16_5.xyz, u_xlat16_3.xyz);
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0h, 1.0h);
    u_xlat16_9.x = u_xlat16_21 * u_xlat16_21;
    u_xlat16_6 = u_xlat16_20 * u_xlat16_20 + half(-1.0);
    u_xlat16_6 = u_xlat16_9.x * u_xlat16_6 + half(1.00001001);
    u_xlat16_0.x = u_xlat16_6 * u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_20 / u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x + half(-9.99999975e-05);
    u_xlat16_20 = max(u_xlat16_0.x, half(0.0));
    u_xlat16_20 = min(u_xlat16_20, half(100.0));
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_9.xyz = Globals._Color.xyz * u_xlat16_0.xyz + half3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat16_0.xyz = u_xlat16_0.xyz * Globals._Color.xyz;
    u_xlat16_9.xyz = half3(Globals._Metallic) * u_xlat16_9.xyz + half3(0.220916301, 0.220916301, 0.220916301);
    u_xlat16_9.xyz = half3(u_xlat16_20) * u_xlat16_9.xyz;
    u_xlat16_20 = (-Globals._Metallic) * half(0.779083729) + half(0.779083729);
    u_xlat16_9.xyz = u_xlat16_0.xyz * half3(u_xlat16_20) + u_xlat16_9.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_9.xyz;
    output.SV_Target0.xyz = u_xlat16_3.xxx * u_xlat16_2.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}


//////////////////////////////////////////////////////
Keywords set in this variant: POINT SHADOWS_CUBE 
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"
Uses vertex data channel "TexCoord0"

Constant Buffer "Globals" (258 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 32
  Matrix4x4 unity_WorldToObject at 96
  Matrix4x4 unity_MatrixVP at 160
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 _MainTex_ST at 224
  Vector4 _DetailAlbedoMap_ST at 240
  ScalarHalf _UVSec at 256
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    float4 _DetailAlbedoMap_ST;
    half _UVSec;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    half3 NORMAL0 [[ attribute(1) ]] ;
    float2 TEXCOORD0 [[ attribute(2) ]] ;
    float2 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float2 TEXCOORD6 [[ user(TEXCOORD6) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool u_xlatb0;
    float4 u_xlat1;
    float u_xlat6;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0] * input.POSITION0.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2] * input.POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    output.mtl_Position = Globals.hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlatb0 = Globals._UVSec==half(0.0);
    u_xlat0.xy = (bool(u_xlatb0)) ? input.TEXCOORD0.xy : input.TEXCOORD1.xy;
    output.TEXCOORD0.zw = u_xlat0.xy * Globals._DetailAlbedoMap_ST.xy + Globals._DetailAlbedoMap_ST.zw;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy * Globals._MainTex_ST.xy + Globals._MainTex_ST.zw;
    u_xlat0.xyz = input.POSITION0.yyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * input.POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * input.POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * input.POSITION0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-Globals._WorldSpaceCameraPos.xyzx.xyz);
    output.TEXCOORD1.xyz = half3(u_xlat1.xyz);
    u_xlat1.xyw = (-u_xlat0.xyz) * Globals._WorldSpaceLightPos0.www + Globals._WorldSpaceLightPos0.xyz;
    output.TEXCOORD5.xyz = u_xlat0.xyz;
    output.TEXCOORD2.w = half(u_xlat1.x);
    output.TEXCOORD2.xyz = half3(0.0, 0.0, 0.0);
    output.TEXCOORD3.w = half(u_xlat1.y);
    output.TEXCOORD3.xyz = half3(0.0, 0.0, 0.0);
    u_xlat0.x = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = rsqrt(u_xlat6);
    u_xlat1.xyz = float3(u_xlat6) * u_xlat0.xyz;
    output.TEXCOORD4 = half4(u_xlat1);
    output.TEXCOORD6.xy = float2(0.0, 0.0);
    return output;
}


-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0 sampler slot 2
Set CUBE Texture "_ShadowMapTexture" to slot 1
Set 2D Texture "_LightTexture0" to slot 2 sampler slot 3
Set 2D Texture "unity_NHxRoughness" to slot 3 sampler slot 0

Constant Buffer "Globals" (224 bytes) on slot 0 {
  Matrix4x4 unity_MatrixV at 64
  Matrix4x4 unity_WorldToLight at 160
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _LightPositionRange at 16
  VectorHalf4 _LightShadowData at 32
  Vector4 unity_ShadowFadeCenterAndType at 48
  VectorHalf4 _LightColor0 at 128
  VectorHalf4 _Color at 136
  ScalarHalf _Metallic at 144
  ScalarHalf _Glossiness at 146
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _LightPositionRange;
    half4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    half4 _LightColor0;
    half4 _Color;
    half _Metallic;
    half _Glossiness;
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(0) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    sampler samplerunity_NHxRoughness [[ sampler (0) ]],
    sampler sampler_ShadowMapTexture [[ sampler (1) ]],
    sampler sampler_MainTex [[ sampler (2) ]],
    sampler sampler_LightTexture0 [[ sampler (3) ]],
    texture2d<half, access::sample > _MainTex [[ texture (0) ]] ,
    texturecube<float, access::sample > _ShadowMapTexture [[ texture (1) ]] ,
    texture2d<half, access::sample > _LightTexture0 [[ texture (2) ]] ,
    texture2d<half, access::sample > unity_NHxRoughness [[ texture (3) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    float3 u_xlat6;
    half3 u_xlat16_6;
    bool u_xlatb6;
    float u_xlat12;
    half u_xlat16_20;
    u_xlat0.xyz = input.TEXCOORD5.xyz + (-Globals.unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat6.xyz = (-input.TEXCOORD5.xyz) + Globals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat1.x = Globals.hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = Globals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = Globals.hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat6.x = dot(u_xlat6.xyz, u_xlat1.xyz);
    u_xlat0.x = (-u_xlat6.x) + u_xlat0.x;
    u_xlat0.x = Globals.unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat6.x;
    u_xlat0.x = u_xlat0.x * float(Globals._LightShadowData.z) + float(Globals._LightShadowData.w);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat6.xyz = input.TEXCOORD5.xyz + (-Globals._LightPositionRange.xyz);
    u_xlat1.x = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat6.x = _ShadowMapTexture.sample(sampler_ShadowMapTexture, u_xlat6.xyz, level(0.0)).x;
    u_xlat12 = sqrt(u_xlat1.x);
    u_xlat12 = u_xlat12 * Globals._LightPositionRange.w;
    u_xlat12 = u_xlat12 * 0.970000029;
    u_xlatb6 = u_xlat6.x<u_xlat12;
    u_xlat16_2.x = (u_xlatb6) ? Globals._LightShadowData.x : half(1.0);
    u_xlat16_2.x = half(u_xlat0.x + float(u_xlat16_2.x));
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0h, 1.0h);
    u_xlat0.xyz = input.TEXCOORD5.yyy * Globals.hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_WorldToLight[0].xyz * input.TEXCOORD5.xxx + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_WorldToLight[2].xyz * input.TEXCOORD5.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + Globals.hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat16_0 = _LightTexture0.sample(sampler_LightTexture0, u_xlat0.xx).w;
    u_xlat16_0 = u_xlat16_2.x * u_xlat16_0;
    u_xlat16_2.xyz = half3(u_xlat16_0) * Globals._LightColor0.xyz;
    u_xlat16_3.x = input.TEXCOORD2.w;
    u_xlat16_3.y = input.TEXCOORD3.w;
    u_xlat16_3.z = input.TEXCOORD4.w;
    u_xlat16_20 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
    u_xlat16_20 = rsqrt(u_xlat16_20);
    u_xlat16_3.xyz = half3(u_xlat16_20) * u_xlat16_3.xyz;
    u_xlat16_20 = dot(input.TEXCOORD4.xyz, input.TEXCOORD4.xyz);
    u_xlat16_20 = rsqrt(u_xlat16_20);
    u_xlat16_4.xyz = half3(u_xlat16_20) * input.TEXCOORD4.xyz;
    u_xlat16_20 = dot(u_xlat16_4.xyz, u_xlat16_3.xyz);
    u_xlat16_20 = clamp(u_xlat16_20, 0.0h, 1.0h);
    u_xlat16_2.xyz = half3(u_xlat16_20) * u_xlat16_2.xyz;
    u_xlat16_20 = dot(input.TEXCOORD1.xyz, input.TEXCOORD1.xyz);
    u_xlat16_20 = rsqrt(u_xlat16_20);
    u_xlat16_5.xyz = half3(u_xlat16_20) * input.TEXCOORD1.xyz;
    u_xlat16_20 = dot((-u_xlat16_5.xyz), u_xlat16_4.xyz);
    u_xlat16_20 = u_xlat16_20 + u_xlat16_20;
    u_xlat16_4.xyz = u_xlat16_4.xyz * (-half3(u_xlat16_20)) + (-u_xlat16_5.xyz);
    u_xlat16_20 = dot(u_xlat16_4.xyz, u_xlat16_3.xyz);
    u_xlat16_20 = u_xlat16_20 * u_xlat16_20;
    u_xlat16_3.x = u_xlat16_20 * u_xlat16_20;
    u_xlat16_3.y = (-Globals._Glossiness) + half(1.0);
    u_xlat16_0 = unity_NHxRoughness.sample(samplerunity_NHxRoughness, float2(u_xlat16_3.xy)).w;
    u_xlat16_0 = u_xlat16_0 * half(16.0);
    u_xlat16_6.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_3.xyz = Globals._Color.xyz * u_xlat16_6.xyz + half3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat16_6.xyz = u_xlat16_6.xyz * Globals._Color.xyz;
    u_xlat16_3.xyz = half3(Globals._Metallic) * u_xlat16_3.xyz + half3(0.220916301, 0.220916301, 0.220916301);
    u_xlat16_3.xyz = half3(u_xlat16_0) * u_xlat16_3.xyz;
    u_xlat16_20 = (-Globals._Metallic) * half(0.779083729) + half(0.779083729);
    u_xlat16_3.xyz = u_xlat16_6.xyz * half3(u_xlat16_20) + u_xlat16_3.xyz;
    output.SV_Target0.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}


-- Hardware tier variant: Tier 2
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"
Uses vertex data channel "TexCoord0"

Constant Buffer "Globals" (258 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 32
  Matrix4x4 unity_WorldToObject at 96
  Matrix4x4 unity_MatrixVP at 160
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 _MainTex_ST at 224
  Vector4 _DetailAlbedoMap_ST at 240
  ScalarHalf _UVSec at 256
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    float4 _DetailAlbedoMap_ST;
    half _UVSec;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    half3 NORMAL0 [[ attribute(1) ]] ;
    float2 TEXCOORD0 [[ attribute(2) ]] ;
    float2 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float2 TEXCOORD6 [[ user(TEXCOORD6) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool u_xlatb0;
    float4 u_xlat1;
    float u_xlat6;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0] * input.POSITION0.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2] * input.POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    output.mtl_Position = Globals.hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlatb0 = Globals._UVSec==half(0.0);
    u_xlat0.xy = (bool(u_xlatb0)) ? input.TEXCOORD0.xy : input.TEXCOORD1.xy;
    output.TEXCOORD0.zw = u_xlat0.xy * Globals._DetailAlbedoMap_ST.xy + Globals._DetailAlbedoMap_ST.zw;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy * Globals._MainTex_ST.xy + Globals._MainTex_ST.zw;
    u_xlat0.xyz = input.POSITION0.yyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * input.POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * input.POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * input.POSITION0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-Globals._WorldSpaceCameraPos.xyzx.xyz);
    output.TEXCOORD1.xyz = half3(u_xlat1.xyz);
    u_xlat1.xyw = (-u_xlat0.xyz) * Globals._WorldSpaceLightPos0.www + Globals._WorldSpaceLightPos0.xyz;
    output.TEXCOORD5.xyz = u_xlat0.xyz;
    output.TEXCOORD2.w = half(u_xlat1.x);
    output.TEXCOORD2.xyz = half3(0.0, 0.0, 0.0);
    output.TEXCOORD3.w = half(u_xlat1.y);
    output.TEXCOORD3.xyz = half3(0.0, 0.0, 0.0);
    u_xlat0.x = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = rsqrt(u_xlat6);
    u_xlat1.xyz = float3(u_xlat6) * u_xlat0.xyz;
    output.TEXCOORD4 = half4(u_xlat1);
    output.TEXCOORD6.xy = float2(0.0, 0.0);
    return output;
}


-- Hardware tier variant: Tier 2
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0 sampler slot 1
Set CUBE Texture "_ShadowMapTexture" to slot 1 sampler slot 0
Set 2D Texture "_LightTexture0" to slot 2

Constant Buffer "Globals" (224 bytes) on slot 0 {
  Matrix4x4 unity_MatrixV at 64
  Matrix4x4 unity_WorldToLight at 160
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _LightPositionRange at 16
  VectorHalf4 _LightShadowData at 32
  Vector4 unity_ShadowFadeCenterAndType at 48
  VectorHalf4 _LightColor0 at 128
  VectorHalf4 _Color at 136
  ScalarHalf _Metallic at 144
  ScalarHalf _Glossiness at 146
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _LightPositionRange;
    half4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    half4 _LightColor0;
    half4 _Color;
    half _Metallic;
    half _Glossiness;
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(0) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    sampler sampler_ShadowMapTexture [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_LightTexture0 [[ sampler (2) ]],
    texture2d<half, access::sample > _MainTex [[ texture (0) ]] ,
    texturecube<float, access::sample > _ShadowMapTexture [[ texture (1) ]] ,
    texture2d<half, access::sample > _LightTexture0 [[ texture (2) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    float3 u_xlat6;
    half u_xlat16_6;
    bool u_xlatb6;
    half3 u_xlat16_9;
    float u_xlat12;
    half u_xlat16_20;
    half u_xlat16_21;
    u_xlat0.xyz = input.TEXCOORD5.xyz + (-Globals.unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat6.xyz = (-input.TEXCOORD5.xyz) + Globals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat1.x = Globals.hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = Globals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = Globals.hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat6.x = dot(u_xlat6.xyz, u_xlat1.xyz);
    u_xlat0.x = (-u_xlat6.x) + u_xlat0.x;
    u_xlat0.x = Globals.unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat6.x;
    u_xlat0.x = u_xlat0.x * float(Globals._LightShadowData.z) + float(Globals._LightShadowData.w);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat6.xyz = input.TEXCOORD5.xyz + (-Globals._LightPositionRange.xyz);
    u_xlat1.x = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat6.x = _ShadowMapTexture.sample(sampler_ShadowMapTexture, u_xlat6.xyz, level(0.0)).x;
    u_xlat12 = sqrt(u_xlat1.x);
    u_xlat12 = u_xlat12 * Globals._LightPositionRange.w;
    u_xlat12 = u_xlat12 * 0.970000029;
    u_xlatb6 = u_xlat6.x<u_xlat12;
    u_xlat16_2.x = (u_xlatb6) ? Globals._LightShadowData.x : half(1.0);
    u_xlat16_2.x = half(u_xlat0.x + float(u_xlat16_2.x));
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0h, 1.0h);
    u_xlat0.xyz = input.TEXCOORD5.yyy * Globals.hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_WorldToLight[0].xyz * input.TEXCOORD5.xxx + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_WorldToLight[2].xyz * input.TEXCOORD5.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + Globals.hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat16_0.x = _LightTexture0.sample(sampler_LightTexture0, u_xlat0.xx).w;
    u_xlat16_0.x = u_xlat16_2.x * u_xlat16_0.x;
    u_xlat16_2.xyz = u_xlat16_0.xxx * Globals._LightColor0.xyz;
    u_xlat16_20 = dot(input.TEXCOORD1.xyz, input.TEXCOORD1.xyz);
    u_xlat16_20 = rsqrt(u_xlat16_20);
    u_xlat16_3.x = input.TEXCOORD2.w;
    u_xlat16_3.y = input.TEXCOORD3.w;
    u_xlat16_3.z = input.TEXCOORD4.w;
    u_xlat16_21 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
    u_xlat16_21 = rsqrt(u_xlat16_21);
    u_xlat16_3.xyz = half3(u_xlat16_21) * u_xlat16_3.xyz;
    u_xlat16_4.xyz = (-input.TEXCOORD1.xyz) * half3(u_xlat16_20) + u_xlat16_3.xyz;
    u_xlat16_20 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
    u_xlat16_0.x = max(u_xlat16_20, half(0.00100000005));
    u_xlat16_20 = rsqrt(u_xlat16_0.x);
    u_xlat16_4.xyz = half3(u_xlat16_20) * u_xlat16_4.xyz;
    u_xlat16_20 = dot(u_xlat16_3.xyz, u_xlat16_4.xyz);
    u_xlat16_20 = clamp(u_xlat16_20, 0.0h, 1.0h);
    u_xlat16_0.x = max(u_xlat16_20, half(0.319999993));
    u_xlat16_20 = (-Globals._Glossiness) + half(1.0);
    u_xlat16_6 = u_xlat16_20 * u_xlat16_20 + half(1.5);
    u_xlat16_20 = u_xlat16_20 * u_xlat16_20;
    u_xlat16_0.x = u_xlat16_6 * u_xlat16_0.x;
    u_xlat16_21 = dot(input.TEXCOORD4.xyz, input.TEXCOORD4.xyz);
    u_xlat16_21 = rsqrt(u_xlat16_21);
    u_xlat16_5.xyz = half3(u_xlat16_21) * input.TEXCOORD4.xyz;
    u_xlat16_21 = dot(u_xlat16_5.xyz, u_xlat16_4.xyz);
    u_xlat16_21 = clamp(u_xlat16_21, 0.0h, 1.0h);
    u_xlat16_3.x = dot(u_xlat16_5.xyz, u_xlat16_3.xyz);
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0h, 1.0h);
    u_xlat16_9.x = u_xlat16_21 * u_xlat16_21;
    u_xlat16_6 = u_xlat16_20 * u_xlat16_20 + half(-1.0);
    u_xlat16_6 = u_xlat16_9.x * u_xlat16_6 + half(1.00001001);
    u_xlat16_0.x = u_xlat16_6 * u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_20 / u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x + half(-9.99999975e-05);
    u_xlat16_20 = max(u_xlat16_0.x, half(0.0));
    u_xlat16_20 = min(u_xlat16_20, half(100.0));
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_9.xyz = Globals._Color.xyz * u_xlat16_0.xyz + half3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat16_0.xyz = u_xlat16_0.xyz * Globals._Color.xyz;
    u_xlat16_9.xyz = half3(Globals._Metallic) * u_xlat16_9.xyz + half3(0.220916301, 0.220916301, 0.220916301);
    u_xlat16_9.xyz = half3(u_xlat16_20) * u_xlat16_9.xyz;
    u_xlat16_20 = (-Globals._Metallic) * half(0.779083729) + half(0.779083729);
    u_xlat16_9.xyz = u_xlat16_0.xyz * half3(u_xlat16_20) + u_xlat16_9.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_9.xyz;
    output.SV_Target0.xyz = u_xlat16_3.xxx * u_xlat16_2.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}


-- Hardware tier variant: Tier 3
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"
Uses vertex data channel "TexCoord0"

Constant Buffer "Globals" (258 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 32
  Matrix4x4 unity_WorldToObject at 96
  Matrix4x4 unity_MatrixVP at 160
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 _MainTex_ST at 224
  Vector4 _DetailAlbedoMap_ST at 240
  ScalarHalf _UVSec at 256
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    float4 _DetailAlbedoMap_ST;
    half _UVSec;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    half3 NORMAL0 [[ attribute(1) ]] ;
    float2 TEXCOORD0 [[ attribute(2) ]] ;
    float2 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float2 TEXCOORD6 [[ user(TEXCOORD6) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool u_xlatb0;
    float4 u_xlat1;
    float u_xlat6;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0] * input.POSITION0.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2] * input.POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    output.mtl_Position = Globals.hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlatb0 = Globals._UVSec==half(0.0);
    u_xlat0.xy = (bool(u_xlatb0)) ? input.TEXCOORD0.xy : input.TEXCOORD1.xy;
    output.TEXCOORD0.zw = u_xlat0.xy * Globals._DetailAlbedoMap_ST.xy + Globals._DetailAlbedoMap_ST.zw;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy * Globals._MainTex_ST.xy + Globals._MainTex_ST.zw;
    u_xlat0.xyz = input.POSITION0.yyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * input.POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * input.POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * input.POSITION0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-Globals._WorldSpaceCameraPos.xyzx.xyz);
    output.TEXCOORD1.xyz = half3(u_xlat1.xyz);
    u_xlat1.xyw = (-u_xlat0.xyz) * Globals._WorldSpaceLightPos0.www + Globals._WorldSpaceLightPos0.xyz;
    output.TEXCOORD5.xyz = u_xlat0.xyz;
    output.TEXCOORD2.w = half(u_xlat1.x);
    output.TEXCOORD2.xyz = half3(0.0, 0.0, 0.0);
    output.TEXCOORD3.w = half(u_xlat1.y);
    output.TEXCOORD3.xyz = half3(0.0, 0.0, 0.0);
    u_xlat0.x = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = rsqrt(u_xlat6);
    u_xlat1.xyz = float3(u_xlat6) * u_xlat0.xyz;
    output.TEXCOORD4 = half4(u_xlat1);
    output.TEXCOORD6.xy = float2(0.0, 0.0);
    return output;
}


-- Hardware tier variant: Tier 3
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0 sampler slot 1
Set CUBE Texture "_ShadowMapTexture" to slot 1 sampler slot 0
Set 2D Texture "_LightTexture0" to slot 2

Constant Buffer "Globals" (224 bytes) on slot 0 {
  Matrix4x4 unity_MatrixV at 64
  Matrix4x4 unity_WorldToLight at 160
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _LightPositionRange at 16
  VectorHalf4 _LightShadowData at 32
  Vector4 unity_ShadowFadeCenterAndType at 48
  VectorHalf4 _LightColor0 at 128
  VectorHalf4 _Color at 136
  ScalarHalf _Metallic at 144
  ScalarHalf _Glossiness at 146
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _LightPositionRange;
    half4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    half4 _LightColor0;
    half4 _Color;
    half _Metallic;
    half _Glossiness;
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(0) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    sampler sampler_ShadowMapTexture [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_LightTexture0 [[ sampler (2) ]],
    texture2d<half, access::sample > _MainTex [[ texture (0) ]] ,
    texturecube<float, access::sample > _ShadowMapTexture [[ texture (1) ]] ,
    texture2d<half, access::sample > _LightTexture0 [[ texture (2) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    float3 u_xlat6;
    half u_xlat16_6;
    bool u_xlatb6;
    half3 u_xlat16_9;
    float u_xlat12;
    half u_xlat16_20;
    half u_xlat16_21;
    u_xlat0.xyz = input.TEXCOORD5.xyz + (-Globals.unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat6.xyz = (-input.TEXCOORD5.xyz) + Globals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat1.x = Globals.hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = Globals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = Globals.hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat6.x = dot(u_xlat6.xyz, u_xlat1.xyz);
    u_xlat0.x = (-u_xlat6.x) + u_xlat0.x;
    u_xlat0.x = Globals.unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat6.x;
    u_xlat0.x = u_xlat0.x * float(Globals._LightShadowData.z) + float(Globals._LightShadowData.w);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat6.xyz = input.TEXCOORD5.xyz + (-Globals._LightPositionRange.xyz);
    u_xlat1.x = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat6.x = _ShadowMapTexture.sample(sampler_ShadowMapTexture, u_xlat6.xyz, level(0.0)).x;
    u_xlat12 = sqrt(u_xlat1.x);
    u_xlat12 = u_xlat12 * Globals._LightPositionRange.w;
    u_xlat12 = u_xlat12 * 0.970000029;
    u_xlatb6 = u_xlat6.x<u_xlat12;
    u_xlat16_2.x = (u_xlatb6) ? Globals._LightShadowData.x : half(1.0);
    u_xlat16_2.x = half(u_xlat0.x + float(u_xlat16_2.x));
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0h, 1.0h);
    u_xlat0.xyz = input.TEXCOORD5.yyy * Globals.hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_WorldToLight[0].xyz * input.TEXCOORD5.xxx + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_WorldToLight[2].xyz * input.TEXCOORD5.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + Globals.hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat16_0.x = _LightTexture0.sample(sampler_LightTexture0, u_xlat0.xx).w;
    u_xlat16_0.x = u_xlat16_2.x * u_xlat16_0.x;
    u_xlat16_2.xyz = u_xlat16_0.xxx * Globals._LightColor0.xyz;
    u_xlat16_20 = dot(input.TEXCOORD1.xyz, input.TEXCOORD1.xyz);
    u_xlat16_20 = rsqrt(u_xlat16_20);
    u_xlat16_3.x = input.TEXCOORD2.w;
    u_xlat16_3.y = input.TEXCOORD3.w;
    u_xlat16_3.z = input.TEXCOORD4.w;
    u_xlat16_21 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
    u_xlat16_21 = rsqrt(u_xlat16_21);
    u_xlat16_3.xyz = half3(u_xlat16_21) * u_xlat16_3.xyz;
    u_xlat16_4.xyz = (-input.TEXCOORD1.xyz) * half3(u_xlat16_20) + u_xlat16_3.xyz;
    u_xlat16_20 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
    u_xlat16_0.x = max(u_xlat16_20, half(0.00100000005));
    u_xlat16_20 = rsqrt(u_xlat16_0.x);
    u_xlat16_4.xyz = half3(u_xlat16_20) * u_xlat16_4.xyz;
    u_xlat16_20 = dot(u_xlat16_3.xyz, u_xlat16_4.xyz);
    u_xlat16_20 = clamp(u_xlat16_20, 0.0h, 1.0h);
    u_xlat16_0.x = max(u_xlat16_20, half(0.319999993));
    u_xlat16_20 = (-Globals._Glossiness) + half(1.0);
    u_xlat16_6 = u_xlat16_20 * u_xlat16_20 + half(1.5);
    u_xlat16_20 = u_xlat16_20 * u_xlat16_20;
    u_xlat16_0.x = u_xlat16_6 * u_xlat16_0.x;
    u_xlat16_21 = dot(input.TEXCOORD4.xyz, input.TEXCOORD4.xyz);
    u_xlat16_21 = rsqrt(u_xlat16_21);
    u_xlat16_5.xyz = half3(u_xlat16_21) * input.TEXCOORD4.xyz;
    u_xlat16_21 = dot(u_xlat16_5.xyz, u_xlat16_4.xyz);
    u_xlat16_21 = clamp(u_xlat16_21, 0.0h, 1.0h);
    u_xlat16_3.x = dot(u_xlat16_5.xyz, u_xlat16_3.xyz);
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0h, 1.0h);
    u_xlat16_9.x = u_xlat16_21 * u_xlat16_21;
    u_xlat16_6 = u_xlat16_20 * u_xlat16_20 + half(-1.0);
    u_xlat16_6 = u_xlat16_9.x * u_xlat16_6 + half(1.00001001);
    u_xlat16_0.x = u_xlat16_6 * u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_20 / u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x + half(-9.99999975e-05);
    u_xlat16_20 = max(u_xlat16_0.x, half(0.0));
    u_xlat16_20 = min(u_xlat16_20, half(100.0));
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_9.xyz = Globals._Color.xyz * u_xlat16_0.xyz + half3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat16_0.xyz = u_xlat16_0.xyz * Globals._Color.xyz;
    u_xlat16_9.xyz = half3(Globals._Metallic) * u_xlat16_9.xyz + half3(0.220916301, 0.220916301, 0.220916301);
    u_xlat16_9.xyz = half3(u_xlat16_20) * u_xlat16_9.xyz;
    u_xlat16_20 = (-Globals._Metallic) * half(0.779083729) + half(0.779083729);
    u_xlat16_9.xyz = u_xlat16_0.xyz * half3(u_xlat16_20) + u_xlat16_9.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_9.xyz;
    output.SV_Target0.xyz = u_xlat16_3.xxx * u_xlat16_2.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}


//////////////////////////////////////////////////////
Keywords set in this variant: POINT SHADOWS_CUBE SHADOWS_SOFT 
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"
Uses vertex data channel "TexCoord0"

Constant Buffer "Globals" (258 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 32
  Matrix4x4 unity_WorldToObject at 96
  Matrix4x4 unity_MatrixVP at 160
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 _MainTex_ST at 224
  Vector4 _DetailAlbedoMap_ST at 240
  ScalarHalf _UVSec at 256
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    float4 _DetailAlbedoMap_ST;
    half _UVSec;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    half3 NORMAL0 [[ attribute(1) ]] ;
    float2 TEXCOORD0 [[ attribute(2) ]] ;
    float2 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float2 TEXCOORD6 [[ user(TEXCOORD6) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool u_xlatb0;
    float4 u_xlat1;
    float u_xlat6;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0] * input.POSITION0.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2] * input.POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    output.mtl_Position = Globals.hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlatb0 = Globals._UVSec==half(0.0);
    u_xlat0.xy = (bool(u_xlatb0)) ? input.TEXCOORD0.xy : input.TEXCOORD1.xy;
    output.TEXCOORD0.zw = u_xlat0.xy * Globals._DetailAlbedoMap_ST.xy + Globals._DetailAlbedoMap_ST.zw;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy * Globals._MainTex_ST.xy + Globals._MainTex_ST.zw;
    u_xlat0.xyz = input.POSITION0.yyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * input.POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * input.POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * input.POSITION0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-Globals._WorldSpaceCameraPos.xyzx.xyz);
    output.TEXCOORD1.xyz = half3(u_xlat1.xyz);
    u_xlat1.xyw = (-u_xlat0.xyz) * Globals._WorldSpaceLightPos0.www + Globals._WorldSpaceLightPos0.xyz;
    output.TEXCOORD5.xyz = u_xlat0.xyz;
    output.TEXCOORD2.w = half(u_xlat1.x);
    output.TEXCOORD2.xyz = half3(0.0, 0.0, 0.0);
    output.TEXCOORD3.w = half(u_xlat1.y);
    output.TEXCOORD3.xyz = half3(0.0, 0.0, 0.0);
    u_xlat0.x = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = rsqrt(u_xlat6);
    u_xlat1.xyz = float3(u_xlat6) * u_xlat0.xyz;
    output.TEXCOORD4 = half4(u_xlat1);
    output.TEXCOORD6.xy = float2(0.0, 0.0);
    return output;
}


-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0 sampler slot 2
Set CUBE Texture "_ShadowMapTexture" to slot 1
Set 2D Texture "_LightTexture0" to slot 2 sampler slot 3
Set 2D Texture "unity_NHxRoughness" to slot 3 sampler slot 0

Constant Buffer "Globals" (224 bytes) on slot 0 {
  Matrix4x4 unity_MatrixV at 64
  Matrix4x4 unity_WorldToLight at 160
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _LightPositionRange at 16
  VectorHalf4 _LightShadowData at 32
  Vector4 unity_ShadowFadeCenterAndType at 48
  VectorHalf4 _LightColor0 at 128
  VectorHalf4 _Color at 136
  ScalarHalf _Metallic at 144
  ScalarHalf _Glossiness at 146
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _LightPositionRange;
    half4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    half4 _LightColor0;
    half4 _Color;
    half _Metallic;
    half _Glossiness;
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(0) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    sampler samplerunity_NHxRoughness [[ sampler (0) ]],
    sampler sampler_ShadowMapTexture [[ sampler (1) ]],
    sampler sampler_MainTex [[ sampler (2) ]],
    sampler sampler_LightTexture0 [[ sampler (3) ]],
    texture2d<half, access::sample > _MainTex [[ texture (0) ]] ,
    texturecube<float, access::sample > _ShadowMapTexture [[ texture (1) ]] ,
    texture2d<half, access::sample > _LightTexture0 [[ texture (2) ]] ,
    texture2d<half, access::sample > unity_NHxRoughness [[ texture (3) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    float4 u_xlat5;
    bool4 u_xlatb5;
    float4 u_xlat6;
    float3 u_xlat7;
    half3 u_xlat16_8;
    half3 u_xlat16_9;
    half u_xlat16_13;
    float u_xlat30;
    float u_xlat31;
    bool u_xlatb31;
    half u_xlat16_32;
    half u_xlat16_33;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * Globals._Color.xyz;
    u_xlat16_2.xyz = Globals._Color.xyz * u_xlat16_0.xyz + half3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat16_2.xyz = half3(Globals._Metallic) * u_xlat16_2.xyz + half3(0.220916301, 0.220916301, 0.220916301);
    u_xlat16_32 = (-Globals._Metallic) * half(0.779083729) + half(0.779083729);
    u_xlat16_3.x = dot(input.TEXCOORD4.xyz, input.TEXCOORD4.xyz);
    u_xlat16_3.x = rsqrt(u_xlat16_3.x);
    u_xlat16_3.xyz = u_xlat16_3.xxx * input.TEXCOORD4.xyz;
    u_xlat16_33 = dot(input.TEXCOORD1.xyz, input.TEXCOORD1.xyz);
    u_xlat16_33 = rsqrt(u_xlat16_33);
    u_xlat16_4.xyz = half3(u_xlat16_33) * input.TEXCOORD1.xyz;
    u_xlat0.xyz = input.TEXCOORD5.yyy * Globals.hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_WorldToLight[0].xyz * input.TEXCOORD5.xxx + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_WorldToLight[2].xyz * input.TEXCOORD5.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + Globals.hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat5.xyz = (-input.TEXCOORD5.xyz) + Globals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat6.x = Globals.hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat6.y = Globals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat6.z = Globals.hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat30 = dot(u_xlat5.xyz, u_xlat6.xyz);
    u_xlat5.xyz = input.TEXCOORD5.xyz + (-Globals.unity_ShadowFadeCenterAndType.xyz);
    u_xlat31 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat31 = sqrt(u_xlat31);
    u_xlat31 = (-u_xlat30) + u_xlat31;
    u_xlat30 = Globals.unity_ShadowFadeCenterAndType.w * u_xlat31 + u_xlat30;
    u_xlat30 = u_xlat30 * float(Globals._LightShadowData.z) + float(Globals._LightShadowData.w);
    u_xlat30 = clamp(u_xlat30, 0.0f, 1.0f);
    u_xlatb31 = u_xlat30<0.99000001;
    if(u_xlatb31){
        u_xlat5.xyz = input.TEXCOORD5.xyz + (-Globals._LightPositionRange.xyz);
        u_xlat31 = dot(u_xlat5.xyz, u_xlat5.xyz);
        u_xlat31 = sqrt(u_xlat31);
        u_xlat31 = u_xlat31 * Globals._LightPositionRange.w;
        u_xlat31 = u_xlat31 * 0.970000029;
        u_xlat6.xyz = u_xlat5.xyz + float3(0.0078125, 0.0078125, 0.0078125);
        u_xlat6.x = _ShadowMapTexture.sample(sampler_ShadowMapTexture, u_xlat6.xyz, level(0.0)).x;
        u_xlat7.xyz = u_xlat5.xyz + float3(-0.0078125, -0.0078125, 0.0078125);
        u_xlat6.y = _ShadowMapTexture.sample(sampler_ShadowMapTexture, u_xlat7.xyz, level(0.0)).x;
        u_xlat7.xyz = u_xlat5.xyz + float3(-0.0078125, 0.0078125, -0.0078125);
        u_xlat6.z = _ShadowMapTexture.sample(sampler_ShadowMapTexture, u_xlat7.xyz, level(0.0)).x;
        u_xlat5.xyz = u_xlat5.xyz + float3(0.0078125, -0.0078125, -0.0078125);
        u_xlat6.w = _ShadowMapTexture.sample(sampler_ShadowMapTexture, u_xlat5.xyz, level(0.0)).x;
        u_xlatb5 = (u_xlat6<float4(u_xlat31));
        u_xlat5.x = (u_xlatb5.x) ? float(Globals._LightShadowData.x) : float(1.0);
        u_xlat5.y = (u_xlatb5.y) ? float(Globals._LightShadowData.x) : float(1.0);
        u_xlat5.z = (u_xlatb5.z) ? float(Globals._LightShadowData.x) : float(1.0);
        u_xlat5.w = (u_xlatb5.w) ? float(Globals._LightShadowData.x) : float(1.0);
        u_xlat16_33 = half(dot(u_xlat5, float4(0.25, 0.25, 0.25, 0.25)));
    } else {
        u_xlat16_33 = half(1.0);
    }
    u_xlat16_33 = half(u_xlat30 + float(u_xlat16_33));
    u_xlat16_33 = clamp(u_xlat16_33, 0.0h, 1.0h);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat16_0.x = _LightTexture0.sample(sampler_LightTexture0, u_xlat0.xx).w;
    u_xlat16_0.x = u_xlat16_33 * u_xlat16_0.x;
    u_xlat16_8.x = input.TEXCOORD2.w;
    u_xlat16_8.y = input.TEXCOORD3.w;
    u_xlat16_8.z = input.TEXCOORD4.w;
    u_xlat16_33 = dot(u_xlat16_8.xyz, u_xlat16_8.xyz);
    u_xlat16_33 = rsqrt(u_xlat16_33);
    u_xlat16_8.xyz = half3(u_xlat16_33) * u_xlat16_8.xyz;
    u_xlat16_9.xyz = u_xlat16_0.xxx * Globals._LightColor0.xyz;
    u_xlat16_33 = dot((-u_xlat16_4.xyz), u_xlat16_3.xyz);
    u_xlat16_33 = u_xlat16_33 + u_xlat16_33;
    u_xlat16_4.xyz = u_xlat16_3.xyz * (-half3(u_xlat16_33)) + (-u_xlat16_4.xyz);
    u_xlat16_3.x = dot(u_xlat16_3.xyz, u_xlat16_8.xyz);
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0h, 1.0h);
    u_xlat16_13 = dot(u_xlat16_4.xyz, u_xlat16_8.xyz);
    u_xlat16_13 = u_xlat16_13 * u_xlat16_13;
    u_xlat16_4.x = u_xlat16_13 * u_xlat16_13;
    u_xlat16_4.y = (-Globals._Glossiness) + half(1.0);
    u_xlat16_0.x = unity_NHxRoughness.sample(samplerunity_NHxRoughness, float2(u_xlat16_4.xy)).w;
    u_xlat16_0.x = u_xlat16_0.x * half(16.0);
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_0.xxx;
    u_xlat16_2.xyz = u_xlat16_1.xyz * half3(u_xlat16_32) + u_xlat16_2.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_9.xyz;
    output.SV_Target0.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}


-- Hardware tier variant: Tier 2
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"
Uses vertex data channel "TexCoord0"

Constant Buffer "Globals" (258 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 32
  Matrix4x4 unity_WorldToObject at 96
  Matrix4x4 unity_MatrixVP at 160
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 _MainTex_ST at 224
  Vector4 _DetailAlbedoMap_ST at 240
  ScalarHalf _UVSec at 256
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    float4 _DetailAlbedoMap_ST;
    half _UVSec;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    half3 NORMAL0 [[ attribute(1) ]] ;
    float2 TEXCOORD0 [[ attribute(2) ]] ;
    float2 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float2 TEXCOORD6 [[ user(TEXCOORD6) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool u_xlatb0;
    float4 u_xlat1;
    float u_xlat6;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0] * input.POSITION0.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2] * input.POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    output.mtl_Position = Globals.hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlatb0 = Globals._UVSec==half(0.0);
    u_xlat0.xy = (bool(u_xlatb0)) ? input.TEXCOORD0.xy : input.TEXCOORD1.xy;
    output.TEXCOORD0.zw = u_xlat0.xy * Globals._DetailAlbedoMap_ST.xy + Globals._DetailAlbedoMap_ST.zw;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy * Globals._MainTex_ST.xy + Globals._MainTex_ST.zw;
    u_xlat0.xyz = input.POSITION0.yyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * input.POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * input.POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * input.POSITION0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-Globals._WorldSpaceCameraPos.xyzx.xyz);
    output.TEXCOORD1.xyz = half3(u_xlat1.xyz);
    u_xlat1.xyw = (-u_xlat0.xyz) * Globals._WorldSpaceLightPos0.www + Globals._WorldSpaceLightPos0.xyz;
    output.TEXCOORD5.xyz = u_xlat0.xyz;
    output.TEXCOORD2.w = half(u_xlat1.x);
    output.TEXCOORD2.xyz = half3(0.0, 0.0, 0.0);
    output.TEXCOORD3.w = half(u_xlat1.y);
    output.TEXCOORD3.xyz = half3(0.0, 0.0, 0.0);
    u_xlat0.x = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = rsqrt(u_xlat6);
    u_xlat1.xyz = float3(u_xlat6) * u_xlat0.xyz;
    output.TEXCOORD4 = half4(u_xlat1);
    output.TEXCOORD6.xy = float2(0.0, 0.0);
    return output;
}


-- Hardware tier variant: Tier 2
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0 sampler slot 1
Set CUBE Texture "_ShadowMapTexture" to slot 1 sampler slot 0
Set 2D Texture "_LightTexture0" to slot 2

Constant Buffer "Globals" (224 bytes) on slot 0 {
  Matrix4x4 unity_MatrixV at 64
  Matrix4x4 unity_WorldToLight at 160
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _LightPositionRange at 16
  VectorHalf4 _LightShadowData at 32
  Vector4 unity_ShadowFadeCenterAndType at 48
  VectorHalf4 _LightColor0 at 128
  VectorHalf4 _Color at 136
  ScalarHalf _Metallic at 144
  ScalarHalf _Glossiness at 146
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _LightPositionRange;
    half4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    half4 _LightColor0;
    half4 _Color;
    half _Metallic;
    half _Glossiness;
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(0) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    sampler sampler_ShadowMapTexture [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_LightTexture0 [[ sampler (2) ]],
    texture2d<half, access::sample > _MainTex [[ texture (0) ]] ,
    texturecube<float, access::sample > _ShadowMapTexture [[ texture (1) ]] ,
    texture2d<half, access::sample > _LightTexture0 [[ texture (2) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    float4 u_xlat4;
    bool4 u_xlatb4;
    float4 u_xlat5;
    float3 u_xlat6;
    half3 u_xlat16_7;
    half3 u_xlat16_8;
    half3 u_xlat16_9;
    half u_xlat16_10;
    half u_xlat16_13;
    half u_xlat16_20;
    half u_xlat16_23;
    float u_xlat30;
    float u_xlat31;
    bool u_xlatb31;
    half u_xlat16_32;
    half u_xlat16_33;
    half u_xlat16_37;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * Globals._Color.xyz;
    u_xlat16_2.xyz = Globals._Color.xyz * u_xlat16_0.xyz + half3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat16_2.xyz = half3(Globals._Metallic) * u_xlat16_2.xyz + half3(0.220916301, 0.220916301, 0.220916301);
    u_xlat16_32 = (-Globals._Metallic) * half(0.779083729) + half(0.779083729);
    u_xlat16_3.x = dot(input.TEXCOORD4.xyz, input.TEXCOORD4.xyz);
    u_xlat16_3.x = rsqrt(u_xlat16_3.x);
    u_xlat16_3.xyz = u_xlat16_3.xxx * input.TEXCOORD4.xyz;
    u_xlat16_33 = dot(input.TEXCOORD1.xyz, input.TEXCOORD1.xyz);
    u_xlat16_33 = rsqrt(u_xlat16_33);
    u_xlat0.xyz = input.TEXCOORD5.yyy * Globals.hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_WorldToLight[0].xyz * input.TEXCOORD5.xxx + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_WorldToLight[2].xyz * input.TEXCOORD5.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + Globals.hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat4.xyz = (-input.TEXCOORD5.xyz) + Globals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat5.x = Globals.hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat5.y = Globals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat5.z = Globals.hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat30 = dot(u_xlat4.xyz, u_xlat5.xyz);
    u_xlat4.xyz = input.TEXCOORD5.xyz + (-Globals.unity_ShadowFadeCenterAndType.xyz);
    u_xlat31 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat31 = sqrt(u_xlat31);
    u_xlat31 = (-u_xlat30) + u_xlat31;
    u_xlat30 = Globals.unity_ShadowFadeCenterAndType.w * u_xlat31 + u_xlat30;
    u_xlat30 = u_xlat30 * float(Globals._LightShadowData.z) + float(Globals._LightShadowData.w);
    u_xlat30 = clamp(u_xlat30, 0.0f, 1.0f);
    u_xlatb31 = u_xlat30<0.99000001;
    if(u_xlatb31){
        u_xlat4.xyz = input.TEXCOORD5.xyz + (-Globals._LightPositionRange.xyz);
        u_xlat31 = dot(u_xlat4.xyz, u_xlat4.xyz);
        u_xlat31 = sqrt(u_xlat31);
        u_xlat31 = u_xlat31 * Globals._LightPositionRange.w;
        u_xlat31 = u_xlat31 * 0.970000029;
        u_xlat5.xyz = u_xlat4.xyz + float3(0.0078125, 0.0078125, 0.0078125);
        u_xlat5.x = _ShadowMapTexture.sample(sampler_ShadowMapTexture, u_xlat5.xyz, level(0.0)).x;
        u_xlat6.xyz = u_xlat4.xyz + float3(-0.0078125, -0.0078125, 0.0078125);
        u_xlat5.y = _ShadowMapTexture.sample(sampler_ShadowMapTexture, u_xlat6.xyz, level(0.0)).x;
        u_xlat6.xyz = u_xlat4.xyz + float3(-0.0078125, 0.0078125, -0.0078125);
        u_xlat5.z = _ShadowMapTexture.sample(sampler_ShadowMapTexture, u_xlat6.xyz, level(0.0)).x;
        u_xlat4.xyz = u_xlat4.xyz + float3(0.0078125, -0.0078125, -0.0078125);
        u_xlat5.w = _ShadowMapTexture.sample(sampler_ShadowMapTexture, u_xlat4.xyz, level(0.0)).x;
        u_xlatb4 = (u_xlat5<float4(u_xlat31));
        u_xlat4.x = (u_xlatb4.x) ? float(Globals._LightShadowData.x) : float(1.0);
        u_xlat4.y = (u_xlatb4.y) ? float(Globals._LightShadowData.x) : float(1.0);
        u_xlat4.z = (u_xlatb4.z) ? float(Globals._LightShadowData.x) : float(1.0);
        u_xlat4.w = (u_xlatb4.w) ? float(Globals._LightShadowData.x) : float(1.0);
        u_xlat16_7.x = half(dot(u_xlat4, float4(0.25, 0.25, 0.25, 0.25)));
    } else {
        u_xlat16_7.x = half(1.0);
    }
    u_xlat16_7.x = half(u_xlat30 + float(u_xlat16_7.x));
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0h, 1.0h);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat16_0.x = _LightTexture0.sample(sampler_LightTexture0, u_xlat0.xx).w;
    u_xlat16_0.x = u_xlat16_7.x * u_xlat16_0.x;
    u_xlat16_7.x = input.TEXCOORD2.w;
    u_xlat16_7.y = input.TEXCOORD3.w;
    u_xlat16_7.z = input.TEXCOORD4.w;
    u_xlat16_37 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_37 = rsqrt(u_xlat16_37);
    u_xlat16_7.xyz = half3(u_xlat16_37) * u_xlat16_7.xyz;
    u_xlat16_8.xyz = u_xlat16_0.xxx * Globals._LightColor0.xyz;
    u_xlat16_9.xyz = (-input.TEXCOORD1.xyz) * half3(u_xlat16_33) + u_xlat16_7.xyz;
    u_xlat16_33 = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
    u_xlat16_0.x = max(u_xlat16_33, half(0.00100000005));
    u_xlat16_33 = rsqrt(u_xlat16_0.x);
    u_xlat16_9.xyz = half3(u_xlat16_33) * u_xlat16_9.xyz;
    u_xlat16_33 = dot(u_xlat16_3.xyz, u_xlat16_7.xyz);
    u_xlat16_33 = clamp(u_xlat16_33, 0.0h, 1.0h);
    u_xlat16_3.x = dot(u_xlat16_3.xyz, u_xlat16_9.xyz);
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0h, 1.0h);
    u_xlat16_13 = dot(u_xlat16_7.xyz, u_xlat16_9.xyz);
    u_xlat16_13 = clamp(u_xlat16_13, 0.0h, 1.0h);
    u_xlat16_23 = (-Globals._Glossiness) + half(1.0);
    u_xlat16_7.x = u_xlat16_23 * u_xlat16_23;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_0.x = u_xlat16_7.x * u_xlat16_7.x + half(-1.0);
    u_xlat16_0.x = u_xlat16_3.x * u_xlat16_0.x + half(1.00001001);
    u_xlat16_10 = max(u_xlat16_13, half(0.319999993));
    u_xlat16_20 = u_xlat16_23 * u_xlat16_23 + half(1.5);
    u_xlat16_10 = u_xlat16_20 * u_xlat16_10;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_10;
    u_xlat16_0.x = u_xlat16_7.x / u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x + half(-9.99999975e-05);
    u_xlat16_3.x = max(u_xlat16_0.x, half(0.0));
    u_xlat16_3.x = min(u_xlat16_3.x, half(100.0));
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xxx;
    u_xlat16_2.xyz = u_xlat16_1.xyz * half3(u_xlat16_32) + u_xlat16_2.xyz;
    u_xlat16_2.xyz = u_xlat16_8.xyz * u_xlat16_2.xyz;
    output.SV_Target0.xyz = half3(u_xlat16_33) * u_xlat16_2.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}


-- Hardware tier variant: Tier 3
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"
Uses vertex data channel "TexCoord0"

Constant Buffer "Globals" (258 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 32
  Matrix4x4 unity_WorldToObject at 96
  Matrix4x4 unity_MatrixVP at 160
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 _MainTex_ST at 224
  Vector4 _DetailAlbedoMap_ST at 240
  ScalarHalf _UVSec at 256
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    float4 _DetailAlbedoMap_ST;
    half _UVSec;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    half3 NORMAL0 [[ attribute(1) ]] ;
    float2 TEXCOORD0 [[ attribute(2) ]] ;
    float2 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float2 TEXCOORD6 [[ user(TEXCOORD6) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool u_xlatb0;
    float4 u_xlat1;
    float u_xlat6;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0] * input.POSITION0.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2] * input.POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    output.mtl_Position = Globals.hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlatb0 = Globals._UVSec==half(0.0);
    u_xlat0.xy = (bool(u_xlatb0)) ? input.TEXCOORD0.xy : input.TEXCOORD1.xy;
    output.TEXCOORD0.zw = u_xlat0.xy * Globals._DetailAlbedoMap_ST.xy + Globals._DetailAlbedoMap_ST.zw;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy * Globals._MainTex_ST.xy + Globals._MainTex_ST.zw;
    u_xlat0.xyz = input.POSITION0.yyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * input.POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * input.POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * input.POSITION0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-Globals._WorldSpaceCameraPos.xyzx.xyz);
    output.TEXCOORD1.xyz = half3(u_xlat1.xyz);
    u_xlat1.xyw = (-u_xlat0.xyz) * Globals._WorldSpaceLightPos0.www + Globals._WorldSpaceLightPos0.xyz;
    output.TEXCOORD5.xyz = u_xlat0.xyz;
    output.TEXCOORD2.w = half(u_xlat1.x);
    output.TEXCOORD2.xyz = half3(0.0, 0.0, 0.0);
    output.TEXCOORD3.w = half(u_xlat1.y);
    output.TEXCOORD3.xyz = half3(0.0, 0.0, 0.0);
    u_xlat0.x = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = rsqrt(u_xlat6);
    u_xlat1.xyz = float3(u_xlat6) * u_xlat0.xyz;
    output.TEXCOORD4 = half4(u_xlat1);
    output.TEXCOORD6.xy = float2(0.0, 0.0);
    return output;
}


-- Hardware tier variant: Tier 3
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0 sampler slot 1
Set CUBE Texture "_ShadowMapTexture" to slot 1 sampler slot 0
Set 2D Texture "_LightTexture0" to slot 2

Constant Buffer "Globals" (224 bytes) on slot 0 {
  Matrix4x4 unity_MatrixV at 64
  Matrix4x4 unity_WorldToLight at 160
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _LightPositionRange at 16
  VectorHalf4 _LightShadowData at 32
  Vector4 unity_ShadowFadeCenterAndType at 48
  VectorHalf4 _LightColor0 at 128
  VectorHalf4 _Color at 136
  ScalarHalf _Metallic at 144
  ScalarHalf _Glossiness at 146
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _LightPositionRange;
    half4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    half4 _LightColor0;
    half4 _Color;
    half _Metallic;
    half _Glossiness;
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(0) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    sampler sampler_ShadowMapTexture [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_LightTexture0 [[ sampler (2) ]],
    texture2d<half, access::sample > _MainTex [[ texture (0) ]] ,
    texturecube<float, access::sample > _ShadowMapTexture [[ texture (1) ]] ,
    texture2d<half, access::sample > _LightTexture0 [[ texture (2) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    float4 u_xlat4;
    bool4 u_xlatb4;
    float4 u_xlat5;
    float3 u_xlat6;
    half3 u_xlat16_7;
    half3 u_xlat16_8;
    half3 u_xlat16_9;
    half u_xlat16_10;
    half u_xlat16_13;
    half u_xlat16_20;
    half u_xlat16_23;
    float u_xlat30;
    float u_xlat31;
    bool u_xlatb31;
    half u_xlat16_32;
    half u_xlat16_33;
    half u_xlat16_37;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * Globals._Color.xyz;
    u_xlat16_2.xyz = Globals._Color.xyz * u_xlat16_0.xyz + half3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat16_2.xyz = half3(Globals._Metallic) * u_xlat16_2.xyz + half3(0.220916301, 0.220916301, 0.220916301);
    u_xlat16_32 = (-Globals._Metallic) * half(0.779083729) + half(0.779083729);
    u_xlat16_3.x = dot(input.TEXCOORD4.xyz, input.TEXCOORD4.xyz);
    u_xlat16_3.x = rsqrt(u_xlat16_3.x);
    u_xlat16_3.xyz = u_xlat16_3.xxx * input.TEXCOORD4.xyz;
    u_xlat16_33 = dot(input.TEXCOORD1.xyz, input.TEXCOORD1.xyz);
    u_xlat16_33 = rsqrt(u_xlat16_33);
    u_xlat0.xyz = input.TEXCOORD5.yyy * Globals.hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_WorldToLight[0].xyz * input.TEXCOORD5.xxx + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_WorldToLight[2].xyz * input.TEXCOORD5.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + Globals.hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat4.xyz = (-input.TEXCOORD5.xyz) + Globals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat5.x = Globals.hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat5.y = Globals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat5.z = Globals.hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat30 = dot(u_xlat4.xyz, u_xlat5.xyz);
    u_xlat4.xyz = input.TEXCOORD5.xyz + (-Globals.unity_ShadowFadeCenterAndType.xyz);
    u_xlat31 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat31 = sqrt(u_xlat31);
    u_xlat31 = (-u_xlat30) + u_xlat31;
    u_xlat30 = Globals.unity_ShadowFadeCenterAndType.w * u_xlat31 + u_xlat30;
    u_xlat30 = u_xlat30 * float(Globals._LightShadowData.z) + float(Globals._LightShadowData.w);
    u_xlat30 = clamp(u_xlat30, 0.0f, 1.0f);
    u_xlatb31 = u_xlat30<0.99000001;
    if(u_xlatb31){
        u_xlat4.xyz = input.TEXCOORD5.xyz + (-Globals._LightPositionRange.xyz);
        u_xlat31 = dot(u_xlat4.xyz, u_xlat4.xyz);
        u_xlat31 = sqrt(u_xlat31);
        u_xlat31 = u_xlat31 * Globals._LightPositionRange.w;
        u_xlat31 = u_xlat31 * 0.970000029;
        u_xlat5.xyz = u_xlat4.xyz + float3(0.0078125, 0.0078125, 0.0078125);
        u_xlat5.x = _ShadowMapTexture.sample(sampler_ShadowMapTexture, u_xlat5.xyz, level(0.0)).x;
        u_xlat6.xyz = u_xlat4.xyz + float3(-0.0078125, -0.0078125, 0.0078125);
        u_xlat5.y = _ShadowMapTexture.sample(sampler_ShadowMapTexture, u_xlat6.xyz, level(0.0)).x;
        u_xlat6.xyz = u_xlat4.xyz + float3(-0.0078125, 0.0078125, -0.0078125);
        u_xlat5.z = _ShadowMapTexture.sample(sampler_ShadowMapTexture, u_xlat6.xyz, level(0.0)).x;
        u_xlat4.xyz = u_xlat4.xyz + float3(0.0078125, -0.0078125, -0.0078125);
        u_xlat5.w = _ShadowMapTexture.sample(sampler_ShadowMapTexture, u_xlat4.xyz, level(0.0)).x;
        u_xlatb4 = (u_xlat5<float4(u_xlat31));
        u_xlat4.x = (u_xlatb4.x) ? float(Globals._LightShadowData.x) : float(1.0);
        u_xlat4.y = (u_xlatb4.y) ? float(Globals._LightShadowData.x) : float(1.0);
        u_xlat4.z = (u_xlatb4.z) ? float(Globals._LightShadowData.x) : float(1.0);
        u_xlat4.w = (u_xlatb4.w) ? float(Globals._LightShadowData.x) : float(1.0);
        u_xlat16_7.x = half(dot(u_xlat4, float4(0.25, 0.25, 0.25, 0.25)));
    } else {
        u_xlat16_7.x = half(1.0);
    }
    u_xlat16_7.x = half(u_xlat30 + float(u_xlat16_7.x));
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0h, 1.0h);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat16_0.x = _LightTexture0.sample(sampler_LightTexture0, u_xlat0.xx).w;
    u_xlat16_0.x = u_xlat16_7.x * u_xlat16_0.x;
    u_xlat16_7.x = input.TEXCOORD2.w;
    u_xlat16_7.y = input.TEXCOORD3.w;
    u_xlat16_7.z = input.TEXCOORD4.w;
    u_xlat16_37 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_37 = rsqrt(u_xlat16_37);
    u_xlat16_7.xyz = half3(u_xlat16_37) * u_xlat16_7.xyz;
    u_xlat16_8.xyz = u_xlat16_0.xxx * Globals._LightColor0.xyz;
    u_xlat16_9.xyz = (-input.TEXCOORD1.xyz) * half3(u_xlat16_33) + u_xlat16_7.xyz;
    u_xlat16_33 = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
    u_xlat16_0.x = max(u_xlat16_33, half(0.00100000005));
    u_xlat16_33 = rsqrt(u_xlat16_0.x);
    u_xlat16_9.xyz = half3(u_xlat16_33) * u_xlat16_9.xyz;
    u_xlat16_33 = dot(u_xlat16_3.xyz, u_xlat16_7.xyz);
    u_xlat16_33 = clamp(u_xlat16_33, 0.0h, 1.0h);
    u_xlat16_3.x = dot(u_xlat16_3.xyz, u_xlat16_9.xyz);
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0h, 1.0h);
    u_xlat16_13 = dot(u_xlat16_7.xyz, u_xlat16_9.xyz);
    u_xlat16_13 = clamp(u_xlat16_13, 0.0h, 1.0h);
    u_xlat16_23 = (-Globals._Glossiness) + half(1.0);
    u_xlat16_7.x = u_xlat16_23 * u_xlat16_23;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_0.x = u_xlat16_7.x * u_xlat16_7.x + half(-1.0);
    u_xlat16_0.x = u_xlat16_3.x * u_xlat16_0.x + half(1.00001001);
    u_xlat16_10 = max(u_xlat16_13, half(0.319999993));
    u_xlat16_20 = u_xlat16_23 * u_xlat16_23 + half(1.5);
    u_xlat16_10 = u_xlat16_20 * u_xlat16_10;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_10;
    u_xlat16_0.x = u_xlat16_7.x / u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x + half(-9.99999975e-05);
    u_xlat16_3.x = max(u_xlat16_0.x, half(0.0));
    u_xlat16_3.x = min(u_xlat16_3.x, half(100.0));
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xxx;
    u_xlat16_2.xyz = u_xlat16_1.xyz * half3(u_xlat16_32) + u_xlat16_2.xyz;
    u_xlat16_2.xyz = u_xlat16_8.xyz * u_xlat16_2.xyz;
    output.SV_Target0.xyz = half3(u_xlat16_33) * u_xlat16_2.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}


-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"
Uses vertex data channel "TexCoord0"

Constant Buffer "Globals" (258 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 32
  Matrix4x4 unity_WorldToObject at 96
  Matrix4x4 unity_MatrixVP at 160
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 _MainTex_ST at 224
  Vector4 _DetailAlbedoMap_ST at 240
  ScalarHalf _UVSec at 256
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    float4 _DetailAlbedoMap_ST;
    half _UVSec;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    half3 NORMAL0 [[ attribute(1) ]] ;
    float2 TEXCOORD0 [[ attribute(2) ]] ;
    float2 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float2 TEXCOORD6 [[ user(TEXCOORD6) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool u_xlatb0;
    float4 u_xlat1;
    float u_xlat6;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0] * input.POSITION0.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2] * input.POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    output.mtl_Position = Globals.hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlatb0 = Globals._UVSec==half(0.0);
    u_xlat0.xy = (bool(u_xlatb0)) ? input.TEXCOORD0.xy : input.TEXCOORD1.xy;
    output.TEXCOORD0.zw = u_xlat0.xy * Globals._DetailAlbedoMap_ST.xy + Globals._DetailAlbedoMap_ST.zw;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy * Globals._MainTex_ST.xy + Globals._MainTex_ST.zw;
    u_xlat0.xyz = input.POSITION0.yyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * input.POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * input.POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * input.POSITION0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-Globals._WorldSpaceCameraPos.xyzx.xyz);
    output.TEXCOORD1.xyz = half3(u_xlat1.xyz);
    u_xlat1.xyw = (-u_xlat0.xyz) * Globals._WorldSpaceLightPos0.www + Globals._WorldSpaceLightPos0.xyz;
    output.TEXCOORD5.xyz = u_xlat0.xyz;
    output.TEXCOORD2.w = half(u_xlat1.x);
    output.TEXCOORD2.xyz = half3(0.0, 0.0, 0.0);
    output.TEXCOORD3.w = half(u_xlat1.y);
    output.TEXCOORD3.xyz = half3(0.0, 0.0, 0.0);
    u_xlat0.x = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = rsqrt(u_xlat6);
    u_xlat1.xyz = float3(u_xlat6) * u_xlat0.xyz;
    output.TEXCOORD4 = half4(u_xlat1);
    output.TEXCOORD6.xy = float2(0.0, 0.0);
    return output;
}


-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0 sampler slot 2
Set CUBE Texture "_ShadowMapTexture" to slot 1
Set 2D Texture "_LightTextureB0" to slot 2 sampler slot 4
Set CUBE Texture "_LightTexture0" to slot 3
Set 2D Texture "unity_NHxRoughness" to slot 4 sampler slot 0

Constant Buffer "Globals" (224 bytes) on slot 0 {
  Matrix4x4 unity_MatrixV at 64
  Matrix4x4 unity_WorldToLight at 160
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _LightPositionRange at 16
  VectorHalf4 _LightShadowData at 32
  Vector4 unity_ShadowFadeCenterAndType at 48
  VectorHalf4 _LightColor0 at 128
  VectorHalf4 _Color at 136
  ScalarHalf _Metallic at 144
  ScalarHalf _Glossiness at 146
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _LightPositionRange;
    half4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    half4 _LightColor0;
    half4 _Color;
    half _Metallic;
    half _Glossiness;
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(0) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    sampler samplerunity_NHxRoughness [[ sampler (0) ]],
    sampler sampler_ShadowMapTexture [[ sampler (1) ]],
    sampler sampler_MainTex [[ sampler (2) ]],
    sampler sampler_LightTexture0 [[ sampler (3) ]],
    sampler sampler_LightTextureB0 [[ sampler (4) ]],
    texture2d<half, access::sample > _MainTex [[ texture (0) ]] ,
    texturecube<float, access::sample > _ShadowMapTexture [[ texture (1) ]] ,
    texture2d<half, access::sample > _LightTextureB0 [[ texture (2) ]] ,
    texturecube<half, access::sample > _LightTexture0 [[ texture (3) ]] ,
    texture2d<half, access::sample > unity_NHxRoughness [[ texture (4) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    float3 u_xlat6;
    half3 u_xlat16_6;
    bool u_xlatb6;
    float u_xlat12;
    float u_xlat18;
    half u_xlat16_20;
    u_xlat0.xyz = input.TEXCOORD5.xyz + (-Globals.unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat6.xyz = (-input.TEXCOORD5.xyz) + Globals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat1.x = Globals.hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = Globals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = Globals.hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat6.x = dot(u_xlat6.xyz, u_xlat1.xyz);
    u_xlat0.x = (-u_xlat6.x) + u_xlat0.x;
    u_xlat0.x = Globals.unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat6.x;
    u_xlat0.x = u_xlat0.x * float(Globals._LightShadowData.z) + float(Globals._LightShadowData.w);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat6.xyz = input.TEXCOORD5.xyz + (-Globals._LightPositionRange.xyz);
    u_xlat1.x = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat6.x = _ShadowMapTexture.sample(sampler_ShadowMapTexture, u_xlat6.xyz, level(0.0)).x;
    u_xlat12 = sqrt(u_xlat1.x);
    u_xlat12 = u_xlat12 * Globals._LightPositionRange.w;
    u_xlat12 = u_xlat12 * 0.970000029;
    u_xlatb6 = u_xlat6.x<u_xlat12;
    u_xlat16_2.x = (u_xlatb6) ? Globals._LightShadowData.x : half(1.0);
    u_xlat16_2.x = half(u_xlat0.x + float(u_xlat16_2.x));
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0h, 1.0h);
    u_xlat0.xyz = input.TEXCOORD5.yyy * Globals.hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_WorldToLight[0].xyz * input.TEXCOORD5.xxx + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_WorldToLight[2].xyz * input.TEXCOORD5.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + Globals.hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat16_0 = _LightTexture0.sample(sampler_LightTexture0, u_xlat0.xyz).w;
    u_xlat16_6.x = _LightTextureB0.sample(sampler_LightTextureB0, float2(u_xlat18)).w;
    u_xlat16_0 = u_xlat16_0 * u_xlat16_6.x;
    u_xlat16_0 = u_xlat16_2.x * u_xlat16_0;
    u_xlat16_2.xyz = half3(u_xlat16_0) * Globals._LightColor0.xyz;
    u_xlat16_3.x = input.TEXCOORD2.w;
    u_xlat16_3.y = input.TEXCOORD3.w;
    u_xlat16_3.z = input.TEXCOORD4.w;
    u_xlat16_20 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
    u_xlat16_20 = rsqrt(u_xlat16_20);
    u_xlat16_3.xyz = half3(u_xlat16_20) * u_xlat16_3.xyz;
    u_xlat16_20 = dot(input.TEXCOORD4.xyz, input.TEXCOORD4.xyz);
    u_xlat16_20 = rsqrt(u_xlat16_20);
    u_xlat16_4.xyz = half3(u_xlat16_20) * input.TEXCOORD4.xyz;
    u_xlat16_20 = dot(u_xlat16_4.xyz, u_xlat16_3.xyz);
    u_xlat16_20 = clamp(u_xlat16_20, 0.0h, 1.0h);
    u_xlat16_2.xyz = half3(u_xlat16_20) * u_xlat16_2.xyz;
    u_xlat16_20 = dot(input.TEXCOORD1.xyz, input.TEXCOORD1.xyz);
    u_xlat16_20 = rsqrt(u_xlat16_20);
    u_xlat16_5.xyz = half3(u_xlat16_20) * input.TEXCOORD1.xyz;
    u_xlat16_20 = dot((-u_xlat16_5.xyz), u_xlat16_4.xyz);
    u_xlat16_20 = u_xlat16_20 + u_xlat16_20;
    u_xlat16_4.xyz = u_xlat16_4.xyz * (-half3(u_xlat16_20)) + (-u_xlat16_5.xyz);
    u_xlat16_20 = dot(u_xlat16_4.xyz, u_xlat16_3.xyz);
    u_xlat16_20 = u_xlat16_20 * u_xlat16_20;
    u_xlat16_3.x = u_xlat16_20 * u_xlat16_20;
    u_xlat16_3.y = (-Globals._Glossiness) + half(1.0);
    u_xlat16_0 = unity_NHxRoughness.sample(samplerunity_NHxRoughness, float2(u_xlat16_3.xy)).w;
    u_xlat16_0 = u_xlat16_0 * half(16.0);
    u_xlat16_6.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_3.xyz = Globals._Color.xyz * u_xlat16_6.xyz + half3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat16_6.xyz = u_xlat16_6.xyz * Globals._Color.xyz;
    u_xlat16_3.xyz = half3(Globals._Metallic) * u_xlat16_3.xyz + half3(0.220916301, 0.220916301, 0.220916301);
    u_xlat16_3.xyz = half3(u_xlat16_0) * u_xlat16_3.xyz;
    u_xlat16_20 = (-Globals._Metallic) * half(0.779083729) + half(0.779083729);
    u_xlat16_3.xyz = u_xlat16_6.xyz * half3(u_xlat16_20) + u_xlat16_3.xyz;
    output.SV_Target0.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}


-- Hardware tier variant: Tier 2
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"
Uses vertex data channel "TexCoord0"

Constant Buffer "Globals" (258 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 32
  Matrix4x4 unity_WorldToObject at 96
  Matrix4x4 unity_MatrixVP at 160
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 _MainTex_ST at 224
  Vector4 _DetailAlbedoMap_ST at 240
  ScalarHalf _UVSec at 256
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    float4 _DetailAlbedoMap_ST;
    half _UVSec;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    half3 NORMAL0 [[ attribute(1) ]] ;
    float2 TEXCOORD0 [[ attribute(2) ]] ;
    float2 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float2 TEXCOORD6 [[ user(TEXCOORD6) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool u_xlatb0;
    float4 u_xlat1;
    float u_xlat6;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0] * input.POSITION0.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2] * input.POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    output.mtl_Position = Globals.hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlatb0 = Globals._UVSec==half(0.0);
    u_xlat0.xy = (bool(u_xlatb0)) ? input.TEXCOORD0.xy : input.TEXCOORD1.xy;
    output.TEXCOORD0.zw = u_xlat0.xy * Globals._DetailAlbedoMap_ST.xy + Globals._DetailAlbedoMap_ST.zw;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy * Globals._MainTex_ST.xy + Globals._MainTex_ST.zw;
    u_xlat0.xyz = input.POSITION0.yyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * input.POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * input.POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * input.POSITION0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-Globals._WorldSpaceCameraPos.xyzx.xyz);
    output.TEXCOORD1.xyz = half3(u_xlat1.xyz);
    u_xlat1.xyw = (-u_xlat0.xyz) * Globals._WorldSpaceLightPos0.www + Globals._WorldSpaceLightPos0.xyz;
    output.TEXCOORD5.xyz = u_xlat0.xyz;
    output.TEXCOORD2.w = half(u_xlat1.x);
    output.TEXCOORD2.xyz = half3(0.0, 0.0, 0.0);
    output.TEXCOORD3.w = half(u_xlat1.y);
    output.TEXCOORD3.xyz = half3(0.0, 0.0, 0.0);
    u_xlat0.x = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = rsqrt(u_xlat6);
    u_xlat1.xyz = float3(u_xlat6) * u_xlat0.xyz;
    output.TEXCOORD4 = half4(u_xlat1);
    output.TEXCOORD6.xy = float2(0.0, 0.0);
    return output;
}


-- Hardware tier variant: Tier 2
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0 sampler slot 1
Set CUBE Texture "_ShadowMapTexture" to slot 1 sampler slot 0
Set 2D Texture "_LightTextureB0" to slot 2 sampler slot 3
Set CUBE Texture "_LightTexture0" to slot 3 sampler slot 2

Constant Buffer "Globals" (224 bytes) on slot 0 {
  Matrix4x4 unity_MatrixV at 64
  Matrix4x4 unity_WorldToLight at 160
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _LightPositionRange at 16
  VectorHalf4 _LightShadowData at 32
  Vector4 unity_ShadowFadeCenterAndType at 48
  VectorHalf4 _LightColor0 at 128
  VectorHalf4 _Color at 136
  ScalarHalf _Metallic at 144
  ScalarHalf _Glossiness at 146
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _LightPositionRange;
    half4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    half4 _LightColor0;
    half4 _Color;
    half _Metallic;
    half _Glossiness;
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(0) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    sampler sampler_ShadowMapTexture [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_LightTexture0 [[ sampler (2) ]],
    sampler sampler_LightTextureB0 [[ sampler (3) ]],
    texture2d<half, access::sample > _MainTex [[ texture (0) ]] ,
    texturecube<float, access::sample > _ShadowMapTexture [[ texture (1) ]] ,
    texture2d<half, access::sample > _LightTextureB0 [[ texture (2) ]] ,
    texturecube<half, access::sample > _LightTexture0 [[ texture (3) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    float3 u_xlat6;
    half u_xlat16_6;
    bool u_xlatb6;
    half3 u_xlat16_9;
    float u_xlat12;
    float u_xlat18;
    half u_xlat16_20;
    half u_xlat16_21;
    u_xlat0.xyz = input.TEXCOORD5.xyz + (-Globals.unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat6.xyz = (-input.TEXCOORD5.xyz) + Globals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat1.x = Globals.hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = Globals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = Globals.hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat6.x = dot(u_xlat6.xyz, u_xlat1.xyz);
    u_xlat0.x = (-u_xlat6.x) + u_xlat0.x;
    u_xlat0.x = Globals.unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat6.x;
    u_xlat0.x = u_xlat0.x * float(Globals._LightShadowData.z) + float(Globals._LightShadowData.w);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat6.xyz = input.TEXCOORD5.xyz + (-Globals._LightPositionRange.xyz);
    u_xlat1.x = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat6.x = _ShadowMapTexture.sample(sampler_ShadowMapTexture, u_xlat6.xyz, level(0.0)).x;
    u_xlat12 = sqrt(u_xlat1.x);
    u_xlat12 = u_xlat12 * Globals._LightPositionRange.w;
    u_xlat12 = u_xlat12 * 0.970000029;
    u_xlatb6 = u_xlat6.x<u_xlat12;
    u_xlat16_2.x = (u_xlatb6) ? Globals._LightShadowData.x : half(1.0);
    u_xlat16_2.x = half(u_xlat0.x + float(u_xlat16_2.x));
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0h, 1.0h);
    u_xlat0.xyz = input.TEXCOORD5.yyy * Globals.hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_WorldToLight[0].xyz * input.TEXCOORD5.xxx + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_WorldToLight[2].xyz * input.TEXCOORD5.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + Globals.hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat16_0.x = _LightTexture0.sample(sampler_LightTexture0, u_xlat0.xyz).w;
    u_xlat16_6 = _LightTextureB0.sample(sampler_LightTextureB0, float2(u_xlat18)).w;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_6;
    u_xlat16_0.x = u_xlat16_2.x * u_xlat16_0.x;
    u_xlat16_2.xyz = u_xlat16_0.xxx * Globals._LightColor0.xyz;
    u_xlat16_20 = dot(input.TEXCOORD1.xyz, input.TEXCOORD1.xyz);
    u_xlat16_20 = rsqrt(u_xlat16_20);
    u_xlat16_3.x = input.TEXCOORD2.w;
    u_xlat16_3.y = input.TEXCOORD3.w;
    u_xlat16_3.z = input.TEXCOORD4.w;
    u_xlat16_21 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
    u_xlat16_21 = rsqrt(u_xlat16_21);
    u_xlat16_3.xyz = half3(u_xlat16_21) * u_xlat16_3.xyz;
    u_xlat16_4.xyz = (-input.TEXCOORD1.xyz) * half3(u_xlat16_20) + u_xlat16_3.xyz;
    u_xlat16_20 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
    u_xlat16_0.x = max(u_xlat16_20, half(0.00100000005));
    u_xlat16_20 = rsqrt(u_xlat16_0.x);
    u_xlat16_4.xyz = half3(u_xlat16_20) * u_xlat16_4.xyz;
    u_xlat16_20 = dot(u_xlat16_3.xyz, u_xlat16_4.xyz);
    u_xlat16_20 = clamp(u_xlat16_20, 0.0h, 1.0h);
    u_xlat16_0.x = max(u_xlat16_20, half(0.319999993));
    u_xlat16_20 = (-Globals._Glossiness) + half(1.0);
    u_xlat16_6 = u_xlat16_20 * u_xlat16_20 + half(1.5);
    u_xlat16_20 = u_xlat16_20 * u_xlat16_20;
    u_xlat16_0.x = u_xlat16_6 * u_xlat16_0.x;
    u_xlat16_21 = dot(input.TEXCOORD4.xyz, input.TEXCOORD4.xyz);
    u_xlat16_21 = rsqrt(u_xlat16_21);
    u_xlat16_5.xyz = half3(u_xlat16_21) * input.TEXCOORD4.xyz;
    u_xlat16_21 = dot(u_xlat16_5.xyz, u_xlat16_4.xyz);
    u_xlat16_21 = clamp(u_xlat16_21, 0.0h, 1.0h);
    u_xlat16_3.x = dot(u_xlat16_5.xyz, u_xlat16_3.xyz);
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0h, 1.0h);
    u_xlat16_9.x = u_xlat16_21 * u_xlat16_21;
    u_xlat16_6 = u_xlat16_20 * u_xlat16_20 + half(-1.0);
    u_xlat16_6 = u_xlat16_9.x * u_xlat16_6 + half(1.00001001);
    u_xlat16_0.x = u_xlat16_6 * u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_20 / u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x + half(-9.99999975e-05);
    u_xlat16_20 = max(u_xlat16_0.x, half(0.0));
    u_xlat16_20 = min(u_xlat16_20, half(100.0));
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_9.xyz = Globals._Color.xyz * u_xlat16_0.xyz + half3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat16_0.xyz = u_xlat16_0.xyz * Globals._Color.xyz;
    u_xlat16_9.xyz = half3(Globals._Metallic) * u_xlat16_9.xyz + half3(0.220916301, 0.220916301, 0.220916301);
    u_xlat16_9.xyz = half3(u_xlat16_20) * u_xlat16_9.xyz;
    u_xlat16_20 = (-Globals._Metallic) * half(0.779083729) + half(0.779083729);
    u_xlat16_9.xyz = u_xlat16_0.xyz * half3(u_xlat16_20) + u_xlat16_9.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_9.xyz;
    output.SV_Target0.xyz = u_xlat16_3.xxx * u_xlat16_2.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}


-- Hardware tier variant: Tier 3
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"
Uses vertex data channel "TexCoord0"

Constant Buffer "Globals" (258 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 32
  Matrix4x4 unity_WorldToObject at 96
  Matrix4x4 unity_MatrixVP at 160
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 _MainTex_ST at 224
  Vector4 _DetailAlbedoMap_ST at 240
  ScalarHalf _UVSec at 256
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    float4 _DetailAlbedoMap_ST;
    half _UVSec;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    half3 NORMAL0 [[ attribute(1) ]] ;
    float2 TEXCOORD0 [[ attribute(2) ]] ;
    float2 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float2 TEXCOORD6 [[ user(TEXCOORD6) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool u_xlatb0;
    float4 u_xlat1;
    float u_xlat6;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0] * input.POSITION0.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2] * input.POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    output.mtl_Position = Globals.hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlatb0 = Globals._UVSec==half(0.0);
    u_xlat0.xy = (bool(u_xlatb0)) ? input.TEXCOORD0.xy : input.TEXCOORD1.xy;
    output.TEXCOORD0.zw = u_xlat0.xy * Globals._DetailAlbedoMap_ST.xy + Globals._DetailAlbedoMap_ST.zw;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy * Globals._MainTex_ST.xy + Globals._MainTex_ST.zw;
    u_xlat0.xyz = input.POSITION0.yyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * input.POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * input.POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * input.POSITION0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-Globals._WorldSpaceCameraPos.xyzx.xyz);
    output.TEXCOORD1.xyz = half3(u_xlat1.xyz);
    u_xlat1.xyw = (-u_xlat0.xyz) * Globals._WorldSpaceLightPos0.www + Globals._WorldSpaceLightPos0.xyz;
    output.TEXCOORD5.xyz = u_xlat0.xyz;
    output.TEXCOORD2.w = half(u_xlat1.x);
    output.TEXCOORD2.xyz = half3(0.0, 0.0, 0.0);
    output.TEXCOORD3.w = half(u_xlat1.y);
    output.TEXCOORD3.xyz = half3(0.0, 0.0, 0.0);
    u_xlat0.x = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = rsqrt(u_xlat6);
    u_xlat1.xyz = float3(u_xlat6) * u_xlat0.xyz;
    output.TEXCOORD4 = half4(u_xlat1);
    output.TEXCOORD6.xy = float2(0.0, 0.0);
    return output;
}


-- Hardware tier variant: Tier 3
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0 sampler slot 1
Set CUBE Texture "_ShadowMapTexture" to slot 1 sampler slot 0
Set 2D Texture "_LightTextureB0" to slot 2 sampler slot 3
Set CUBE Texture "_LightTexture0" to slot 3 sampler slot 2

Constant Buffer "Globals" (224 bytes) on slot 0 {
  Matrix4x4 unity_MatrixV at 64
  Matrix4x4 unity_WorldToLight at 160
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _LightPositionRange at 16
  VectorHalf4 _LightShadowData at 32
  Vector4 unity_ShadowFadeCenterAndType at 48
  VectorHalf4 _LightColor0 at 128
  VectorHalf4 _Color at 136
  ScalarHalf _Metallic at 144
  ScalarHalf _Glossiness at 146
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _LightPositionRange;
    half4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    half4 _LightColor0;
    half4 _Color;
    half _Metallic;
    half _Glossiness;
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(0) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    sampler sampler_ShadowMapTexture [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_LightTexture0 [[ sampler (2) ]],
    sampler sampler_LightTextureB0 [[ sampler (3) ]],
    texture2d<half, access::sample > _MainTex [[ texture (0) ]] ,
    texturecube<float, access::sample > _ShadowMapTexture [[ texture (1) ]] ,
    texture2d<half, access::sample > _LightTextureB0 [[ texture (2) ]] ,
    texturecube<half, access::sample > _LightTexture0 [[ texture (3) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    float3 u_xlat6;
    half u_xlat16_6;
    bool u_xlatb6;
    half3 u_xlat16_9;
    float u_xlat12;
    float u_xlat18;
    half u_xlat16_20;
    half u_xlat16_21;
    u_xlat0.xyz = input.TEXCOORD5.xyz + (-Globals.unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat6.xyz = (-input.TEXCOORD5.xyz) + Globals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat1.x = Globals.hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = Globals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = Globals.hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat6.x = dot(u_xlat6.xyz, u_xlat1.xyz);
    u_xlat0.x = (-u_xlat6.x) + u_xlat0.x;
    u_xlat0.x = Globals.unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat6.x;
    u_xlat0.x = u_xlat0.x * float(Globals._LightShadowData.z) + float(Globals._LightShadowData.w);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat6.xyz = input.TEXCOORD5.xyz + (-Globals._LightPositionRange.xyz);
    u_xlat1.x = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat6.x = _ShadowMapTexture.sample(sampler_ShadowMapTexture, u_xlat6.xyz, level(0.0)).x;
    u_xlat12 = sqrt(u_xlat1.x);
    u_xlat12 = u_xlat12 * Globals._LightPositionRange.w;
    u_xlat12 = u_xlat12 * 0.970000029;
    u_xlatb6 = u_xlat6.x<u_xlat12;
    u_xlat16_2.x = (u_xlatb6) ? Globals._LightShadowData.x : half(1.0);
    u_xlat16_2.x = half(u_xlat0.x + float(u_xlat16_2.x));
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0h, 1.0h);
    u_xlat0.xyz = input.TEXCOORD5.yyy * Globals.hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_WorldToLight[0].xyz * input.TEXCOORD5.xxx + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_WorldToLight[2].xyz * input.TEXCOORD5.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + Globals.hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat16_0.x = _LightTexture0.sample(sampler_LightTexture0, u_xlat0.xyz).w;
    u_xlat16_6 = _LightTextureB0.sample(sampler_LightTextureB0, float2(u_xlat18)).w;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_6;
    u_xlat16_0.x = u_xlat16_2.x * u_xlat16_0.x;
    u_xlat16_2.xyz = u_xlat16_0.xxx * Globals._LightColor0.xyz;
    u_xlat16_20 = dot(input.TEXCOORD1.xyz, input.TEXCOORD1.xyz);
    u_xlat16_20 = rsqrt(u_xlat16_20);
    u_xlat16_3.x = input.TEXCOORD2.w;
    u_xlat16_3.y = input.TEXCOORD3.w;
    u_xlat16_3.z = input.TEXCOORD4.w;
    u_xlat16_21 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
    u_xlat16_21 = rsqrt(u_xlat16_21);
    u_xlat16_3.xyz = half3(u_xlat16_21) * u_xlat16_3.xyz;
    u_xlat16_4.xyz = (-input.TEXCOORD1.xyz) * half3(u_xlat16_20) + u_xlat16_3.xyz;
    u_xlat16_20 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
    u_xlat16_0.x = max(u_xlat16_20, half(0.00100000005));
    u_xlat16_20 = rsqrt(u_xlat16_0.x);
    u_xlat16_4.xyz = half3(u_xlat16_20) * u_xlat16_4.xyz;
    u_xlat16_20 = dot(u_xlat16_3.xyz, u_xlat16_4.xyz);
    u_xlat16_20 = clamp(u_xlat16_20, 0.0h, 1.0h);
    u_xlat16_0.x = max(u_xlat16_20, half(0.319999993));
    u_xlat16_20 = (-Globals._Glossiness) + half(1.0);
    u_xlat16_6 = u_xlat16_20 * u_xlat16_20 + half(1.5);
    u_xlat16_20 = u_xlat16_20 * u_xlat16_20;
    u_xlat16_0.x = u_xlat16_6 * u_xlat16_0.x;
    u_xlat16_21 = dot(input.TEXCOORD4.xyz, input.TEXCOORD4.xyz);
    u_xlat16_21 = rsqrt(u_xlat16_21);
    u_xlat16_5.xyz = half3(u_xlat16_21) * input.TEXCOORD4.xyz;
    u_xlat16_21 = dot(u_xlat16_5.xyz, u_xlat16_4.xyz);
    u_xlat16_21 = clamp(u_xlat16_21, 0.0h, 1.0h);
    u_xlat16_3.x = dot(u_xlat16_5.xyz, u_xlat16_3.xyz);
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0h, 1.0h);
    u_xlat16_9.x = u_xlat16_21 * u_xlat16_21;
    u_xlat16_6 = u_xlat16_20 * u_xlat16_20 + half(-1.0);
    u_xlat16_6 = u_xlat16_9.x * u_xlat16_6 + half(1.00001001);
    u_xlat16_0.x = u_xlat16_6 * u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_20 / u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x + half(-9.99999975e-05);
    u_xlat16_20 = max(u_xlat16_0.x, half(0.0));
    u_xlat16_20 = min(u_xlat16_20, half(100.0));
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_9.xyz = Globals._Color.xyz * u_xlat16_0.xyz + half3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat16_0.xyz = u_xlat16_0.xyz * Globals._Color.xyz;
    u_xlat16_9.xyz = half3(Globals._Metallic) * u_xlat16_9.xyz + half3(0.220916301, 0.220916301, 0.220916301);
    u_xlat16_9.xyz = half3(u_xlat16_20) * u_xlat16_9.xyz;
    u_xlat16_20 = (-Globals._Metallic) * half(0.779083729) + half(0.779083729);
    u_xlat16_9.xyz = u_xlat16_0.xyz * half3(u_xlat16_20) + u_xlat16_9.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_9.xyz;
    output.SV_Target0.xyz = u_xlat16_3.xxx * u_xlat16_2.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}


//////////////////////////////////////////////////////
Keywords set in this variant: POINT_COOKIE SHADOWS_CUBE SHADOWS_SOFT 
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"
Uses vertex data channel "TexCoord0"

Constant Buffer "Globals" (258 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 32
  Matrix4x4 unity_WorldToObject at 96
  Matrix4x4 unity_MatrixVP at 160
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 _MainTex_ST at 224
  Vector4 _DetailAlbedoMap_ST at 240
  ScalarHalf _UVSec at 256
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    float4 _DetailAlbedoMap_ST;
    half _UVSec;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    half3 NORMAL0 [[ attribute(1) ]] ;
    float2 TEXCOORD0 [[ attribute(2) ]] ;
    float2 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float2 TEXCOORD6 [[ user(TEXCOORD6) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool u_xlatb0;
    float4 u_xlat1;
    float u_xlat6;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0] * input.POSITION0.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2] * input.POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    output.mtl_Position = Globals.hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlatb0 = Globals._UVSec==half(0.0);
    u_xlat0.xy = (bool(u_xlatb0)) ? input.TEXCOORD0.xy : input.TEXCOORD1.xy;
    output.TEXCOORD0.zw = u_xlat0.xy * Globals._DetailAlbedoMap_ST.xy + Globals._DetailAlbedoMap_ST.zw;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy * Globals._MainTex_ST.xy + Globals._MainTex_ST.zw;
    u_xlat0.xyz = input.POSITION0.yyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * input.POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * input.POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * input.POSITION0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-Globals._WorldSpaceCameraPos.xyzx.xyz);
    output.TEXCOORD1.xyz = half3(u_xlat1.xyz);
    u_xlat1.xyw = (-u_xlat0.xyz) * Globals._WorldSpaceLightPos0.www + Globals._WorldSpaceLightPos0.xyz;
    output.TEXCOORD5.xyz = u_xlat0.xyz;
    output.TEXCOORD2.w = half(u_xlat1.x);
    output.TEXCOORD2.xyz = half3(0.0, 0.0, 0.0);
    output.TEXCOORD3.w = half(u_xlat1.y);
    output.TEXCOORD3.xyz = half3(0.0, 0.0, 0.0);
    u_xlat0.x = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = rsqrt(u_xlat6);
    u_xlat1.xyz = float3(u_xlat6) * u_xlat0.xyz;
    output.TEXCOORD4 = half4(u_xlat1);
    output.TEXCOORD6.xy = float2(0.0, 0.0);
    return output;
}


-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0 sampler slot 2
Set CUBE Texture "_ShadowMapTexture" to slot 1
Set 2D Texture "_LightTextureB0" to slot 2 sampler slot 4
Set CUBE Texture "_LightTexture0" to slot 3
Set 2D Texture "unity_NHxRoughness" to slot 4 sampler slot 0

Constant Buffer "Globals" (224 bytes) on slot 0 {
  Matrix4x4 unity_MatrixV at 64
  Matrix4x4 unity_WorldToLight at 160
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _LightPositionRange at 16
  VectorHalf4 _LightShadowData at 32
  Vector4 unity_ShadowFadeCenterAndType at 48
  VectorHalf4 _LightColor0 at 128
  VectorHalf4 _Color at 136
  ScalarHalf _Metallic at 144
  ScalarHalf _Glossiness at 146
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _LightPositionRange;
    half4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    half4 _LightColor0;
    half4 _Color;
    half _Metallic;
    half _Glossiness;
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(0) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    sampler samplerunity_NHxRoughness [[ sampler (0) ]],
    sampler sampler_ShadowMapTexture [[ sampler (1) ]],
    sampler sampler_MainTex [[ sampler (2) ]],
    sampler sampler_LightTexture0 [[ sampler (3) ]],
    sampler sampler_LightTextureB0 [[ sampler (4) ]],
    texture2d<half, access::sample > _MainTex [[ texture (0) ]] ,
    texturecube<float, access::sample > _ShadowMapTexture [[ texture (1) ]] ,
    texture2d<half, access::sample > _LightTextureB0 [[ texture (2) ]] ,
    texturecube<half, access::sample > _LightTexture0 [[ texture (3) ]] ,
    texture2d<half, access::sample > unity_NHxRoughness [[ texture (4) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    float4 u_xlat5;
    bool4 u_xlatb5;
    float4 u_xlat6;
    float3 u_xlat7;
    half3 u_xlat16_8;
    half3 u_xlat16_9;
    half u_xlat16_13;
    float u_xlat30;
    half u_xlat16_30;
    float u_xlat31;
    bool u_xlatb31;
    half u_xlat16_32;
    half u_xlat16_33;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * Globals._Color.xyz;
    u_xlat16_2.xyz = Globals._Color.xyz * u_xlat16_0.xyz + half3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat16_2.xyz = half3(Globals._Metallic) * u_xlat16_2.xyz + half3(0.220916301, 0.220916301, 0.220916301);
    u_xlat16_32 = (-Globals._Metallic) * half(0.779083729) + half(0.779083729);
    u_xlat16_3.x = dot(input.TEXCOORD4.xyz, input.TEXCOORD4.xyz);
    u_xlat16_3.x = rsqrt(u_xlat16_3.x);
    u_xlat16_3.xyz = u_xlat16_3.xxx * input.TEXCOORD4.xyz;
    u_xlat16_33 = dot(input.TEXCOORD1.xyz, input.TEXCOORD1.xyz);
    u_xlat16_33 = rsqrt(u_xlat16_33);
    u_xlat16_4.xyz = half3(u_xlat16_33) * input.TEXCOORD1.xyz;
    u_xlat0.xyz = input.TEXCOORD5.yyy * Globals.hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_WorldToLight[0].xyz * input.TEXCOORD5.xxx + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_WorldToLight[2].xyz * input.TEXCOORD5.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + Globals.hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat5.xyz = (-input.TEXCOORD5.xyz) + Globals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat6.x = Globals.hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat6.y = Globals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat6.z = Globals.hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat30 = dot(u_xlat5.xyz, u_xlat6.xyz);
    u_xlat5.xyz = input.TEXCOORD5.xyz + (-Globals.unity_ShadowFadeCenterAndType.xyz);
    u_xlat31 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat31 = sqrt(u_xlat31);
    u_xlat31 = (-u_xlat30) + u_xlat31;
    u_xlat30 = Globals.unity_ShadowFadeCenterAndType.w * u_xlat31 + u_xlat30;
    u_xlat30 = u_xlat30 * float(Globals._LightShadowData.z) + float(Globals._LightShadowData.w);
    u_xlat30 = clamp(u_xlat30, 0.0f, 1.0f);
    u_xlatb31 = u_xlat30<0.99000001;
    if(u_xlatb31){
        u_xlat5.xyz = input.TEXCOORD5.xyz + (-Globals._LightPositionRange.xyz);
        u_xlat31 = dot(u_xlat5.xyz, u_xlat5.xyz);
        u_xlat31 = sqrt(u_xlat31);
        u_xlat31 = u_xlat31 * Globals._LightPositionRange.w;
        u_xlat31 = u_xlat31 * 0.970000029;
        u_xlat6.xyz = u_xlat5.xyz + float3(0.0078125, 0.0078125, 0.0078125);
        u_xlat6.x = _ShadowMapTexture.sample(sampler_ShadowMapTexture, u_xlat6.xyz, level(0.0)).x;
        u_xlat7.xyz = u_xlat5.xyz + float3(-0.0078125, -0.0078125, 0.0078125);
        u_xlat6.y = _ShadowMapTexture.sample(sampler_ShadowMapTexture, u_xlat7.xyz, level(0.0)).x;
        u_xlat7.xyz = u_xlat5.xyz + float3(-0.0078125, 0.0078125, -0.0078125);
        u_xlat6.z = _ShadowMapTexture.sample(sampler_ShadowMapTexture, u_xlat7.xyz, level(0.0)).x;
        u_xlat5.xyz = u_xlat5.xyz + float3(0.0078125, -0.0078125, -0.0078125);
        u_xlat6.w = _ShadowMapTexture.sample(sampler_ShadowMapTexture, u_xlat5.xyz, level(0.0)).x;
        u_xlatb5 = (u_xlat6<float4(u_xlat31));
        u_xlat5.x = (u_xlatb5.x) ? float(Globals._LightShadowData.x) : float(1.0);
        u_xlat5.y = (u_xlatb5.y) ? float(Globals._LightShadowData.x) : float(1.0);
        u_xlat5.z = (u_xlatb5.z) ? float(Globals._LightShadowData.x) : float(1.0);
        u_xlat5.w = (u_xlatb5.w) ? float(Globals._LightShadowData.x) : float(1.0);
        u_xlat16_33 = half(dot(u_xlat5, float4(0.25, 0.25, 0.25, 0.25)));
    } else {
        u_xlat16_33 = half(1.0);
    }
    u_xlat16_33 = half(u_xlat30 + float(u_xlat16_33));
    u_xlat16_33 = clamp(u_xlat16_33, 0.0h, 1.0h);
    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat16_30 = _LightTextureB0.sample(sampler_LightTextureB0, float2(u_xlat30)).w;
    u_xlat16_0.x = _LightTexture0.sample(sampler_LightTexture0, u_xlat0.xyz).w;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_30;
    u_xlat16_0.x = u_xlat16_33 * u_xlat16_0.x;
    u_xlat16_8.x = input.TEXCOORD2.w;
    u_xlat16_8.y = input.TEXCOORD3.w;
    u_xlat16_8.z = input.TEXCOORD4.w;
    u_xlat16_33 = dot(u_xlat16_8.xyz, u_xlat16_8.xyz);
    u_xlat16_33 = rsqrt(u_xlat16_33);
    u_xlat16_8.xyz = half3(u_xlat16_33) * u_xlat16_8.xyz;
    u_xlat16_9.xyz = u_xlat16_0.xxx * Globals._LightColor0.xyz;
    u_xlat16_33 = dot((-u_xlat16_4.xyz), u_xlat16_3.xyz);
    u_xlat16_33 = u_xlat16_33 + u_xlat16_33;
    u_xlat16_4.xyz = u_xlat16_3.xyz * (-half3(u_xlat16_33)) + (-u_xlat16_4.xyz);
    u_xlat16_3.x = dot(u_xlat16_3.xyz, u_xlat16_8.xyz);
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0h, 1.0h);
    u_xlat16_13 = dot(u_xlat16_4.xyz, u_xlat16_8.xyz);
    u_xlat16_13 = u_xlat16_13 * u_xlat16_13;
    u_xlat16_4.x = u_xlat16_13 * u_xlat16_13;
    u_xlat16_4.y = (-Globals._Glossiness) + half(1.0);
    u_xlat16_0.x = unity_NHxRoughness.sample(samplerunity_NHxRoughness, float2(u_xlat16_4.xy)).w;
    u_xlat16_0.x = u_xlat16_0.x * half(16.0);
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_0.xxx;
    u_xlat16_2.xyz = u_xlat16_1.xyz * half3(u_xlat16_32) + u_xlat16_2.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_9.xyz;
    output.SV_Target0.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}


-- Hardware tier variant: Tier 2
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"
Uses vertex data channel "TexCoord0"

Constant Buffer "Globals" (258 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 32
  Matrix4x4 unity_WorldToObject at 96
  Matrix4x4 unity_MatrixVP at 160
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 _MainTex_ST at 224
  Vector4 _DetailAlbedoMap_ST at 240
  ScalarHalf _UVSec at 256
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    float4 _DetailAlbedoMap_ST;
    half _UVSec;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    half3 NORMAL0 [[ attribute(1) ]] ;
    float2 TEXCOORD0 [[ attribute(2) ]] ;
    float2 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float2 TEXCOORD6 [[ user(TEXCOORD6) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool u_xlatb0;
    float4 u_xlat1;
    float u_xlat6;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0] * input.POSITION0.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2] * input.POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    output.mtl_Position = Globals.hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlatb0 = Globals._UVSec==half(0.0);
    u_xlat0.xy = (bool(u_xlatb0)) ? input.TEXCOORD0.xy : input.TEXCOORD1.xy;
    output.TEXCOORD0.zw = u_xlat0.xy * Globals._DetailAlbedoMap_ST.xy + Globals._DetailAlbedoMap_ST.zw;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy * Globals._MainTex_ST.xy + Globals._MainTex_ST.zw;
    u_xlat0.xyz = input.POSITION0.yyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * input.POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * input.POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * input.POSITION0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-Globals._WorldSpaceCameraPos.xyzx.xyz);
    output.TEXCOORD1.xyz = half3(u_xlat1.xyz);
    u_xlat1.xyw = (-u_xlat0.xyz) * Globals._WorldSpaceLightPos0.www + Globals._WorldSpaceLightPos0.xyz;
    output.TEXCOORD5.xyz = u_xlat0.xyz;
    output.TEXCOORD2.w = half(u_xlat1.x);
    output.TEXCOORD2.xyz = half3(0.0, 0.0, 0.0);
    output.TEXCOORD3.w = half(u_xlat1.y);
    output.TEXCOORD3.xyz = half3(0.0, 0.0, 0.0);
    u_xlat0.x = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = rsqrt(u_xlat6);
    u_xlat1.xyz = float3(u_xlat6) * u_xlat0.xyz;
    output.TEXCOORD4 = half4(u_xlat1);
    output.TEXCOORD6.xy = float2(0.0, 0.0);
    return output;
}


-- Hardware tier variant: Tier 2
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0 sampler slot 1
Set CUBE Texture "_ShadowMapTexture" to slot 1 sampler slot 0
Set 2D Texture "_LightTextureB0" to slot 2 sampler slot 3
Set CUBE Texture "_LightTexture0" to slot 3 sampler slot 2

Constant Buffer "Globals" (224 bytes) on slot 0 {
  Matrix4x4 unity_MatrixV at 64
  Matrix4x4 unity_WorldToLight at 160
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _LightPositionRange at 16
  VectorHalf4 _LightShadowData at 32
  Vector4 unity_ShadowFadeCenterAndType at 48
  VectorHalf4 _LightColor0 at 128
  VectorHalf4 _Color at 136
  ScalarHalf _Metallic at 144
  ScalarHalf _Glossiness at 146
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _LightPositionRange;
    half4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    half4 _LightColor0;
    half4 _Color;
    half _Metallic;
    half _Glossiness;
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(0) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    sampler sampler_ShadowMapTexture [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_LightTexture0 [[ sampler (2) ]],
    sampler sampler_LightTextureB0 [[ sampler (3) ]],
    texture2d<half, access::sample > _MainTex [[ texture (0) ]] ,
    texturecube<float, access::sample > _ShadowMapTexture [[ texture (1) ]] ,
    texture2d<half, access::sample > _LightTextureB0 [[ texture (2) ]] ,
    texturecube<half, access::sample > _LightTexture0 [[ texture (3) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    float4 u_xlat4;
    bool4 u_xlatb4;
    float4 u_xlat5;
    float3 u_xlat6;
    half3 u_xlat16_7;
    half3 u_xlat16_8;
    half3 u_xlat16_9;
    half u_xlat16_10;
    half u_xlat16_13;
    half u_xlat16_20;
    half u_xlat16_23;
    float u_xlat30;
    half u_xlat16_30;
    float u_xlat31;
    bool u_xlatb31;
    half u_xlat16_32;
    half u_xlat16_33;
    half u_xlat16_37;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * Globals._Color.xyz;
    u_xlat16_2.xyz = Globals._Color.xyz * u_xlat16_0.xyz + half3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat16_2.xyz = half3(Globals._Metallic) * u_xlat16_2.xyz + half3(0.220916301, 0.220916301, 0.220916301);
    u_xlat16_32 = (-Globals._Metallic) * half(0.779083729) + half(0.779083729);
    u_xlat16_3.x = dot(input.TEXCOORD4.xyz, input.TEXCOORD4.xyz);
    u_xlat16_3.x = rsqrt(u_xlat16_3.x);
    u_xlat16_3.xyz = u_xlat16_3.xxx * input.TEXCOORD4.xyz;
    u_xlat16_33 = dot(input.TEXCOORD1.xyz, input.TEXCOORD1.xyz);
    u_xlat16_33 = rsqrt(u_xlat16_33);
    u_xlat0.xyz = input.TEXCOORD5.yyy * Globals.hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_WorldToLight[0].xyz * input.TEXCOORD5.xxx + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_WorldToLight[2].xyz * input.TEXCOORD5.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + Globals.hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat4.xyz = (-input.TEXCOORD5.xyz) + Globals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat5.x = Globals.hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat5.y = Globals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat5.z = Globals.hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat30 = dot(u_xlat4.xyz, u_xlat5.xyz);
    u_xlat4.xyz = input.TEXCOORD5.xyz + (-Globals.unity_ShadowFadeCenterAndType.xyz);
    u_xlat31 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat31 = sqrt(u_xlat31);
    u_xlat31 = (-u_xlat30) + u_xlat31;
    u_xlat30 = Globals.unity_ShadowFadeCenterAndType.w * u_xlat31 + u_xlat30;
    u_xlat30 = u_xlat30 * float(Globals._LightShadowData.z) + float(Globals._LightShadowData.w);
    u_xlat30 = clamp(u_xlat30, 0.0f, 1.0f);
    u_xlatb31 = u_xlat30<0.99000001;
    if(u_xlatb31){
        u_xlat4.xyz = input.TEXCOORD5.xyz + (-Globals._LightPositionRange.xyz);
        u_xlat31 = dot(u_xlat4.xyz, u_xlat4.xyz);
        u_xlat31 = sqrt(u_xlat31);
        u_xlat31 = u_xlat31 * Globals._LightPositionRange.w;
        u_xlat31 = u_xlat31 * 0.970000029;
        u_xlat5.xyz = u_xlat4.xyz + float3(0.0078125, 0.0078125, 0.0078125);
        u_xlat5.x = _ShadowMapTexture.sample(sampler_ShadowMapTexture, u_xlat5.xyz, level(0.0)).x;
        u_xlat6.xyz = u_xlat4.xyz + float3(-0.0078125, -0.0078125, 0.0078125);
        u_xlat5.y = _ShadowMapTexture.sample(sampler_ShadowMapTexture, u_xlat6.xyz, level(0.0)).x;
        u_xlat6.xyz = u_xlat4.xyz + float3(-0.0078125, 0.0078125, -0.0078125);
        u_xlat5.z = _ShadowMapTexture.sample(sampler_ShadowMapTexture, u_xlat6.xyz, level(0.0)).x;
        u_xlat4.xyz = u_xlat4.xyz + float3(0.0078125, -0.0078125, -0.0078125);
        u_xlat5.w = _ShadowMapTexture.sample(sampler_ShadowMapTexture, u_xlat4.xyz, level(0.0)).x;
        u_xlatb4 = (u_xlat5<float4(u_xlat31));
        u_xlat4.x = (u_xlatb4.x) ? float(Globals._LightShadowData.x) : float(1.0);
        u_xlat4.y = (u_xlatb4.y) ? float(Globals._LightShadowData.x) : float(1.0);
        u_xlat4.z = (u_xlatb4.z) ? float(Globals._LightShadowData.x) : float(1.0);
        u_xlat4.w = (u_xlatb4.w) ? float(Globals._LightShadowData.x) : float(1.0);
        u_xlat16_7.x = half(dot(u_xlat4, float4(0.25, 0.25, 0.25, 0.25)));
    } else {
        u_xlat16_7.x = half(1.0);
    }
    u_xlat16_7.x = half(u_xlat30 + float(u_xlat16_7.x));
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0h, 1.0h);
    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat16_30 = _LightTextureB0.sample(sampler_LightTextureB0, float2(u_xlat30)).w;
    u_xlat16_0.x = _LightTexture0.sample(sampler_LightTexture0, u_xlat0.xyz).w;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_30;
    u_xlat16_0.x = u_xlat16_7.x * u_xlat16_0.x;
    u_xlat16_7.x = input.TEXCOORD2.w;
    u_xlat16_7.y = input.TEXCOORD3.w;
    u_xlat16_7.z = input.TEXCOORD4.w;
    u_xlat16_37 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_37 = rsqrt(u_xlat16_37);
    u_xlat16_7.xyz = half3(u_xlat16_37) * u_xlat16_7.xyz;
    u_xlat16_8.xyz = u_xlat16_0.xxx * Globals._LightColor0.xyz;
    u_xlat16_9.xyz = (-input.TEXCOORD1.xyz) * half3(u_xlat16_33) + u_xlat16_7.xyz;
    u_xlat16_33 = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
    u_xlat16_0.x = max(u_xlat16_33, half(0.00100000005));
    u_xlat16_33 = rsqrt(u_xlat16_0.x);
    u_xlat16_9.xyz = half3(u_xlat16_33) * u_xlat16_9.xyz;
    u_xlat16_33 = dot(u_xlat16_3.xyz, u_xlat16_7.xyz);
    u_xlat16_33 = clamp(u_xlat16_33, 0.0h, 1.0h);
    u_xlat16_3.x = dot(u_xlat16_3.xyz, u_xlat16_9.xyz);
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0h, 1.0h);
    u_xlat16_13 = dot(u_xlat16_7.xyz, u_xlat16_9.xyz);
    u_xlat16_13 = clamp(u_xlat16_13, 0.0h, 1.0h);
    u_xlat16_23 = (-Globals._Glossiness) + half(1.0);
    u_xlat16_7.x = u_xlat16_23 * u_xlat16_23;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_0.x = u_xlat16_7.x * u_xlat16_7.x + half(-1.0);
    u_xlat16_0.x = u_xlat16_3.x * u_xlat16_0.x + half(1.00001001);
    u_xlat16_10 = max(u_xlat16_13, half(0.319999993));
    u_xlat16_20 = u_xlat16_23 * u_xlat16_23 + half(1.5);
    u_xlat16_10 = u_xlat16_20 * u_xlat16_10;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_10;
    u_xlat16_0.x = u_xlat16_7.x / u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x + half(-9.99999975e-05);
    u_xlat16_3.x = max(u_xlat16_0.x, half(0.0));
    u_xlat16_3.x = min(u_xlat16_3.x, half(100.0));
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xxx;
    u_xlat16_2.xyz = u_xlat16_1.xyz * half3(u_xlat16_32) + u_xlat16_2.xyz;
    u_xlat16_2.xyz = u_xlat16_8.xyz * u_xlat16_2.xyz;
    output.SV_Target0.xyz = half3(u_xlat16_33) * u_xlat16_2.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}


-- Hardware tier variant: Tier 3
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"
Uses vertex data channel "TexCoord0"

Constant Buffer "Globals" (258 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 32
  Matrix4x4 unity_WorldToObject at 96
  Matrix4x4 unity_MatrixVP at 160
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 _MainTex_ST at 224
  Vector4 _DetailAlbedoMap_ST at 240
  ScalarHalf _UVSec at 256
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    float4 _DetailAlbedoMap_ST;
    half _UVSec;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    half3 NORMAL0 [[ attribute(1) ]] ;
    float2 TEXCOORD0 [[ attribute(2) ]] ;
    float2 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float2 TEXCOORD6 [[ user(TEXCOORD6) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool u_xlatb0;
    float4 u_xlat1;
    float u_xlat6;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0] * input.POSITION0.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2] * input.POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    output.mtl_Position = Globals.hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlatb0 = Globals._UVSec==half(0.0);
    u_xlat0.xy = (bool(u_xlatb0)) ? input.TEXCOORD0.xy : input.TEXCOORD1.xy;
    output.TEXCOORD0.zw = u_xlat0.xy * Globals._DetailAlbedoMap_ST.xy + Globals._DetailAlbedoMap_ST.zw;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy * Globals._MainTex_ST.xy + Globals._MainTex_ST.zw;
    u_xlat0.xyz = input.POSITION0.yyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * input.POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * input.POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * input.POSITION0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-Globals._WorldSpaceCameraPos.xyzx.xyz);
    output.TEXCOORD1.xyz = half3(u_xlat1.xyz);
    u_xlat1.xyw = (-u_xlat0.xyz) * Globals._WorldSpaceLightPos0.www + Globals._WorldSpaceLightPos0.xyz;
    output.TEXCOORD5.xyz = u_xlat0.xyz;
    output.TEXCOORD2.w = half(u_xlat1.x);
    output.TEXCOORD2.xyz = half3(0.0, 0.0, 0.0);
    output.TEXCOORD3.w = half(u_xlat1.y);
    output.TEXCOORD3.xyz = half3(0.0, 0.0, 0.0);
    u_xlat0.x = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = rsqrt(u_xlat6);
    u_xlat1.xyz = float3(u_xlat6) * u_xlat0.xyz;
    output.TEXCOORD4 = half4(u_xlat1);
    output.TEXCOORD6.xy = float2(0.0, 0.0);
    return output;
}


-- Hardware tier variant: Tier 3
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0 sampler slot 1
Set CUBE Texture "_ShadowMapTexture" to slot 1 sampler slot 0
Set 2D Texture "_LightTextureB0" to slot 2 sampler slot 3
Set CUBE Texture "_LightTexture0" to slot 3 sampler slot 2

Constant Buffer "Globals" (224 bytes) on slot 0 {
  Matrix4x4 unity_MatrixV at 64
  Matrix4x4 unity_WorldToLight at 160
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _LightPositionRange at 16
  VectorHalf4 _LightShadowData at 32
  Vector4 unity_ShadowFadeCenterAndType at 48
  VectorHalf4 _LightColor0 at 128
  VectorHalf4 _Color at 136
  ScalarHalf _Metallic at 144
  ScalarHalf _Glossiness at 146
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _LightPositionRange;
    half4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    half4 _LightColor0;
    half4 _Color;
    half _Metallic;
    half _Glossiness;
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(0) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    sampler sampler_ShadowMapTexture [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_LightTexture0 [[ sampler (2) ]],
    sampler sampler_LightTextureB0 [[ sampler (3) ]],
    texture2d<half, access::sample > _MainTex [[ texture (0) ]] ,
    texturecube<float, access::sample > _ShadowMapTexture [[ texture (1) ]] ,
    texture2d<half, access::sample > _LightTextureB0 [[ texture (2) ]] ,
    texturecube<half, access::sample > _LightTexture0 [[ texture (3) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    float4 u_xlat4;
    bool4 u_xlatb4;
    float4 u_xlat5;
    float3 u_xlat6;
    half3 u_xlat16_7;
    half3 u_xlat16_8;
    half3 u_xlat16_9;
    half u_xlat16_10;
    half u_xlat16_13;
    half u_xlat16_20;
    half u_xlat16_23;
    float u_xlat30;
    half u_xlat16_30;
    float u_xlat31;
    bool u_xlatb31;
    half u_xlat16_32;
    half u_xlat16_33;
    half u_xlat16_37;
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * Globals._Color.xyz;
    u_xlat16_2.xyz = Globals._Color.xyz * u_xlat16_0.xyz + half3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat16_2.xyz = half3(Globals._Metallic) * u_xlat16_2.xyz + half3(0.220916301, 0.220916301, 0.220916301);
    u_xlat16_32 = (-Globals._Metallic) * half(0.779083729) + half(0.779083729);
    u_xlat16_3.x = dot(input.TEXCOORD4.xyz, input.TEXCOORD4.xyz);
    u_xlat16_3.x = rsqrt(u_xlat16_3.x);
    u_xlat16_3.xyz = u_xlat16_3.xxx * input.TEXCOORD4.xyz;
    u_xlat16_33 = dot(input.TEXCOORD1.xyz, input.TEXCOORD1.xyz);
    u_xlat16_33 = rsqrt(u_xlat16_33);
    u_xlat0.xyz = input.TEXCOORD5.yyy * Globals.hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_WorldToLight[0].xyz * input.TEXCOORD5.xxx + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_WorldToLight[2].xyz * input.TEXCOORD5.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + Globals.hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat4.xyz = (-input.TEXCOORD5.xyz) + Globals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat5.x = Globals.hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat5.y = Globals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat5.z = Globals.hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat30 = dot(u_xlat4.xyz, u_xlat5.xyz);
    u_xlat4.xyz = input.TEXCOORD5.xyz + (-Globals.unity_ShadowFadeCenterAndType.xyz);
    u_xlat31 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat31 = sqrt(u_xlat31);
    u_xlat31 = (-u_xlat30) + u_xlat31;
    u_xlat30 = Globals.unity_ShadowFadeCenterAndType.w * u_xlat31 + u_xlat30;
    u_xlat30 = u_xlat30 * float(Globals._LightShadowData.z) + float(Globals._LightShadowData.w);
    u_xlat30 = clamp(u_xlat30, 0.0f, 1.0f);
    u_xlatb31 = u_xlat30<0.99000001;
    if(u_xlatb31){
        u_xlat4.xyz = input.TEXCOORD5.xyz + (-Globals._LightPositionRange.xyz);
        u_xlat31 = dot(u_xlat4.xyz, u_xlat4.xyz);
        u_xlat31 = sqrt(u_xlat31);
        u_xlat31 = u_xlat31 * Globals._LightPositionRange.w;
        u_xlat31 = u_xlat31 * 0.970000029;
        u_xlat5.xyz = u_xlat4.xyz + float3(0.0078125, 0.0078125, 0.0078125);
        u_xlat5.x = _ShadowMapTexture.sample(sampler_ShadowMapTexture, u_xlat5.xyz, level(0.0)).x;
        u_xlat6.xyz = u_xlat4.xyz + float3(-0.0078125, -0.0078125, 0.0078125);
        u_xlat5.y = _ShadowMapTexture.sample(sampler_ShadowMapTexture, u_xlat6.xyz, level(0.0)).x;
        u_xlat6.xyz = u_xlat4.xyz + float3(-0.0078125, 0.0078125, -0.0078125);
        u_xlat5.z = _ShadowMapTexture.sample(sampler_ShadowMapTexture, u_xlat6.xyz, level(0.0)).x;
        u_xlat4.xyz = u_xlat4.xyz + float3(0.0078125, -0.0078125, -0.0078125);
        u_xlat5.w = _ShadowMapTexture.sample(sampler_ShadowMapTexture, u_xlat4.xyz, level(0.0)).x;
        u_xlatb4 = (u_xlat5<float4(u_xlat31));
        u_xlat4.x = (u_xlatb4.x) ? float(Globals._LightShadowData.x) : float(1.0);
        u_xlat4.y = (u_xlatb4.y) ? float(Globals._LightShadowData.x) : float(1.0);
        u_xlat4.z = (u_xlatb4.z) ? float(Globals._LightShadowData.x) : float(1.0);
        u_xlat4.w = (u_xlatb4.w) ? float(Globals._LightShadowData.x) : float(1.0);
        u_xlat16_7.x = half(dot(u_xlat4, float4(0.25, 0.25, 0.25, 0.25)));
    } else {
        u_xlat16_7.x = half(1.0);
    }
    u_xlat16_7.x = half(u_xlat30 + float(u_xlat16_7.x));
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0h, 1.0h);
    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat16_30 = _LightTextureB0.sample(sampler_LightTextureB0, float2(u_xlat30)).w;
    u_xlat16_0.x = _LightTexture0.sample(sampler_LightTexture0, u_xlat0.xyz).w;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_30;
    u_xlat16_0.x = u_xlat16_7.x * u_xlat16_0.x;
    u_xlat16_7.x = input.TEXCOORD2.w;
    u_xlat16_7.y = input.TEXCOORD3.w;
    u_xlat16_7.z = input.TEXCOORD4.w;
    u_xlat16_37 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_37 = rsqrt(u_xlat16_37);
    u_xlat16_7.xyz = half3(u_xlat16_37) * u_xlat16_7.xyz;
    u_xlat16_8.xyz = u_xlat16_0.xxx * Globals._LightColor0.xyz;
    u_xlat16_9.xyz = (-input.TEXCOORD1.xyz) * half3(u_xlat16_33) + u_xlat16_7.xyz;
    u_xlat16_33 = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
    u_xlat16_0.x = max(u_xlat16_33, half(0.00100000005));
    u_xlat16_33 = rsqrt(u_xlat16_0.x);
    u_xlat16_9.xyz = half3(u_xlat16_33) * u_xlat16_9.xyz;
    u_xlat16_33 = dot(u_xlat16_3.xyz, u_xlat16_7.xyz);
    u_xlat16_33 = clamp(u_xlat16_33, 0.0h, 1.0h);
    u_xlat16_3.x = dot(u_xlat16_3.xyz, u_xlat16_9.xyz);
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0h, 1.0h);
    u_xlat16_13 = dot(u_xlat16_7.xyz, u_xlat16_9.xyz);
    u_xlat16_13 = clamp(u_xlat16_13, 0.0h, 1.0h);
    u_xlat16_23 = (-Globals._Glossiness) + half(1.0);
    u_xlat16_7.x = u_xlat16_23 * u_xlat16_23;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_0.x = u_xlat16_7.x * u_xlat16_7.x + half(-1.0);
    u_xlat16_0.x = u_xlat16_3.x * u_xlat16_0.x + half(1.00001001);
    u_xlat16_10 = max(u_xlat16_13, half(0.319999993));
    u_xlat16_20 = u_xlat16_23 * u_xlat16_23 + half(1.5);
    u_xlat16_10 = u_xlat16_20 * u_xlat16_10;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_10;
    u_xlat16_0.x = u_xlat16_7.x / u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x + half(-9.99999975e-05);
    u_xlat16_3.x = max(u_xlat16_0.x, half(0.0));
    u_xlat16_3.x = min(u_xlat16_3.x, half(100.0));
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xxx;
    u_xlat16_2.xyz = u_xlat16_1.xyz * half3(u_xlat16_32) + u_xlat16_2.xyz;
    u_xlat16_2.xyz = u_xlat16_8.xyz * u_xlat16_2.xyz;
    output.SV_Target0.xyz = half3(u_xlat16_33) * u_xlat16_2.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}


 }
 Pass {
  Name "SHADOWCASTER"
  Tags { "LIGHTMODE"="SHADOWCASTER" "SHADOWSUPPORT"="true" "RenderType"="Opaque" "PerformanceChecks"="False" }
  //////////////////////////////////
  //                              //
  //      Compiled programs       //
  //                              //
  //////////////////////////////////
//////////////////////////////////////////////////////
Keywords set in this variant: SHADOWS_DEPTH 
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"

Constant Buffer "Globals" (224 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 32
  Matrix4x4 unity_WorldToObject at 96
  Matrix4x4 unity_MatrixVP at 160
  Vector4 _WorldSpaceLightPos0 at 0
  Vector4 unity_LightShadowBias at 16
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float4 _WorldSpaceLightPos0;
    float4 unity_LightShadowBias;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    float u_xlat6;
    float u_xlat9;
    bool u_xlatb9;
    u_xlat0.x = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = rsqrt(u_xlat9);
    u_xlat0.xyz = float3(u_xlat9) * u_xlat0.xyz;
    u_xlat1 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0] * input.POSITION0.xxxx + u_xlat1;
    u_xlat1 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2] * input.POSITION0.zzzz + u_xlat1;
    u_xlat1 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[3] * input.POSITION0.wwww + u_xlat1;
    u_xlat2.xyz = (-u_xlat1.xyz) * Globals._WorldSpaceLightPos0.www + Globals._WorldSpaceLightPos0.xyz;
    u_xlat9 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat9 = rsqrt(u_xlat9);
    u_xlat2.xyz = float3(u_xlat9) * u_xlat2.xyz;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat2.xyz);
    u_xlat9 = (-u_xlat9) * u_xlat9 + 1.0;
    u_xlat9 = sqrt(u_xlat9);
    u_xlat9 = u_xlat9 * Globals.unity_LightShadowBias.z;
    u_xlat0.xyz = (-u_xlat0.xyz) * float3(u_xlat9) + u_xlat1.xyz;
    u_xlatb9 = Globals.unity_LightShadowBias.z!=0.0;
    u_xlat0.xyz = (bool(u_xlatb9)) ? u_xlat0.xyz : u_xlat1.xyz;
    u_xlat2 = u_xlat0.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = Globals.hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat2;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat1.x = Globals.unity_LightShadowBias.x / u_xlat0.w;
    u_xlat1.x = min(u_xlat1.x, 0.0);
    u_xlat1.x = max(u_xlat1.x, -1.0);
    u_xlat6 = u_xlat0.z + u_xlat1.x;
    u_xlat1.x = min(u_xlat0.w, u_xlat6);
    output.mtl_Position.xyw = u_xlat0.xyw;
    u_xlat0.x = (-u_xlat6) + u_xlat1.x;
    output.mtl_Position.z = Globals.unity_LightShadowBias.y * u_xlat0.x + u_xlat6;
    return output;
}


-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(0) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
)
{
    Mtl_FragmentOut output;
    output.SV_Target0 = half4(0.0, 0.0, 0.0, 0.0);
    return output;
}


-- Hardware tier variant: Tier 2
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"

Constant Buffer "Globals" (224 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 32
  Matrix4x4 unity_WorldToObject at 96
  Matrix4x4 unity_MatrixVP at 160
  Vector4 _WorldSpaceLightPos0 at 0
  Vector4 unity_LightShadowBias at 16
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float4 _WorldSpaceLightPos0;
    float4 unity_LightShadowBias;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    float u_xlat6;
    float u_xlat9;
    bool u_xlatb9;
    u_xlat0.x = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = rsqrt(u_xlat9);
    u_xlat0.xyz = float3(u_xlat9) * u_xlat0.xyz;
    u_xlat1 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0] * input.POSITION0.xxxx + u_xlat1;
    u_xlat1 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2] * input.POSITION0.zzzz + u_xlat1;
    u_xlat1 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[3] * input.POSITION0.wwww + u_xlat1;
    u_xlat2.xyz = (-u_xlat1.xyz) * Globals._WorldSpaceLightPos0.www + Globals._WorldSpaceLightPos0.xyz;
    u_xlat9 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat9 = rsqrt(u_xlat9);
    u_xlat2.xyz = float3(u_xlat9) * u_xlat2.xyz;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat2.xyz);
    u_xlat9 = (-u_xlat9) * u_xlat9 + 1.0;
    u_xlat9 = sqrt(u_xlat9);
    u_xlat9 = u_xlat9 * Globals.unity_LightShadowBias.z;
    u_xlat0.xyz = (-u_xlat0.xyz) * float3(u_xlat9) + u_xlat1.xyz;
    u_xlatb9 = Globals.unity_LightShadowBias.z!=0.0;
    u_xlat0.xyz = (bool(u_xlatb9)) ? u_xlat0.xyz : u_xlat1.xyz;
    u_xlat2 = u_xlat0.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = Globals.hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat2;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat1.x = Globals.unity_LightShadowBias.x / u_xlat0.w;
    u_xlat1.x = min(u_xlat1.x, 0.0);
    u_xlat1.x = max(u_xlat1.x, -1.0);
    u_xlat6 = u_xlat0.z + u_xlat1.x;
    u_xlat1.x = min(u_xlat0.w, u_xlat6);
    output.mtl_Position.xyw = u_xlat0.xyw;
    u_xlat0.x = (-u_xlat6) + u_xlat1.x;
    output.mtl_Position.z = Globals.unity_LightShadowBias.y * u_xlat0.x + u_xlat6;
    return output;
}


-- Hardware tier variant: Tier 2
-- Fragment shader for "metal":
Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(0) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
)
{
    Mtl_FragmentOut output;
    output.SV_Target0 = half4(0.0, 0.0, 0.0, 0.0);
    return output;
}


-- Hardware tier variant: Tier 3
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"

Constant Buffer "Globals" (224 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 32
  Matrix4x4 unity_WorldToObject at 96
  Matrix4x4 unity_MatrixVP at 160
  Vector4 _WorldSpaceLightPos0 at 0
  Vector4 unity_LightShadowBias at 16
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float4 _WorldSpaceLightPos0;
    float4 unity_LightShadowBias;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    float u_xlat6;
    float u_xlat9;
    bool u_xlatb9;
    u_xlat0.x = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = rsqrt(u_xlat9);
    u_xlat0.xyz = float3(u_xlat9) * u_xlat0.xyz;
    u_xlat1 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0] * input.POSITION0.xxxx + u_xlat1;
    u_xlat1 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2] * input.POSITION0.zzzz + u_xlat1;
    u_xlat1 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[3] * input.POSITION0.wwww + u_xlat1;
    u_xlat2.xyz = (-u_xlat1.xyz) * Globals._WorldSpaceLightPos0.www + Globals._WorldSpaceLightPos0.xyz;
    u_xlat9 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat9 = rsqrt(u_xlat9);
    u_xlat2.xyz = float3(u_xlat9) * u_xlat2.xyz;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat2.xyz);
    u_xlat9 = (-u_xlat9) * u_xlat9 + 1.0;
    u_xlat9 = sqrt(u_xlat9);
    u_xlat9 = u_xlat9 * Globals.unity_LightShadowBias.z;
    u_xlat0.xyz = (-u_xlat0.xyz) * float3(u_xlat9) + u_xlat1.xyz;
    u_xlatb9 = Globals.unity_LightShadowBias.z!=0.0;
    u_xlat0.xyz = (bool(u_xlatb9)) ? u_xlat0.xyz : u_xlat1.xyz;
    u_xlat2 = u_xlat0.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = Globals.hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat2;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat1.x = Globals.unity_LightShadowBias.x / u_xlat0.w;
    u_xlat1.x = min(u_xlat1.x, 0.0);
    u_xlat1.x = max(u_xlat1.x, -1.0);
    u_xlat6 = u_xlat0.z + u_xlat1.x;
    u_xlat1.x = min(u_xlat0.w, u_xlat6);
    output.mtl_Position.xyw = u_xlat0.xyw;
    u_xlat0.x = (-u_xlat6) + u_xlat1.x;
    output.mtl_Position.z = Globals.unity_LightShadowBias.y * u_xlat0.x + u_xlat6;
    return output;
}


-- Hardware tier variant: Tier 3
-- Fragment shader for "metal":
Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(0) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
)
{
    Mtl_FragmentOut output;
    output.SV_Target0 = half4(0.0, 0.0, 0.0, 0.0);
    return output;
}


//////////////////////////////////////////////////////
Keywords set in this variant: SHADOWS_CUBE 
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"

Constant Buffer "Globals" (144 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 16
  Matrix4x4 unity_MatrixVP at 80
  Vector4 _LightPositionRange at 0
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float4 _LightPositionRange;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 mtl_Position [[ position ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    u_xlat0.xyz = input.POSITION0.yyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * input.POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * input.POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * input.POSITION0.www + u_xlat0.xyz;
    output.TEXCOORD0.xyz = u_xlat0.xyz + (-Globals._LightPositionRange.xyz);
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0] * input.POSITION0.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2] * input.POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    output.mtl_Position = Globals.hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    return output;
}


-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Constant Buffer "Globals" (32 bytes) on slot 0 {
  Vector4 _LightPositionRange at 0
  Vector4 unity_LightShadowBias at 16
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float4 _LightPositionRange;
    float4 unity_LightShadowBias;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(0) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    u_xlat0.x = dot(input.TEXCOORD0.xyz, input.TEXCOORD0.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = u_xlat0.x + Globals.unity_LightShadowBias.x;
    u_xlat0 = u_xlat0.xxxx * Globals._LightPositionRange.wwww;
    output.SV_Target0 = half4(u_xlat0);
    return output;
}


-- Hardware tier variant: Tier 2
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"

Constant Buffer "Globals" (144 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 16
  Matrix4x4 unity_MatrixVP at 80
  Vector4 _LightPositionRange at 0
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float4 _LightPositionRange;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 mtl_Position [[ position ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    u_xlat0.xyz = input.POSITION0.yyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * input.POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * input.POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * input.POSITION0.www + u_xlat0.xyz;
    output.TEXCOORD0.xyz = u_xlat0.xyz + (-Globals._LightPositionRange.xyz);
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0] * input.POSITION0.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2] * input.POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    output.mtl_Position = Globals.hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    return output;
}


-- Hardware tier variant: Tier 2
-- Fragment shader for "metal":
Constant Buffer "Globals" (32 bytes) on slot 0 {
  Vector4 _LightPositionRange at 0
  Vector4 unity_LightShadowBias at 16
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float4 _LightPositionRange;
    float4 unity_LightShadowBias;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(0) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    u_xlat0.x = dot(input.TEXCOORD0.xyz, input.TEXCOORD0.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = u_xlat0.x + Globals.unity_LightShadowBias.x;
    u_xlat0 = u_xlat0.xxxx * Globals._LightPositionRange.wwww;
    output.SV_Target0 = half4(u_xlat0);
    return output;
}


-- Hardware tier variant: Tier 3
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"

Constant Buffer "Globals" (144 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 16
  Matrix4x4 unity_MatrixVP at 80
  Vector4 _LightPositionRange at 0
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float4 _LightPositionRange;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 mtl_Position [[ position ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    u_xlat0.xyz = input.POSITION0.yyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * input.POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * input.POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * input.POSITION0.www + u_xlat0.xyz;
    output.TEXCOORD0.xyz = u_xlat0.xyz + (-Globals._LightPositionRange.xyz);
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0] * input.POSITION0.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2] * input.POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    output.mtl_Position = Globals.hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    return output;
}


-- Hardware tier variant: Tier 3
-- Fragment shader for "metal":
Constant Buffer "Globals" (32 bytes) on slot 0 {
  Vector4 _LightPositionRange at 0
  Vector4 unity_LightShadowBias at 16
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float4 _LightPositionRange;
    float4 unity_LightShadowBias;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(0) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    u_xlat0.x = dot(input.TEXCOORD0.xyz, input.TEXCOORD0.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = u_xlat0.x + Globals.unity_LightShadowBias.x;
    u_xlat0 = u_xlat0.xxxx * Globals._LightPositionRange.wwww;
    output.SV_Target0 = half4(u_xlat0);
    return output;
}


 }
 Pass {
  Name "DEFERRED"
  Tags { "LIGHTMODE"="DEFERRED" "RenderType"="Opaque" "PerformanceChecks"="False" }
  //////////////////////////////////
  //                              //
  //      Compiled programs       //
  //                              //
  //////////////////////////////////
//////////////////////////////////////////////////////
No keywords set in this variant.
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"
Uses vertex data channel "TexCoord0"

Constant Buffer "Globals" (274 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 48
  Matrix4x4 unity_WorldToObject at 112
  Matrix4x4 unity_MatrixVP at 176
  Vector3 _WorldSpaceCameraPos at 0
  VectorHalf4 unity_SHBr at 16
  VectorHalf4 unity_SHBg at 24
  VectorHalf4 unity_SHBb at 32
  VectorHalf4 unity_SHC at 40
  Vector4 _MainTex_ST at 240
  Vector4 _DetailAlbedoMap_ST at 256
  ScalarHalf _UVSec at 272
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    float4 _DetailAlbedoMap_ST;
    half _UVSec;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    half3 NORMAL0 [[ attribute(1) ]] ;
    float2 TEXCOORD0 [[ attribute(2) ]] ;
    float2 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    half4 TEXCOORD5 [[ user(TEXCOORD5) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    half4 u_xlat16_0;
    bool u_xlatb0;
    float4 u_xlat1;
    half u_xlat16_2;
    half3 u_xlat16_3;
    float u_xlat13;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0] * input.POSITION0.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2] * input.POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    output.mtl_Position = Globals.hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlatb0 = Globals._UVSec==half(0.0);
    u_xlat0.xy = (bool(u_xlatb0)) ? input.TEXCOORD0.xy : input.TEXCOORD1.xy;
    output.TEXCOORD0.zw = u_xlat0.xy * Globals._DetailAlbedoMap_ST.xy + Globals._DetailAlbedoMap_ST.zw;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy * Globals._MainTex_ST.xy + Globals._MainTex_ST.zw;
    u_xlat0.xyz = input.POSITION0.yyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * input.POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * input.POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyw = Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * input.POSITION0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyw + (-Globals._WorldSpaceCameraPos.xyzx.xyz);
    output.TEXCOORD1.xyz = half3(u_xlat1.xyz);
    output.TEXCOORD2.w = half(u_xlat0.x);
    output.TEXCOORD2.xyz = half3(0.0, 0.0, 0.0);
    output.TEXCOORD3.w = half(u_xlat0.y);
    output.TEXCOORD3.xyz = half3(0.0, 0.0, 0.0);
    u_xlat1.x = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = rsqrt(u_xlat13);
    u_xlat0.xyz = float3(u_xlat13) * u_xlat1.xyz;
    output.TEXCOORD4 = half4(u_xlat0);
    u_xlat16_2 = half(u_xlat0.y * u_xlat0.y);
    u_xlat16_2 = half(u_xlat0.x * u_xlat0.x + (-float(u_xlat16_2)));
    u_xlat16_0 = half4(u_xlat0.yzzx * u_xlat0.xyzz);
    u_xlat16_3.x = dot(Globals.unity_SHBr, u_xlat16_0);
    u_xlat16_3.y = dot(Globals.unity_SHBg, u_xlat16_0);
    u_xlat16_3.z = dot(Globals.unity_SHBb, u_xlat16_0);
    output.TEXCOORD5.xyz = Globals.unity_SHC.xyz * half3(u_xlat16_2) + u_xlat16_3.xyz;
    output.TEXCOORD5.w = half(0.0);
    return output;
}


-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0
Set 2D Texture "_OcclusionMap" to slot 1

Constant Buffer "Globals" (38 bytes) on slot 0 {
  VectorHalf4 unity_SHAr at 0
  VectorHalf4 unity_SHAg at 8
  VectorHalf4 unity_SHAb at 16
  VectorHalf4 _Color at 24
  ScalarHalf _Metallic at 32
  ScalarHalf _Glossiness at 34
  ScalarHalf _OcclusionStrength at 36
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    half4 unity_SHAr;
    half4 unity_SHAg;
    half4 unity_SHAb;
    half4 _Color;
    half _Metallic;
    half _Glossiness;
    half _OcclusionStrength;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    half4 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(0) ]];
    half4 SV_Target1 [[ color(1) ]];
    half4 SV_Target2 [[ color(2) ]];
    half4 SV_Target3 [[ color(3) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_OcclusionMap [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture (0) ]] ,
    texture2d<half, access::sample > _OcclusionMap [[ texture (1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half4 u_xlat16_0;
    half4 u_xlat16_1;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    half3 u_xlat16_6;
    u_xlat16_0.x = _OcclusionMap.sample(sampler_OcclusionMap, input.TEXCOORD0.xy).y;
    u_xlat16_1.x = (-Globals._OcclusionStrength) + half(1.0);
    u_xlat16_0.w = u_xlat16_0.x * Globals._OcclusionStrength + u_xlat16_1.x;
    u_xlat16_1.x = (-Globals._Metallic) * half(0.779083729) + half(0.779083729);
    u_xlat16_2.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_2.xyz * Globals._Color.xyz;
    u_xlat16_6.xyz = Globals._Color.xyz * u_xlat16_2.xyz + half3(-0.220916301, -0.220916301, -0.220916301);
    output.SV_Target1.xyz = half3(Globals._Metallic) * u_xlat16_6.xyz + half3(0.220916301, 0.220916301, 0.220916301);
    u_xlat16_0.xyz = u_xlat16_1.xxx * u_xlat16_3.xyz;
    output.SV_Target0 = u_xlat16_0;
    output.SV_Target1.w = Globals._Glossiness;
    output.SV_Target2.w = half(1.0);
    u_xlat16_1.x = dot(input.TEXCOORD4.xyz, input.TEXCOORD4.xyz);
    u_xlat16_1.x = rsqrt(u_xlat16_1.x);
    u_xlat16_1.xyz = u_xlat16_1.xxx * input.TEXCOORD4.xyz;
    u_xlat16_2.xyz = u_xlat16_1.xyz * half3(0.5, 0.5, 0.5) + half3(0.5, 0.5, 0.5);
    output.SV_Target2.xyz = u_xlat16_2.xyz;
    u_xlat16_1.w = half(1.0);
    u_xlat16_4.x = dot(Globals.unity_SHAr, u_xlat16_1);
    u_xlat16_4.y = dot(Globals.unity_SHAg, u_xlat16_1);
    u_xlat16_4.z = dot(Globals.unity_SHAb, u_xlat16_1);
    u_xlat16_1.xyz = u_xlat16_4.xyz + input.TEXCOORD5.xyz;
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = log2(u_xlat16_1.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * half3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * half3(1.05499995, 1.05499995, 1.05499995) + half3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_1.xyz = u_xlat16_0.www * u_xlat16_2.xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    output.SV_Target3.xyz = exp2((-u_xlat16_1.xyz));
    output.SV_Target3.w = half(1.0);
    return output;
}


-- Hardware tier variant: Tier 2
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"
Uses vertex data channel "TexCoord0"

Constant Buffer "Globals" (274 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 48
  Matrix4x4 unity_WorldToObject at 112
  Matrix4x4 unity_MatrixVP at 176
  Vector3 _WorldSpaceCameraPos at 0
  VectorHalf4 unity_SHBr at 16
  VectorHalf4 unity_SHBg at 24
  VectorHalf4 unity_SHBb at 32
  VectorHalf4 unity_SHC at 40
  Vector4 _MainTex_ST at 240
  Vector4 _DetailAlbedoMap_ST at 256
  ScalarHalf _UVSec at 272
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    float4 _DetailAlbedoMap_ST;
    half _UVSec;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    half3 NORMAL0 [[ attribute(1) ]] ;
    float2 TEXCOORD0 [[ attribute(2) ]] ;
    float2 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    half4 TEXCOORD5 [[ user(TEXCOORD5) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    half4 u_xlat16_0;
    bool u_xlatb0;
    float4 u_xlat1;
    half u_xlat16_2;
    half3 u_xlat16_3;
    float u_xlat13;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0] * input.POSITION0.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2] * input.POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    output.mtl_Position = Globals.hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlatb0 = Globals._UVSec==half(0.0);
    u_xlat0.xy = (bool(u_xlatb0)) ? input.TEXCOORD0.xy : input.TEXCOORD1.xy;
    output.TEXCOORD0.zw = u_xlat0.xy * Globals._DetailAlbedoMap_ST.xy + Globals._DetailAlbedoMap_ST.zw;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy * Globals._MainTex_ST.xy + Globals._MainTex_ST.zw;
    u_xlat0.xyz = input.POSITION0.yyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * input.POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * input.POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyw = Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * input.POSITION0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyw + (-Globals._WorldSpaceCameraPos.xyzx.xyz);
    output.TEXCOORD1.xyz = half3(u_xlat1.xyz);
    output.TEXCOORD2.w = half(u_xlat0.x);
    output.TEXCOORD2.xyz = half3(0.0, 0.0, 0.0);
    output.TEXCOORD3.w = half(u_xlat0.y);
    output.TEXCOORD3.xyz = half3(0.0, 0.0, 0.0);
    u_xlat1.x = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = rsqrt(u_xlat13);
    u_xlat0.xyz = float3(u_xlat13) * u_xlat1.xyz;
    output.TEXCOORD4 = half4(u_xlat0);
    u_xlat16_2 = half(u_xlat0.y * u_xlat0.y);
    u_xlat16_2 = half(u_xlat0.x * u_xlat0.x + (-float(u_xlat16_2)));
    u_xlat16_0 = half4(u_xlat0.yzzx * u_xlat0.xyzz);
    u_xlat16_3.x = dot(Globals.unity_SHBr, u_xlat16_0);
    u_xlat16_3.y = dot(Globals.unity_SHBg, u_xlat16_0);
    u_xlat16_3.z = dot(Globals.unity_SHBb, u_xlat16_0);
    output.TEXCOORD5.xyz = Globals.unity_SHC.xyz * half3(u_xlat16_2) + u_xlat16_3.xyz;
    output.TEXCOORD5.w = half(0.0);
    return output;
}


-- Hardware tier variant: Tier 2
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0
Set 2D Texture "_OcclusionMap" to slot 1

Constant Buffer "Globals" (38 bytes) on slot 0 {
  VectorHalf4 unity_SHAr at 0
  VectorHalf4 unity_SHAg at 8
  VectorHalf4 unity_SHAb at 16
  VectorHalf4 _Color at 24
  ScalarHalf _Metallic at 32
  ScalarHalf _Glossiness at 34
  ScalarHalf _OcclusionStrength at 36
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    half4 unity_SHAr;
    half4 unity_SHAg;
    half4 unity_SHAb;
    half4 _Color;
    half _Metallic;
    half _Glossiness;
    half _OcclusionStrength;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    half4 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(0) ]];
    half4 SV_Target1 [[ color(1) ]];
    half4 SV_Target2 [[ color(2) ]];
    half4 SV_Target3 [[ color(3) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_OcclusionMap [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture (0) ]] ,
    texture2d<half, access::sample > _OcclusionMap [[ texture (1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half4 u_xlat16_0;
    half4 u_xlat16_1;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    half3 u_xlat16_6;
    u_xlat16_0.x = _OcclusionMap.sample(sampler_OcclusionMap, input.TEXCOORD0.xy).y;
    u_xlat16_1.x = (-Globals._OcclusionStrength) + half(1.0);
    u_xlat16_0.w = u_xlat16_0.x * Globals._OcclusionStrength + u_xlat16_1.x;
    u_xlat16_1.x = (-Globals._Metallic) * half(0.779083729) + half(0.779083729);
    u_xlat16_2.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_2.xyz * Globals._Color.xyz;
    u_xlat16_6.xyz = Globals._Color.xyz * u_xlat16_2.xyz + half3(-0.220916301, -0.220916301, -0.220916301);
    output.SV_Target1.xyz = half3(Globals._Metallic) * u_xlat16_6.xyz + half3(0.220916301, 0.220916301, 0.220916301);
    u_xlat16_0.xyz = u_xlat16_1.xxx * u_xlat16_3.xyz;
    output.SV_Target0 = u_xlat16_0;
    output.SV_Target1.w = Globals._Glossiness;
    output.SV_Target2.w = half(1.0);
    u_xlat16_1.x = dot(input.TEXCOORD4.xyz, input.TEXCOORD4.xyz);
    u_xlat16_1.x = rsqrt(u_xlat16_1.x);
    u_xlat16_1.xyz = u_xlat16_1.xxx * input.TEXCOORD4.xyz;
    u_xlat16_2.xyz = u_xlat16_1.xyz * half3(0.5, 0.5, 0.5) + half3(0.5, 0.5, 0.5);
    output.SV_Target2.xyz = u_xlat16_2.xyz;
    u_xlat16_1.w = half(1.0);
    u_xlat16_4.x = dot(Globals.unity_SHAr, u_xlat16_1);
    u_xlat16_4.y = dot(Globals.unity_SHAg, u_xlat16_1);
    u_xlat16_4.z = dot(Globals.unity_SHAb, u_xlat16_1);
    u_xlat16_1.xyz = u_xlat16_4.xyz + input.TEXCOORD5.xyz;
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = log2(u_xlat16_1.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * half3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * half3(1.05499995, 1.05499995, 1.05499995) + half3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_1.xyz = u_xlat16_0.www * u_xlat16_2.xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    output.SV_Target3.xyz = exp2((-u_xlat16_1.xyz));
    output.SV_Target3.w = half(1.0);
    return output;
}


-- Hardware tier variant: Tier 3
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"
Uses vertex data channel "TexCoord0"

Constant Buffer "Globals" (274 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 48
  Matrix4x4 unity_WorldToObject at 112
  Matrix4x4 unity_MatrixVP at 176
  Vector3 _WorldSpaceCameraPos at 0
  VectorHalf4 unity_SHBr at 16
  VectorHalf4 unity_SHBg at 24
  VectorHalf4 unity_SHBb at 32
  VectorHalf4 unity_SHC at 40
  Vector4 _MainTex_ST at 240
  Vector4 _DetailAlbedoMap_ST at 256
  ScalarHalf _UVSec at 272
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    float4 _DetailAlbedoMap_ST;
    half _UVSec;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    half3 NORMAL0 [[ attribute(1) ]] ;
    float2 TEXCOORD0 [[ attribute(2) ]] ;
    float2 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    half4 TEXCOORD5 [[ user(TEXCOORD5) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    half4 u_xlat16_0;
    bool u_xlatb0;
    float4 u_xlat1;
    half u_xlat16_2;
    half3 u_xlat16_3;
    float u_xlat13;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0] * input.POSITION0.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2] * input.POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    output.mtl_Position = Globals.hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlatb0 = Globals._UVSec==half(0.0);
    u_xlat0.xy = (bool(u_xlatb0)) ? input.TEXCOORD0.xy : input.TEXCOORD1.xy;
    output.TEXCOORD0.zw = u_xlat0.xy * Globals._DetailAlbedoMap_ST.xy + Globals._DetailAlbedoMap_ST.zw;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy * Globals._MainTex_ST.xy + Globals._MainTex_ST.zw;
    u_xlat0.xyz = input.POSITION0.yyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * input.POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * input.POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyw = Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * input.POSITION0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyw + (-Globals._WorldSpaceCameraPos.xyzx.xyz);
    output.TEXCOORD1.xyz = half3(u_xlat1.xyz);
    output.TEXCOORD2.w = half(u_xlat0.x);
    output.TEXCOORD2.xyz = half3(0.0, 0.0, 0.0);
    output.TEXCOORD3.w = half(u_xlat0.y);
    output.TEXCOORD3.xyz = half3(0.0, 0.0, 0.0);
    u_xlat1.x = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = rsqrt(u_xlat13);
    u_xlat0.xyz = float3(u_xlat13) * u_xlat1.xyz;
    output.TEXCOORD4 = half4(u_xlat0);
    u_xlat16_2 = half(u_xlat0.y * u_xlat0.y);
    u_xlat16_2 = half(u_xlat0.x * u_xlat0.x + (-float(u_xlat16_2)));
    u_xlat16_0 = half4(u_xlat0.yzzx * u_xlat0.xyzz);
    u_xlat16_3.x = dot(Globals.unity_SHBr, u_xlat16_0);
    u_xlat16_3.y = dot(Globals.unity_SHBg, u_xlat16_0);
    u_xlat16_3.z = dot(Globals.unity_SHBb, u_xlat16_0);
    output.TEXCOORD5.xyz = Globals.unity_SHC.xyz * half3(u_xlat16_2) + u_xlat16_3.xyz;
    output.TEXCOORD5.w = half(0.0);
    return output;
}


-- Hardware tier variant: Tier 3
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0
Set 2D Texture "_OcclusionMap" to slot 1

Constant Buffer "Globals" (38 bytes) on slot 0 {
  VectorHalf4 unity_SHAr at 0
  VectorHalf4 unity_SHAg at 8
  VectorHalf4 unity_SHAb at 16
  VectorHalf4 _Color at 24
  ScalarHalf _Metallic at 32
  ScalarHalf _Glossiness at 34
  ScalarHalf _OcclusionStrength at 36
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    half4 unity_SHAr;
    half4 unity_SHAg;
    half4 unity_SHAb;
    half4 _Color;
    half _Metallic;
    half _Glossiness;
    half _OcclusionStrength;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    half4 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(0) ]];
    half4 SV_Target1 [[ color(1) ]];
    half4 SV_Target2 [[ color(2) ]];
    half4 SV_Target3 [[ color(3) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_OcclusionMap [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture (0) ]] ,
    texture2d<half, access::sample > _OcclusionMap [[ texture (1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half4 u_xlat16_0;
    half4 u_xlat16_1;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    half3 u_xlat16_6;
    u_xlat16_0.x = _OcclusionMap.sample(sampler_OcclusionMap, input.TEXCOORD0.xy).y;
    u_xlat16_1.x = (-Globals._OcclusionStrength) + half(1.0);
    u_xlat16_0.w = u_xlat16_0.x * Globals._OcclusionStrength + u_xlat16_1.x;
    u_xlat16_1.x = (-Globals._Metallic) * half(0.779083729) + half(0.779083729);
    u_xlat16_2.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_2.xyz * Globals._Color.xyz;
    u_xlat16_6.xyz = Globals._Color.xyz * u_xlat16_2.xyz + half3(-0.220916301, -0.220916301, -0.220916301);
    output.SV_Target1.xyz = half3(Globals._Metallic) * u_xlat16_6.xyz + half3(0.220916301, 0.220916301, 0.220916301);
    u_xlat16_0.xyz = u_xlat16_1.xxx * u_xlat16_3.xyz;
    output.SV_Target0 = u_xlat16_0;
    output.SV_Target1.w = Globals._Glossiness;
    output.SV_Target2.w = half(1.0);
    u_xlat16_1.x = dot(input.TEXCOORD4.xyz, input.TEXCOORD4.xyz);
    u_xlat16_1.x = rsqrt(u_xlat16_1.x);
    u_xlat16_1.xyz = u_xlat16_1.xxx * input.TEXCOORD4.xyz;
    u_xlat16_2.xyz = u_xlat16_1.xyz * half3(0.5, 0.5, 0.5) + half3(0.5, 0.5, 0.5);
    output.SV_Target2.xyz = u_xlat16_2.xyz;
    u_xlat16_1.w = half(1.0);
    u_xlat16_4.x = dot(Globals.unity_SHAr, u_xlat16_1);
    u_xlat16_4.y = dot(Globals.unity_SHAg, u_xlat16_1);
    u_xlat16_4.z = dot(Globals.unity_SHAb, u_xlat16_1);
    u_xlat16_1.xyz = u_xlat16_4.xyz + input.TEXCOORD5.xyz;
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = log2(u_xlat16_1.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * half3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * half3(1.05499995, 1.05499995, 1.05499995) + half3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_1.xyz = u_xlat16_0.www * u_xlat16_2.xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    output.SV_Target3.xyz = exp2((-u_xlat16_1.xyz));
    output.SV_Target3.w = half(1.0);
    return output;
}


//////////////////////////////////////////////////////
Keywords set in this variant: _EMISSION UNITY_HDR_ON 
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"
Uses vertex data channel "TexCoord0"

Constant Buffer "Globals" (274 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 48
  Matrix4x4 unity_WorldToObject at 112
  Matrix4x4 unity_MatrixVP at 176
  Vector3 _WorldSpaceCameraPos at 0
  VectorHalf4 unity_SHBr at 16
  VectorHalf4 unity_SHBg at 24
  VectorHalf4 unity_SHBb at 32
  VectorHalf4 unity_SHC at 40
  Vector4 _MainTex_ST at 240
  Vector4 _DetailAlbedoMap_ST at 256
  ScalarHalf _UVSec at 272
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    float4 _DetailAlbedoMap_ST;
    half _UVSec;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    half3 NORMAL0 [[ attribute(1) ]] ;
    float2 TEXCOORD0 [[ attribute(2) ]] ;
    float2 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    half4 TEXCOORD5 [[ user(TEXCOORD5) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    half4 u_xlat16_0;
    bool u_xlatb0;
    float4 u_xlat1;
    half u_xlat16_2;
    half3 u_xlat16_3;
    float u_xlat13;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0] * input.POSITION0.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2] * input.POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    output.mtl_Position = Globals.hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlatb0 = Globals._UVSec==half(0.0);
    u_xlat0.xy = (bool(u_xlatb0)) ? input.TEXCOORD0.xy : input.TEXCOORD1.xy;
    output.TEXCOORD0.zw = u_xlat0.xy * Globals._DetailAlbedoMap_ST.xy + Globals._DetailAlbedoMap_ST.zw;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy * Globals._MainTex_ST.xy + Globals._MainTex_ST.zw;
    u_xlat0.xyz = input.POSITION0.yyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * input.POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * input.POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyw = Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * input.POSITION0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyw + (-Globals._WorldSpaceCameraPos.xyzx.xyz);
    output.TEXCOORD1.xyz = half3(u_xlat1.xyz);
    output.TEXCOORD2.w = half(u_xlat0.x);
    output.TEXCOORD2.xyz = half3(0.0, 0.0, 0.0);
    output.TEXCOORD3.w = half(u_xlat0.y);
    output.TEXCOORD3.xyz = half3(0.0, 0.0, 0.0);
    u_xlat1.x = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = rsqrt(u_xlat13);
    u_xlat0.xyz = float3(u_xlat13) * u_xlat1.xyz;
    output.TEXCOORD4 = half4(u_xlat0);
    u_xlat16_2 = half(u_xlat0.y * u_xlat0.y);
    u_xlat16_2 = half(u_xlat0.x * u_xlat0.x + (-float(u_xlat16_2)));
    u_xlat16_0 = half4(u_xlat0.yzzx * u_xlat0.xyzz);
    u_xlat16_3.x = dot(Globals.unity_SHBr, u_xlat16_0);
    u_xlat16_3.y = dot(Globals.unity_SHBg, u_xlat16_0);
    u_xlat16_3.z = dot(Globals.unity_SHBb, u_xlat16_0);
    output.TEXCOORD5.xyz = Globals.unity_SHC.xyz * half3(u_xlat16_2) + u_xlat16_3.xyz;
    output.TEXCOORD5.w = half(0.0);
    return output;
}


-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0
Set 2D Texture "_OcclusionMap" to slot 1
Set 2D Texture "_EmissionMap" to slot 2

Constant Buffer "Globals" (48 bytes) on slot 0 {
  VectorHalf4 unity_SHAr at 0
  VectorHalf4 unity_SHAg at 8
  VectorHalf4 unity_SHAb at 16
  VectorHalf4 _Color at 24
  ScalarHalf _Metallic at 32
  ScalarHalf _Glossiness at 34
  ScalarHalf _OcclusionStrength at 36
  VectorHalf4 _EmissionColor at 40
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    half4 unity_SHAr;
    half4 unity_SHAg;
    half4 unity_SHAb;
    half4 _Color;
    half _Metallic;
    half _Glossiness;
    half _OcclusionStrength;
    half4 _EmissionColor;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    half4 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(0) ]];
    half4 SV_Target1 [[ color(1) ]];
    half4 SV_Target2 [[ color(2) ]];
    half4 SV_Target3 [[ color(3) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_OcclusionMap [[ sampler (1) ]],
    sampler sampler_EmissionMap [[ sampler (2) ]],
    texture2d<half, access::sample > _MainTex [[ texture (0) ]] ,
    texture2d<half, access::sample > _OcclusionMap [[ texture (1) ]] ,
    texture2d<half, access::sample > _EmissionMap [[ texture (2) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half4 u_xlat16_0;
    half4 u_xlat16_1;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    half3 u_xlat16_6;
    u_xlat16_0.x = _OcclusionMap.sample(sampler_OcclusionMap, input.TEXCOORD0.xy).y;
    u_xlat16_1.x = (-Globals._OcclusionStrength) + half(1.0);
    u_xlat16_0.w = u_xlat16_0.x * Globals._OcclusionStrength + u_xlat16_1.x;
    u_xlat16_1.x = (-Globals._Metallic) * half(0.779083729) + half(0.779083729);
    u_xlat16_2.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_2.xyz * Globals._Color.xyz;
    u_xlat16_6.xyz = Globals._Color.xyz * u_xlat16_2.xyz + half3(-0.220916301, -0.220916301, -0.220916301);
    output.SV_Target1.xyz = half3(Globals._Metallic) * u_xlat16_6.xyz + half3(0.220916301, 0.220916301, 0.220916301);
    u_xlat16_0.xyz = u_xlat16_1.xxx * u_xlat16_3.xyz;
    output.SV_Target0 = u_xlat16_0;
    output.SV_Target1.w = Globals._Glossiness;
    output.SV_Target2.w = half(1.0);
    u_xlat16_1.x = dot(input.TEXCOORD4.xyz, input.TEXCOORD4.xyz);
    u_xlat16_1.x = rsqrt(u_xlat16_1.x);
    u_xlat16_1.xyz = u_xlat16_1.xxx * input.TEXCOORD4.xyz;
    u_xlat16_2.xyz = u_xlat16_1.xyz * half3(0.5, 0.5, 0.5) + half3(0.5, 0.5, 0.5);
    output.SV_Target2.xyz = u_xlat16_2.xyz;
    u_xlat16_1.w = half(1.0);
    u_xlat16_4.x = dot(Globals.unity_SHAr, u_xlat16_1);
    u_xlat16_4.y = dot(Globals.unity_SHAg, u_xlat16_1);
    u_xlat16_4.z = dot(Globals.unity_SHAb, u_xlat16_1);
    u_xlat16_1.xyz = u_xlat16_4.xyz + input.TEXCOORD5.xyz;
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = log2(u_xlat16_1.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * half3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * half3(1.05499995, 1.05499995, 1.05499995) + half3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_1.xyz = u_xlat16_0.www * u_xlat16_2.xyz;
    u_xlat16_2.xyz = _EmissionMap.sample(sampler_EmissionMap, input.TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * Globals._EmissionColor.xyz;
    output.SV_Target3.xyz = u_xlat16_1.xyz * u_xlat16_0.xyz + u_xlat16_2.xyz;
    output.SV_Target3.w = half(1.0);
    return output;
}


-- Hardware tier variant: Tier 2
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"
Uses vertex data channel "TexCoord0"

Constant Buffer "Globals" (274 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 48
  Matrix4x4 unity_WorldToObject at 112
  Matrix4x4 unity_MatrixVP at 176
  Vector3 _WorldSpaceCameraPos at 0
  VectorHalf4 unity_SHBr at 16
  VectorHalf4 unity_SHBg at 24
  VectorHalf4 unity_SHBb at 32
  VectorHalf4 unity_SHC at 40
  Vector4 _MainTex_ST at 240
  Vector4 _DetailAlbedoMap_ST at 256
  ScalarHalf _UVSec at 272
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    float4 _DetailAlbedoMap_ST;
    half _UVSec;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    half3 NORMAL0 [[ attribute(1) ]] ;
    float2 TEXCOORD0 [[ attribute(2) ]] ;
    float2 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    half4 TEXCOORD5 [[ user(TEXCOORD5) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    half4 u_xlat16_0;
    bool u_xlatb0;
    float4 u_xlat1;
    half u_xlat16_2;
    half3 u_xlat16_3;
    float u_xlat13;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0] * input.POSITION0.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2] * input.POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    output.mtl_Position = Globals.hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlatb0 = Globals._UVSec==half(0.0);
    u_xlat0.xy = (bool(u_xlatb0)) ? input.TEXCOORD0.xy : input.TEXCOORD1.xy;
    output.TEXCOORD0.zw = u_xlat0.xy * Globals._DetailAlbedoMap_ST.xy + Globals._DetailAlbedoMap_ST.zw;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy * Globals._MainTex_ST.xy + Globals._MainTex_ST.zw;
    u_xlat0.xyz = input.POSITION0.yyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * input.POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * input.POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyw = Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * input.POSITION0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyw + (-Globals._WorldSpaceCameraPos.xyzx.xyz);
    output.TEXCOORD1.xyz = half3(u_xlat1.xyz);
    output.TEXCOORD2.w = half(u_xlat0.x);
    output.TEXCOORD2.xyz = half3(0.0, 0.0, 0.0);
    output.TEXCOORD3.w = half(u_xlat0.y);
    output.TEXCOORD3.xyz = half3(0.0, 0.0, 0.0);
    u_xlat1.x = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = rsqrt(u_xlat13);
    u_xlat0.xyz = float3(u_xlat13) * u_xlat1.xyz;
    output.TEXCOORD4 = half4(u_xlat0);
    u_xlat16_2 = half(u_xlat0.y * u_xlat0.y);
    u_xlat16_2 = half(u_xlat0.x * u_xlat0.x + (-float(u_xlat16_2)));
    u_xlat16_0 = half4(u_xlat0.yzzx * u_xlat0.xyzz);
    u_xlat16_3.x = dot(Globals.unity_SHBr, u_xlat16_0);
    u_xlat16_3.y = dot(Globals.unity_SHBg, u_xlat16_0);
    u_xlat16_3.z = dot(Globals.unity_SHBb, u_xlat16_0);
    output.TEXCOORD5.xyz = Globals.unity_SHC.xyz * half3(u_xlat16_2) + u_xlat16_3.xyz;
    output.TEXCOORD5.w = half(0.0);
    return output;
}


-- Hardware tier variant: Tier 2
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0
Set 2D Texture "_OcclusionMap" to slot 1
Set 2D Texture "_EmissionMap" to slot 2

Constant Buffer "Globals" (48 bytes) on slot 0 {
  VectorHalf4 unity_SHAr at 0
  VectorHalf4 unity_SHAg at 8
  VectorHalf4 unity_SHAb at 16
  VectorHalf4 _Color at 24
  ScalarHalf _Metallic at 32
  ScalarHalf _Glossiness at 34
  ScalarHalf _OcclusionStrength at 36
  VectorHalf4 _EmissionColor at 40
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    half4 unity_SHAr;
    half4 unity_SHAg;
    half4 unity_SHAb;
    half4 _Color;
    half _Metallic;
    half _Glossiness;
    half _OcclusionStrength;
    half4 _EmissionColor;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    half4 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(0) ]];
    half4 SV_Target1 [[ color(1) ]];
    half4 SV_Target2 [[ color(2) ]];
    half4 SV_Target3 [[ color(3) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_OcclusionMap [[ sampler (1) ]],
    sampler sampler_EmissionMap [[ sampler (2) ]],
    texture2d<half, access::sample > _MainTex [[ texture (0) ]] ,
    texture2d<half, access::sample > _OcclusionMap [[ texture (1) ]] ,
    texture2d<half, access::sample > _EmissionMap [[ texture (2) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half4 u_xlat16_0;
    half4 u_xlat16_1;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    half3 u_xlat16_6;
    u_xlat16_0.x = _OcclusionMap.sample(sampler_OcclusionMap, input.TEXCOORD0.xy).y;
    u_xlat16_1.x = (-Globals._OcclusionStrength) + half(1.0);
    u_xlat16_0.w = u_xlat16_0.x * Globals._OcclusionStrength + u_xlat16_1.x;
    u_xlat16_1.x = (-Globals._Metallic) * half(0.779083729) + half(0.779083729);
    u_xlat16_2.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_2.xyz * Globals._Color.xyz;
    u_xlat16_6.xyz = Globals._Color.xyz * u_xlat16_2.xyz + half3(-0.220916301, -0.220916301, -0.220916301);
    output.SV_Target1.xyz = half3(Globals._Metallic) * u_xlat16_6.xyz + half3(0.220916301, 0.220916301, 0.220916301);
    u_xlat16_0.xyz = u_xlat16_1.xxx * u_xlat16_3.xyz;
    output.SV_Target0 = u_xlat16_0;
    output.SV_Target1.w = Globals._Glossiness;
    output.SV_Target2.w = half(1.0);
    u_xlat16_1.x = dot(input.TEXCOORD4.xyz, input.TEXCOORD4.xyz);
    u_xlat16_1.x = rsqrt(u_xlat16_1.x);
    u_xlat16_1.xyz = u_xlat16_1.xxx * input.TEXCOORD4.xyz;
    u_xlat16_2.xyz = u_xlat16_1.xyz * half3(0.5, 0.5, 0.5) + half3(0.5, 0.5, 0.5);
    output.SV_Target2.xyz = u_xlat16_2.xyz;
    u_xlat16_1.w = half(1.0);
    u_xlat16_4.x = dot(Globals.unity_SHAr, u_xlat16_1);
    u_xlat16_4.y = dot(Globals.unity_SHAg, u_xlat16_1);
    u_xlat16_4.z = dot(Globals.unity_SHAb, u_xlat16_1);
    u_xlat16_1.xyz = u_xlat16_4.xyz + input.TEXCOORD5.xyz;
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = log2(u_xlat16_1.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * half3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * half3(1.05499995, 1.05499995, 1.05499995) + half3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_1.xyz = u_xlat16_0.www * u_xlat16_2.xyz;
    u_xlat16_2.xyz = _EmissionMap.sample(sampler_EmissionMap, input.TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * Globals._EmissionColor.xyz;
    output.SV_Target3.xyz = u_xlat16_1.xyz * u_xlat16_0.xyz + u_xlat16_2.xyz;
    output.SV_Target3.w = half(1.0);
    return output;
}


-- Hardware tier variant: Tier 3
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"
Uses vertex data channel "TexCoord0"

Constant Buffer "Globals" (274 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 48
  Matrix4x4 unity_WorldToObject at 112
  Matrix4x4 unity_MatrixVP at 176
  Vector3 _WorldSpaceCameraPos at 0
  VectorHalf4 unity_SHBr at 16
  VectorHalf4 unity_SHBg at 24
  VectorHalf4 unity_SHBb at 32
  VectorHalf4 unity_SHC at 40
  Vector4 _MainTex_ST at 240
  Vector4 _DetailAlbedoMap_ST at 256
  ScalarHalf _UVSec at 272
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    float4 _DetailAlbedoMap_ST;
    half _UVSec;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    half3 NORMAL0 [[ attribute(1) ]] ;
    float2 TEXCOORD0 [[ attribute(2) ]] ;
    float2 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    half4 TEXCOORD5 [[ user(TEXCOORD5) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    half4 u_xlat16_0;
    bool u_xlatb0;
    float4 u_xlat1;
    half u_xlat16_2;
    half3 u_xlat16_3;
    float u_xlat13;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0] * input.POSITION0.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2] * input.POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    output.mtl_Position = Globals.hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlatb0 = Globals._UVSec==half(0.0);
    u_xlat0.xy = (bool(u_xlatb0)) ? input.TEXCOORD0.xy : input.TEXCOORD1.xy;
    output.TEXCOORD0.zw = u_xlat0.xy * Globals._DetailAlbedoMap_ST.xy + Globals._DetailAlbedoMap_ST.zw;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy * Globals._MainTex_ST.xy + Globals._MainTex_ST.zw;
    u_xlat0.xyz = input.POSITION0.yyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * input.POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * input.POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyw = Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * input.POSITION0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyw + (-Globals._WorldSpaceCameraPos.xyzx.xyz);
    output.TEXCOORD1.xyz = half3(u_xlat1.xyz);
    output.TEXCOORD2.w = half(u_xlat0.x);
    output.TEXCOORD2.xyz = half3(0.0, 0.0, 0.0);
    output.TEXCOORD3.w = half(u_xlat0.y);
    output.TEXCOORD3.xyz = half3(0.0, 0.0, 0.0);
    u_xlat1.x = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = rsqrt(u_xlat13);
    u_xlat0.xyz = float3(u_xlat13) * u_xlat1.xyz;
    output.TEXCOORD4 = half4(u_xlat0);
    u_xlat16_2 = half(u_xlat0.y * u_xlat0.y);
    u_xlat16_2 = half(u_xlat0.x * u_xlat0.x + (-float(u_xlat16_2)));
    u_xlat16_0 = half4(u_xlat0.yzzx * u_xlat0.xyzz);
    u_xlat16_3.x = dot(Globals.unity_SHBr, u_xlat16_0);
    u_xlat16_3.y = dot(Globals.unity_SHBg, u_xlat16_0);
    u_xlat16_3.z = dot(Globals.unity_SHBb, u_xlat16_0);
    output.TEXCOORD5.xyz = Globals.unity_SHC.xyz * half3(u_xlat16_2) + u_xlat16_3.xyz;
    output.TEXCOORD5.w = half(0.0);
    return output;
}


-- Hardware tier variant: Tier 3
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0
Set 2D Texture "_OcclusionMap" to slot 1
Set 2D Texture "_EmissionMap" to slot 2

Constant Buffer "Globals" (48 bytes) on slot 0 {
  VectorHalf4 unity_SHAr at 0
  VectorHalf4 unity_SHAg at 8
  VectorHalf4 unity_SHAb at 16
  VectorHalf4 _Color at 24
  ScalarHalf _Metallic at 32
  ScalarHalf _Glossiness at 34
  ScalarHalf _OcclusionStrength at 36
  VectorHalf4 _EmissionColor at 40
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    half4 unity_SHAr;
    half4 unity_SHAg;
    half4 unity_SHAb;
    half4 _Color;
    half _Metallic;
    half _Glossiness;
    half _OcclusionStrength;
    half4 _EmissionColor;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    half4 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(0) ]];
    half4 SV_Target1 [[ color(1) ]];
    half4 SV_Target2 [[ color(2) ]];
    half4 SV_Target3 [[ color(3) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_OcclusionMap [[ sampler (1) ]],
    sampler sampler_EmissionMap [[ sampler (2) ]],
    texture2d<half, access::sample > _MainTex [[ texture (0) ]] ,
    texture2d<half, access::sample > _OcclusionMap [[ texture (1) ]] ,
    texture2d<half, access::sample > _EmissionMap [[ texture (2) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half4 u_xlat16_0;
    half4 u_xlat16_1;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    half3 u_xlat16_6;
    u_xlat16_0.x = _OcclusionMap.sample(sampler_OcclusionMap, input.TEXCOORD0.xy).y;
    u_xlat16_1.x = (-Globals._OcclusionStrength) + half(1.0);
    u_xlat16_0.w = u_xlat16_0.x * Globals._OcclusionStrength + u_xlat16_1.x;
    u_xlat16_1.x = (-Globals._Metallic) * half(0.779083729) + half(0.779083729);
    u_xlat16_2.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_2.xyz * Globals._Color.xyz;
    u_xlat16_6.xyz = Globals._Color.xyz * u_xlat16_2.xyz + half3(-0.220916301, -0.220916301, -0.220916301);
    output.SV_Target1.xyz = half3(Globals._Metallic) * u_xlat16_6.xyz + half3(0.220916301, 0.220916301, 0.220916301);
    u_xlat16_0.xyz = u_xlat16_1.xxx * u_xlat16_3.xyz;
    output.SV_Target0 = u_xlat16_0;
    output.SV_Target1.w = Globals._Glossiness;
    output.SV_Target2.w = half(1.0);
    u_xlat16_1.x = dot(input.TEXCOORD4.xyz, input.TEXCOORD4.xyz);
    u_xlat16_1.x = rsqrt(u_xlat16_1.x);
    u_xlat16_1.xyz = u_xlat16_1.xxx * input.TEXCOORD4.xyz;
    u_xlat16_2.xyz = u_xlat16_1.xyz * half3(0.5, 0.5, 0.5) + half3(0.5, 0.5, 0.5);
    output.SV_Target2.xyz = u_xlat16_2.xyz;
    u_xlat16_1.w = half(1.0);
    u_xlat16_4.x = dot(Globals.unity_SHAr, u_xlat16_1);
    u_xlat16_4.y = dot(Globals.unity_SHAg, u_xlat16_1);
    u_xlat16_4.z = dot(Globals.unity_SHAb, u_xlat16_1);
    u_xlat16_1.xyz = u_xlat16_4.xyz + input.TEXCOORD5.xyz;
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = log2(u_xlat16_1.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * half3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * half3(1.05499995, 1.05499995, 1.05499995) + half3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_1.xyz = u_xlat16_0.www * u_xlat16_2.xyz;
    u_xlat16_2.xyz = _EmissionMap.sample(sampler_EmissionMap, input.TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * Globals._EmissionColor.xyz;
    output.SV_Target3.xyz = u_xlat16_1.xyz * u_xlat16_0.xyz + u_xlat16_2.xyz;
    output.SV_Target3.w = half(1.0);
    return output;
}


-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"
Uses vertex data channel "TexCoord0"

Constant Buffer "Globals" (274 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 48
  Matrix4x4 unity_WorldToObject at 112
  Matrix4x4 unity_MatrixVP at 176
  Vector3 _WorldSpaceCameraPos at 0
  VectorHalf4 unity_SHBr at 16
  VectorHalf4 unity_SHBg at 24
  VectorHalf4 unity_SHBb at 32
  VectorHalf4 unity_SHC at 40
  Vector4 _MainTex_ST at 240
  Vector4 _DetailAlbedoMap_ST at 256
  ScalarHalf _UVSec at 272
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    float4 _DetailAlbedoMap_ST;
    half _UVSec;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    half3 NORMAL0 [[ attribute(1) ]] ;
    float2 TEXCOORD0 [[ attribute(2) ]] ;
    float2 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    half4 TEXCOORD5 [[ user(TEXCOORD5) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    half4 u_xlat16_0;
    bool u_xlatb0;
    float4 u_xlat1;
    half u_xlat16_2;
    half3 u_xlat16_3;
    float u_xlat13;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0] * input.POSITION0.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2] * input.POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    output.mtl_Position = Globals.hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlatb0 = Globals._UVSec==half(0.0);
    u_xlat0.xy = (bool(u_xlatb0)) ? input.TEXCOORD0.xy : input.TEXCOORD1.xy;
    output.TEXCOORD0.zw = u_xlat0.xy * Globals._DetailAlbedoMap_ST.xy + Globals._DetailAlbedoMap_ST.zw;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy * Globals._MainTex_ST.xy + Globals._MainTex_ST.zw;
    u_xlat0.xyz = input.POSITION0.yyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * input.POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * input.POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyw = Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * input.POSITION0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyw + (-Globals._WorldSpaceCameraPos.xyzx.xyz);
    output.TEXCOORD1.xyz = half3(u_xlat1.xyz);
    output.TEXCOORD2.w = half(u_xlat0.x);
    output.TEXCOORD2.xyz = half3(0.0, 0.0, 0.0);
    output.TEXCOORD3.w = half(u_xlat0.y);
    output.TEXCOORD3.xyz = half3(0.0, 0.0, 0.0);
    u_xlat1.x = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = rsqrt(u_xlat13);
    u_xlat0.xyz = float3(u_xlat13) * u_xlat1.xyz;
    output.TEXCOORD4 = half4(u_xlat0);
    u_xlat16_2 = half(u_xlat0.y * u_xlat0.y);
    u_xlat16_2 = half(u_xlat0.x * u_xlat0.x + (-float(u_xlat16_2)));
    u_xlat16_0 = half4(u_xlat0.yzzx * u_xlat0.xyzz);
    u_xlat16_3.x = dot(Globals.unity_SHBr, u_xlat16_0);
    u_xlat16_3.y = dot(Globals.unity_SHBg, u_xlat16_0);
    u_xlat16_3.z = dot(Globals.unity_SHBb, u_xlat16_0);
    output.TEXCOORD5.xyz = Globals.unity_SHC.xyz * half3(u_xlat16_2) + u_xlat16_3.xyz;
    output.TEXCOORD5.w = half(0.0);
    return output;
}


-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0
Set 2D Texture "_OcclusionMap" to slot 1

Constant Buffer "Globals" (38 bytes) on slot 0 {
  VectorHalf4 unity_SHAr at 0
  VectorHalf4 unity_SHAg at 8
  VectorHalf4 unity_SHAb at 16
  VectorHalf4 _Color at 24
  ScalarHalf _Metallic at 32
  ScalarHalf _Glossiness at 34
  ScalarHalf _OcclusionStrength at 36
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    half4 unity_SHAr;
    half4 unity_SHAg;
    half4 unity_SHAb;
    half4 _Color;
    half _Metallic;
    half _Glossiness;
    half _OcclusionStrength;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    half4 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(0) ]];
    half4 SV_Target1 [[ color(1) ]];
    half4 SV_Target2 [[ color(2) ]];
    half4 SV_Target3 [[ color(3) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_OcclusionMap [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture (0) ]] ,
    texture2d<half, access::sample > _OcclusionMap [[ texture (1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half4 u_xlat16_0;
    half4 u_xlat16_1;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    half3 u_xlat16_6;
    u_xlat16_0.x = _OcclusionMap.sample(sampler_OcclusionMap, input.TEXCOORD0.xy).y;
    u_xlat16_1.x = (-Globals._OcclusionStrength) + half(1.0);
    u_xlat16_0.w = u_xlat16_0.x * Globals._OcclusionStrength + u_xlat16_1.x;
    u_xlat16_1.x = (-Globals._Metallic) * half(0.779083729) + half(0.779083729);
    u_xlat16_2.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_2.xyz * Globals._Color.xyz;
    u_xlat16_6.xyz = Globals._Color.xyz * u_xlat16_2.xyz + half3(-0.220916301, -0.220916301, -0.220916301);
    output.SV_Target1.xyz = half3(Globals._Metallic) * u_xlat16_6.xyz + half3(0.220916301, 0.220916301, 0.220916301);
    u_xlat16_0.xyz = u_xlat16_1.xxx * u_xlat16_3.xyz;
    output.SV_Target0 = u_xlat16_0;
    output.SV_Target1.w = Globals._Glossiness;
    output.SV_Target2.w = half(1.0);
    u_xlat16_1.x = dot(input.TEXCOORD4.xyz, input.TEXCOORD4.xyz);
    u_xlat16_1.x = rsqrt(u_xlat16_1.x);
    u_xlat16_1.xyz = u_xlat16_1.xxx * input.TEXCOORD4.xyz;
    u_xlat16_2.xyz = u_xlat16_1.xyz * half3(0.5, 0.5, 0.5) + half3(0.5, 0.5, 0.5);
    output.SV_Target2.xyz = u_xlat16_2.xyz;
    u_xlat16_1.w = half(1.0);
    u_xlat16_4.x = dot(Globals.unity_SHAr, u_xlat16_1);
    u_xlat16_4.y = dot(Globals.unity_SHAg, u_xlat16_1);
    u_xlat16_4.z = dot(Globals.unity_SHAb, u_xlat16_1);
    u_xlat16_1.xyz = u_xlat16_4.xyz + input.TEXCOORD5.xyz;
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = log2(u_xlat16_1.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * half3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * half3(1.05499995, 1.05499995, 1.05499995) + half3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_1.xyz = u_xlat16_0.www * u_xlat16_2.xyz;
    output.SV_Target3.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    output.SV_Target3.w = half(1.0);
    return output;
}


-- Hardware tier variant: Tier 2
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"
Uses vertex data channel "TexCoord0"

Constant Buffer "Globals" (274 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 48
  Matrix4x4 unity_WorldToObject at 112
  Matrix4x4 unity_MatrixVP at 176
  Vector3 _WorldSpaceCameraPos at 0
  VectorHalf4 unity_SHBr at 16
  VectorHalf4 unity_SHBg at 24
  VectorHalf4 unity_SHBb at 32
  VectorHalf4 unity_SHC at 40
  Vector4 _MainTex_ST at 240
  Vector4 _DetailAlbedoMap_ST at 256
  ScalarHalf _UVSec at 272
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    float4 _DetailAlbedoMap_ST;
    half _UVSec;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    half3 NORMAL0 [[ attribute(1) ]] ;
    float2 TEXCOORD0 [[ attribute(2) ]] ;
    float2 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    half4 TEXCOORD5 [[ user(TEXCOORD5) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    half4 u_xlat16_0;
    bool u_xlatb0;
    float4 u_xlat1;
    half u_xlat16_2;
    half3 u_xlat16_3;
    float u_xlat13;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0] * input.POSITION0.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2] * input.POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    output.mtl_Position = Globals.hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlatb0 = Globals._UVSec==half(0.0);
    u_xlat0.xy = (bool(u_xlatb0)) ? input.TEXCOORD0.xy : input.TEXCOORD1.xy;
    output.TEXCOORD0.zw = u_xlat0.xy * Globals._DetailAlbedoMap_ST.xy + Globals._DetailAlbedoMap_ST.zw;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy * Globals._MainTex_ST.xy + Globals._MainTex_ST.zw;
    u_xlat0.xyz = input.POSITION0.yyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * input.POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * input.POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyw = Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * input.POSITION0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyw + (-Globals._WorldSpaceCameraPos.xyzx.xyz);
    output.TEXCOORD1.xyz = half3(u_xlat1.xyz);
    output.TEXCOORD2.w = half(u_xlat0.x);
    output.TEXCOORD2.xyz = half3(0.0, 0.0, 0.0);
    output.TEXCOORD3.w = half(u_xlat0.y);
    output.TEXCOORD3.xyz = half3(0.0, 0.0, 0.0);
    u_xlat1.x = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = rsqrt(u_xlat13);
    u_xlat0.xyz = float3(u_xlat13) * u_xlat1.xyz;
    output.TEXCOORD4 = half4(u_xlat0);
    u_xlat16_2 = half(u_xlat0.y * u_xlat0.y);
    u_xlat16_2 = half(u_xlat0.x * u_xlat0.x + (-float(u_xlat16_2)));
    u_xlat16_0 = half4(u_xlat0.yzzx * u_xlat0.xyzz);
    u_xlat16_3.x = dot(Globals.unity_SHBr, u_xlat16_0);
    u_xlat16_3.y = dot(Globals.unity_SHBg, u_xlat16_0);
    u_xlat16_3.z = dot(Globals.unity_SHBb, u_xlat16_0);
    output.TEXCOORD5.xyz = Globals.unity_SHC.xyz * half3(u_xlat16_2) + u_xlat16_3.xyz;
    output.TEXCOORD5.w = half(0.0);
    return output;
}


-- Hardware tier variant: Tier 2
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0
Set 2D Texture "_OcclusionMap" to slot 1

Constant Buffer "Globals" (38 bytes) on slot 0 {
  VectorHalf4 unity_SHAr at 0
  VectorHalf4 unity_SHAg at 8
  VectorHalf4 unity_SHAb at 16
  VectorHalf4 _Color at 24
  ScalarHalf _Metallic at 32
  ScalarHalf _Glossiness at 34
  ScalarHalf _OcclusionStrength at 36
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    half4 unity_SHAr;
    half4 unity_SHAg;
    half4 unity_SHAb;
    half4 _Color;
    half _Metallic;
    half _Glossiness;
    half _OcclusionStrength;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    half4 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(0) ]];
    half4 SV_Target1 [[ color(1) ]];
    half4 SV_Target2 [[ color(2) ]];
    half4 SV_Target3 [[ color(3) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_OcclusionMap [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture (0) ]] ,
    texture2d<half, access::sample > _OcclusionMap [[ texture (1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half4 u_xlat16_0;
    half4 u_xlat16_1;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    half3 u_xlat16_6;
    u_xlat16_0.x = _OcclusionMap.sample(sampler_OcclusionMap, input.TEXCOORD0.xy).y;
    u_xlat16_1.x = (-Globals._OcclusionStrength) + half(1.0);
    u_xlat16_0.w = u_xlat16_0.x * Globals._OcclusionStrength + u_xlat16_1.x;
    u_xlat16_1.x = (-Globals._Metallic) * half(0.779083729) + half(0.779083729);
    u_xlat16_2.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_2.xyz * Globals._Color.xyz;
    u_xlat16_6.xyz = Globals._Color.xyz * u_xlat16_2.xyz + half3(-0.220916301, -0.220916301, -0.220916301);
    output.SV_Target1.xyz = half3(Globals._Metallic) * u_xlat16_6.xyz + half3(0.220916301, 0.220916301, 0.220916301);
    u_xlat16_0.xyz = u_xlat16_1.xxx * u_xlat16_3.xyz;
    output.SV_Target0 = u_xlat16_0;
    output.SV_Target1.w = Globals._Glossiness;
    output.SV_Target2.w = half(1.0);
    u_xlat16_1.x = dot(input.TEXCOORD4.xyz, input.TEXCOORD4.xyz);
    u_xlat16_1.x = rsqrt(u_xlat16_1.x);
    u_xlat16_1.xyz = u_xlat16_1.xxx * input.TEXCOORD4.xyz;
    u_xlat16_2.xyz = u_xlat16_1.xyz * half3(0.5, 0.5, 0.5) + half3(0.5, 0.5, 0.5);
    output.SV_Target2.xyz = u_xlat16_2.xyz;
    u_xlat16_1.w = half(1.0);
    u_xlat16_4.x = dot(Globals.unity_SHAr, u_xlat16_1);
    u_xlat16_4.y = dot(Globals.unity_SHAg, u_xlat16_1);
    u_xlat16_4.z = dot(Globals.unity_SHAb, u_xlat16_1);
    u_xlat16_1.xyz = u_xlat16_4.xyz + input.TEXCOORD5.xyz;
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = log2(u_xlat16_1.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * half3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * half3(1.05499995, 1.05499995, 1.05499995) + half3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_1.xyz = u_xlat16_0.www * u_xlat16_2.xyz;
    output.SV_Target3.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    output.SV_Target3.w = half(1.0);
    return output;
}


-- Hardware tier variant: Tier 3
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"
Uses vertex data channel "TexCoord0"

Constant Buffer "Globals" (274 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 48
  Matrix4x4 unity_WorldToObject at 112
  Matrix4x4 unity_MatrixVP at 176
  Vector3 _WorldSpaceCameraPos at 0
  VectorHalf4 unity_SHBr at 16
  VectorHalf4 unity_SHBg at 24
  VectorHalf4 unity_SHBb at 32
  VectorHalf4 unity_SHC at 40
  Vector4 _MainTex_ST at 240
  Vector4 _DetailAlbedoMap_ST at 256
  ScalarHalf _UVSec at 272
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    float4 _DetailAlbedoMap_ST;
    half _UVSec;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    half3 NORMAL0 [[ attribute(1) ]] ;
    float2 TEXCOORD0 [[ attribute(2) ]] ;
    float2 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    half4 TEXCOORD5 [[ user(TEXCOORD5) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    half4 u_xlat16_0;
    bool u_xlatb0;
    float4 u_xlat1;
    half u_xlat16_2;
    half3 u_xlat16_3;
    float u_xlat13;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0] * input.POSITION0.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2] * input.POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    output.mtl_Position = Globals.hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlatb0 = Globals._UVSec==half(0.0);
    u_xlat0.xy = (bool(u_xlatb0)) ? input.TEXCOORD0.xy : input.TEXCOORD1.xy;
    output.TEXCOORD0.zw = u_xlat0.xy * Globals._DetailAlbedoMap_ST.xy + Globals._DetailAlbedoMap_ST.zw;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy * Globals._MainTex_ST.xy + Globals._MainTex_ST.zw;
    u_xlat0.xyz = input.POSITION0.yyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * input.POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * input.POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyw = Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * input.POSITION0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyw + (-Globals._WorldSpaceCameraPos.xyzx.xyz);
    output.TEXCOORD1.xyz = half3(u_xlat1.xyz);
    output.TEXCOORD2.w = half(u_xlat0.x);
    output.TEXCOORD2.xyz = half3(0.0, 0.0, 0.0);
    output.TEXCOORD3.w = half(u_xlat0.y);
    output.TEXCOORD3.xyz = half3(0.0, 0.0, 0.0);
    u_xlat1.x = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = rsqrt(u_xlat13);
    u_xlat0.xyz = float3(u_xlat13) * u_xlat1.xyz;
    output.TEXCOORD4 = half4(u_xlat0);
    u_xlat16_2 = half(u_xlat0.y * u_xlat0.y);
    u_xlat16_2 = half(u_xlat0.x * u_xlat0.x + (-float(u_xlat16_2)));
    u_xlat16_0 = half4(u_xlat0.yzzx * u_xlat0.xyzz);
    u_xlat16_3.x = dot(Globals.unity_SHBr, u_xlat16_0);
    u_xlat16_3.y = dot(Globals.unity_SHBg, u_xlat16_0);
    u_xlat16_3.z = dot(Globals.unity_SHBb, u_xlat16_0);
    output.TEXCOORD5.xyz = Globals.unity_SHC.xyz * half3(u_xlat16_2) + u_xlat16_3.xyz;
    output.TEXCOORD5.w = half(0.0);
    return output;
}


-- Hardware tier variant: Tier 3
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0
Set 2D Texture "_OcclusionMap" to slot 1

Constant Buffer "Globals" (38 bytes) on slot 0 {
  VectorHalf4 unity_SHAr at 0
  VectorHalf4 unity_SHAg at 8
  VectorHalf4 unity_SHAb at 16
  VectorHalf4 _Color at 24
  ScalarHalf _Metallic at 32
  ScalarHalf _Glossiness at 34
  ScalarHalf _OcclusionStrength at 36
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    half4 unity_SHAr;
    half4 unity_SHAg;
    half4 unity_SHAb;
    half4 _Color;
    half _Metallic;
    half _Glossiness;
    half _OcclusionStrength;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    half4 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(0) ]];
    half4 SV_Target1 [[ color(1) ]];
    half4 SV_Target2 [[ color(2) ]];
    half4 SV_Target3 [[ color(3) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_OcclusionMap [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture (0) ]] ,
    texture2d<half, access::sample > _OcclusionMap [[ texture (1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half4 u_xlat16_0;
    half4 u_xlat16_1;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    half3 u_xlat16_6;
    u_xlat16_0.x = _OcclusionMap.sample(sampler_OcclusionMap, input.TEXCOORD0.xy).y;
    u_xlat16_1.x = (-Globals._OcclusionStrength) + half(1.0);
    u_xlat16_0.w = u_xlat16_0.x * Globals._OcclusionStrength + u_xlat16_1.x;
    u_xlat16_1.x = (-Globals._Metallic) * half(0.779083729) + half(0.779083729);
    u_xlat16_2.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_2.xyz * Globals._Color.xyz;
    u_xlat16_6.xyz = Globals._Color.xyz * u_xlat16_2.xyz + half3(-0.220916301, -0.220916301, -0.220916301);
    output.SV_Target1.xyz = half3(Globals._Metallic) * u_xlat16_6.xyz + half3(0.220916301, 0.220916301, 0.220916301);
    u_xlat16_0.xyz = u_xlat16_1.xxx * u_xlat16_3.xyz;
    output.SV_Target0 = u_xlat16_0;
    output.SV_Target1.w = Globals._Glossiness;
    output.SV_Target2.w = half(1.0);
    u_xlat16_1.x = dot(input.TEXCOORD4.xyz, input.TEXCOORD4.xyz);
    u_xlat16_1.x = rsqrt(u_xlat16_1.x);
    u_xlat16_1.xyz = u_xlat16_1.xxx * input.TEXCOORD4.xyz;
    u_xlat16_2.xyz = u_xlat16_1.xyz * half3(0.5, 0.5, 0.5) + half3(0.5, 0.5, 0.5);
    output.SV_Target2.xyz = u_xlat16_2.xyz;
    u_xlat16_1.w = half(1.0);
    u_xlat16_4.x = dot(Globals.unity_SHAr, u_xlat16_1);
    u_xlat16_4.y = dot(Globals.unity_SHAg, u_xlat16_1);
    u_xlat16_4.z = dot(Globals.unity_SHAb, u_xlat16_1);
    u_xlat16_1.xyz = u_xlat16_4.xyz + input.TEXCOORD5.xyz;
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = log2(u_xlat16_1.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * half3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * half3(1.05499995, 1.05499995, 1.05499995) + half3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_1.xyz = u_xlat16_0.www * u_xlat16_2.xyz;
    output.SV_Target3.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    output.SV_Target3.w = half(1.0);
    return output;
}


-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"
Uses vertex data channel "TexCoord0"

Constant Buffer "Globals" (274 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 48
  Matrix4x4 unity_WorldToObject at 112
  Matrix4x4 unity_MatrixVP at 176
  Vector3 _WorldSpaceCameraPos at 0
  VectorHalf4 unity_SHBr at 16
  VectorHalf4 unity_SHBg at 24
  VectorHalf4 unity_SHBb at 32
  VectorHalf4 unity_SHC at 40
  Vector4 _MainTex_ST at 240
  Vector4 _DetailAlbedoMap_ST at 256
  ScalarHalf _UVSec at 272
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    float4 _DetailAlbedoMap_ST;
    half _UVSec;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    half3 NORMAL0 [[ attribute(1) ]] ;
    float2 TEXCOORD0 [[ attribute(2) ]] ;
    float2 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    half4 TEXCOORD5 [[ user(TEXCOORD5) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    half4 u_xlat16_0;
    bool u_xlatb0;
    float4 u_xlat1;
    half u_xlat16_2;
    half3 u_xlat16_3;
    float u_xlat13;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0] * input.POSITION0.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2] * input.POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    output.mtl_Position = Globals.hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlatb0 = Globals._UVSec==half(0.0);
    u_xlat0.xy = (bool(u_xlatb0)) ? input.TEXCOORD0.xy : input.TEXCOORD1.xy;
    output.TEXCOORD0.zw = u_xlat0.xy * Globals._DetailAlbedoMap_ST.xy + Globals._DetailAlbedoMap_ST.zw;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy * Globals._MainTex_ST.xy + Globals._MainTex_ST.zw;
    u_xlat0.xyz = input.POSITION0.yyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * input.POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * input.POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyw = Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * input.POSITION0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyw + (-Globals._WorldSpaceCameraPos.xyzx.xyz);
    output.TEXCOORD1.xyz = half3(u_xlat1.xyz);
    output.TEXCOORD2.w = half(u_xlat0.x);
    output.TEXCOORD2.xyz = half3(0.0, 0.0, 0.0);
    output.TEXCOORD3.w = half(u_xlat0.y);
    output.TEXCOORD3.xyz = half3(0.0, 0.0, 0.0);
    u_xlat1.x = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = rsqrt(u_xlat13);
    u_xlat0.xyz = float3(u_xlat13) * u_xlat1.xyz;
    output.TEXCOORD4 = half4(u_xlat0);
    u_xlat16_2 = half(u_xlat0.y * u_xlat0.y);
    u_xlat16_2 = half(u_xlat0.x * u_xlat0.x + (-float(u_xlat16_2)));
    u_xlat16_0 = half4(u_xlat0.yzzx * u_xlat0.xyzz);
    u_xlat16_3.x = dot(Globals.unity_SHBr, u_xlat16_0);
    u_xlat16_3.y = dot(Globals.unity_SHBg, u_xlat16_0);
    u_xlat16_3.z = dot(Globals.unity_SHBb, u_xlat16_0);
    output.TEXCOORD5.xyz = Globals.unity_SHC.xyz * half3(u_xlat16_2) + u_xlat16_3.xyz;
    output.TEXCOORD5.w = half(0.0);
    return output;
}


-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0
Set 2D Texture "_OcclusionMap" to slot 1
Set 2D Texture "_EmissionMap" to slot 2

Constant Buffer "Globals" (48 bytes) on slot 0 {
  VectorHalf4 unity_SHAr at 0
  VectorHalf4 unity_SHAg at 8
  VectorHalf4 unity_SHAb at 16
  VectorHalf4 _Color at 24
  ScalarHalf _Metallic at 32
  ScalarHalf _Glossiness at 34
  ScalarHalf _OcclusionStrength at 36
  VectorHalf4 _EmissionColor at 40
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    half4 unity_SHAr;
    half4 unity_SHAg;
    half4 unity_SHAb;
    half4 _Color;
    half _Metallic;
    half _Glossiness;
    half _OcclusionStrength;
    half4 _EmissionColor;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    half4 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(0) ]];
    half4 SV_Target1 [[ color(1) ]];
    half4 SV_Target2 [[ color(2) ]];
    half4 SV_Target3 [[ color(3) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_OcclusionMap [[ sampler (1) ]],
    sampler sampler_EmissionMap [[ sampler (2) ]],
    texture2d<half, access::sample > _MainTex [[ texture (0) ]] ,
    texture2d<half, access::sample > _OcclusionMap [[ texture (1) ]] ,
    texture2d<half, access::sample > _EmissionMap [[ texture (2) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half4 u_xlat16_0;
    half4 u_xlat16_1;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    half3 u_xlat16_6;
    u_xlat16_0.x = _OcclusionMap.sample(sampler_OcclusionMap, input.TEXCOORD0.xy).y;
    u_xlat16_1.x = (-Globals._OcclusionStrength) + half(1.0);
    u_xlat16_0.w = u_xlat16_0.x * Globals._OcclusionStrength + u_xlat16_1.x;
    u_xlat16_1.x = (-Globals._Metallic) * half(0.779083729) + half(0.779083729);
    u_xlat16_2.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_2.xyz * Globals._Color.xyz;
    u_xlat16_6.xyz = Globals._Color.xyz * u_xlat16_2.xyz + half3(-0.220916301, -0.220916301, -0.220916301);
    output.SV_Target1.xyz = half3(Globals._Metallic) * u_xlat16_6.xyz + half3(0.220916301, 0.220916301, 0.220916301);
    u_xlat16_0.xyz = u_xlat16_1.xxx * u_xlat16_3.xyz;
    output.SV_Target0 = u_xlat16_0;
    output.SV_Target1.w = Globals._Glossiness;
    output.SV_Target2.w = half(1.0);
    u_xlat16_1.x = dot(input.TEXCOORD4.xyz, input.TEXCOORD4.xyz);
    u_xlat16_1.x = rsqrt(u_xlat16_1.x);
    u_xlat16_1.xyz = u_xlat16_1.xxx * input.TEXCOORD4.xyz;
    u_xlat16_2.xyz = u_xlat16_1.xyz * half3(0.5, 0.5, 0.5) + half3(0.5, 0.5, 0.5);
    output.SV_Target2.xyz = u_xlat16_2.xyz;
    u_xlat16_1.w = half(1.0);
    u_xlat16_4.x = dot(Globals.unity_SHAr, u_xlat16_1);
    u_xlat16_4.y = dot(Globals.unity_SHAg, u_xlat16_1);
    u_xlat16_4.z = dot(Globals.unity_SHAb, u_xlat16_1);
    u_xlat16_1.xyz = u_xlat16_4.xyz + input.TEXCOORD5.xyz;
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = log2(u_xlat16_1.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * half3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * half3(1.05499995, 1.05499995, 1.05499995) + half3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_1.xyz = u_xlat16_0.www * u_xlat16_2.xyz;
    u_xlat16_2.xyz = _EmissionMap.sample(sampler_EmissionMap, input.TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * Globals._EmissionColor.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_0.xyz + u_xlat16_2.xyz;
    output.SV_Target3.xyz = exp2((-u_xlat16_1.xyz));
    output.SV_Target3.w = half(1.0);
    return output;
}


-- Hardware tier variant: Tier 2
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"
Uses vertex data channel "TexCoord0"

Constant Buffer "Globals" (274 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 48
  Matrix4x4 unity_WorldToObject at 112
  Matrix4x4 unity_MatrixVP at 176
  Vector3 _WorldSpaceCameraPos at 0
  VectorHalf4 unity_SHBr at 16
  VectorHalf4 unity_SHBg at 24
  VectorHalf4 unity_SHBb at 32
  VectorHalf4 unity_SHC at 40
  Vector4 _MainTex_ST at 240
  Vector4 _DetailAlbedoMap_ST at 256
  ScalarHalf _UVSec at 272
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    float4 _DetailAlbedoMap_ST;
    half _UVSec;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    half3 NORMAL0 [[ attribute(1) ]] ;
    float2 TEXCOORD0 [[ attribute(2) ]] ;
    float2 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    half4 TEXCOORD5 [[ user(TEXCOORD5) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    half4 u_xlat16_0;
    bool u_xlatb0;
    float4 u_xlat1;
    half u_xlat16_2;
    half3 u_xlat16_3;
    float u_xlat13;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0] * input.POSITION0.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2] * input.POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    output.mtl_Position = Globals.hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlatb0 = Globals._UVSec==half(0.0);
    u_xlat0.xy = (bool(u_xlatb0)) ? input.TEXCOORD0.xy : input.TEXCOORD1.xy;
    output.TEXCOORD0.zw = u_xlat0.xy * Globals._DetailAlbedoMap_ST.xy + Globals._DetailAlbedoMap_ST.zw;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy * Globals._MainTex_ST.xy + Globals._MainTex_ST.zw;
    u_xlat0.xyz = input.POSITION0.yyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * input.POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * input.POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyw = Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * input.POSITION0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyw + (-Globals._WorldSpaceCameraPos.xyzx.xyz);
    output.TEXCOORD1.xyz = half3(u_xlat1.xyz);
    output.TEXCOORD2.w = half(u_xlat0.x);
    output.TEXCOORD2.xyz = half3(0.0, 0.0, 0.0);
    output.TEXCOORD3.w = half(u_xlat0.y);
    output.TEXCOORD3.xyz = half3(0.0, 0.0, 0.0);
    u_xlat1.x = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = rsqrt(u_xlat13);
    u_xlat0.xyz = float3(u_xlat13) * u_xlat1.xyz;
    output.TEXCOORD4 = half4(u_xlat0);
    u_xlat16_2 = half(u_xlat0.y * u_xlat0.y);
    u_xlat16_2 = half(u_xlat0.x * u_xlat0.x + (-float(u_xlat16_2)));
    u_xlat16_0 = half4(u_xlat0.yzzx * u_xlat0.xyzz);
    u_xlat16_3.x = dot(Globals.unity_SHBr, u_xlat16_0);
    u_xlat16_3.y = dot(Globals.unity_SHBg, u_xlat16_0);
    u_xlat16_3.z = dot(Globals.unity_SHBb, u_xlat16_0);
    output.TEXCOORD5.xyz = Globals.unity_SHC.xyz * half3(u_xlat16_2) + u_xlat16_3.xyz;
    output.TEXCOORD5.w = half(0.0);
    return output;
}


-- Hardware tier variant: Tier 2
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0
Set 2D Texture "_OcclusionMap" to slot 1
Set 2D Texture "_EmissionMap" to slot 2

Constant Buffer "Globals" (48 bytes) on slot 0 {
  VectorHalf4 unity_SHAr at 0
  VectorHalf4 unity_SHAg at 8
  VectorHalf4 unity_SHAb at 16
  VectorHalf4 _Color at 24
  ScalarHalf _Metallic at 32
  ScalarHalf _Glossiness at 34
  ScalarHalf _OcclusionStrength at 36
  VectorHalf4 _EmissionColor at 40
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    half4 unity_SHAr;
    half4 unity_SHAg;
    half4 unity_SHAb;
    half4 _Color;
    half _Metallic;
    half _Glossiness;
    half _OcclusionStrength;
    half4 _EmissionColor;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    half4 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(0) ]];
    half4 SV_Target1 [[ color(1) ]];
    half4 SV_Target2 [[ color(2) ]];
    half4 SV_Target3 [[ color(3) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_OcclusionMap [[ sampler (1) ]],
    sampler sampler_EmissionMap [[ sampler (2) ]],
    texture2d<half, access::sample > _MainTex [[ texture (0) ]] ,
    texture2d<half, access::sample > _OcclusionMap [[ texture (1) ]] ,
    texture2d<half, access::sample > _EmissionMap [[ texture (2) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half4 u_xlat16_0;
    half4 u_xlat16_1;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    half3 u_xlat16_6;
    u_xlat16_0.x = _OcclusionMap.sample(sampler_OcclusionMap, input.TEXCOORD0.xy).y;
    u_xlat16_1.x = (-Globals._OcclusionStrength) + half(1.0);
    u_xlat16_0.w = u_xlat16_0.x * Globals._OcclusionStrength + u_xlat16_1.x;
    u_xlat16_1.x = (-Globals._Metallic) * half(0.779083729) + half(0.779083729);
    u_xlat16_2.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_2.xyz * Globals._Color.xyz;
    u_xlat16_6.xyz = Globals._Color.xyz * u_xlat16_2.xyz + half3(-0.220916301, -0.220916301, -0.220916301);
    output.SV_Target1.xyz = half3(Globals._Metallic) * u_xlat16_6.xyz + half3(0.220916301, 0.220916301, 0.220916301);
    u_xlat16_0.xyz = u_xlat16_1.xxx * u_xlat16_3.xyz;
    output.SV_Target0 = u_xlat16_0;
    output.SV_Target1.w = Globals._Glossiness;
    output.SV_Target2.w = half(1.0);
    u_xlat16_1.x = dot(input.TEXCOORD4.xyz, input.TEXCOORD4.xyz);
    u_xlat16_1.x = rsqrt(u_xlat16_1.x);
    u_xlat16_1.xyz = u_xlat16_1.xxx * input.TEXCOORD4.xyz;
    u_xlat16_2.xyz = u_xlat16_1.xyz * half3(0.5, 0.5, 0.5) + half3(0.5, 0.5, 0.5);
    output.SV_Target2.xyz = u_xlat16_2.xyz;
    u_xlat16_1.w = half(1.0);
    u_xlat16_4.x = dot(Globals.unity_SHAr, u_xlat16_1);
    u_xlat16_4.y = dot(Globals.unity_SHAg, u_xlat16_1);
    u_xlat16_4.z = dot(Globals.unity_SHAb, u_xlat16_1);
    u_xlat16_1.xyz = u_xlat16_4.xyz + input.TEXCOORD5.xyz;
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = log2(u_xlat16_1.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * half3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * half3(1.05499995, 1.05499995, 1.05499995) + half3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_1.xyz = u_xlat16_0.www * u_xlat16_2.xyz;
    u_xlat16_2.xyz = _EmissionMap.sample(sampler_EmissionMap, input.TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * Globals._EmissionColor.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_0.xyz + u_xlat16_2.xyz;
    output.SV_Target3.xyz = exp2((-u_xlat16_1.xyz));
    output.SV_Target3.w = half(1.0);
    return output;
}


-- Hardware tier variant: Tier 3
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"
Uses vertex data channel "TexCoord0"

Constant Buffer "Globals" (274 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 48
  Matrix4x4 unity_WorldToObject at 112
  Matrix4x4 unity_MatrixVP at 176
  Vector3 _WorldSpaceCameraPos at 0
  VectorHalf4 unity_SHBr at 16
  VectorHalf4 unity_SHBg at 24
  VectorHalf4 unity_SHBb at 32
  VectorHalf4 unity_SHC at 40
  Vector4 _MainTex_ST at 240
  Vector4 _DetailAlbedoMap_ST at 256
  ScalarHalf _UVSec at 272
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    float4 _DetailAlbedoMap_ST;
    half _UVSec;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    half3 NORMAL0 [[ attribute(1) ]] ;
    float2 TEXCOORD0 [[ attribute(2) ]] ;
    float2 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    half4 TEXCOORD5 [[ user(TEXCOORD5) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    half4 u_xlat16_0;
    bool u_xlatb0;
    float4 u_xlat1;
    half u_xlat16_2;
    half3 u_xlat16_3;
    float u_xlat13;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0] * input.POSITION0.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2] * input.POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    output.mtl_Position = Globals.hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlatb0 = Globals._UVSec==half(0.0);
    u_xlat0.xy = (bool(u_xlatb0)) ? input.TEXCOORD0.xy : input.TEXCOORD1.xy;
    output.TEXCOORD0.zw = u_xlat0.xy * Globals._DetailAlbedoMap_ST.xy + Globals._DetailAlbedoMap_ST.zw;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy * Globals._MainTex_ST.xy + Globals._MainTex_ST.zw;
    u_xlat0.xyz = input.POSITION0.yyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * input.POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * input.POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyw = Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * input.POSITION0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyw + (-Globals._WorldSpaceCameraPos.xyzx.xyz);
    output.TEXCOORD1.xyz = half3(u_xlat1.xyz);
    output.TEXCOORD2.w = half(u_xlat0.x);
    output.TEXCOORD2.xyz = half3(0.0, 0.0, 0.0);
    output.TEXCOORD3.w = half(u_xlat0.y);
    output.TEXCOORD3.xyz = half3(0.0, 0.0, 0.0);
    u_xlat1.x = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = rsqrt(u_xlat13);
    u_xlat0.xyz = float3(u_xlat13) * u_xlat1.xyz;
    output.TEXCOORD4 = half4(u_xlat0);
    u_xlat16_2 = half(u_xlat0.y * u_xlat0.y);
    u_xlat16_2 = half(u_xlat0.x * u_xlat0.x + (-float(u_xlat16_2)));
    u_xlat16_0 = half4(u_xlat0.yzzx * u_xlat0.xyzz);
    u_xlat16_3.x = dot(Globals.unity_SHBr, u_xlat16_0);
    u_xlat16_3.y = dot(Globals.unity_SHBg, u_xlat16_0);
    u_xlat16_3.z = dot(Globals.unity_SHBb, u_xlat16_0);
    output.TEXCOORD5.xyz = Globals.unity_SHC.xyz * half3(u_xlat16_2) + u_xlat16_3.xyz;
    output.TEXCOORD5.w = half(0.0);
    return output;
}


-- Hardware tier variant: Tier 3
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0
Set 2D Texture "_OcclusionMap" to slot 1
Set 2D Texture "_EmissionMap" to slot 2

Constant Buffer "Globals" (48 bytes) on slot 0 {
  VectorHalf4 unity_SHAr at 0
  VectorHalf4 unity_SHAg at 8
  VectorHalf4 unity_SHAb at 16
  VectorHalf4 _Color at 24
  ScalarHalf _Metallic at 32
  ScalarHalf _Glossiness at 34
  ScalarHalf _OcclusionStrength at 36
  VectorHalf4 _EmissionColor at 40
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    half4 unity_SHAr;
    half4 unity_SHAg;
    half4 unity_SHAb;
    half4 _Color;
    half _Metallic;
    half _Glossiness;
    half _OcclusionStrength;
    half4 _EmissionColor;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    half4 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(0) ]];
    half4 SV_Target1 [[ color(1) ]];
    half4 SV_Target2 [[ color(2) ]];
    half4 SV_Target3 [[ color(3) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_OcclusionMap [[ sampler (1) ]],
    sampler sampler_EmissionMap [[ sampler (2) ]],
    texture2d<half, access::sample > _MainTex [[ texture (0) ]] ,
    texture2d<half, access::sample > _OcclusionMap [[ texture (1) ]] ,
    texture2d<half, access::sample > _EmissionMap [[ texture (2) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half4 u_xlat16_0;
    half4 u_xlat16_1;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    half3 u_xlat16_6;
    u_xlat16_0.x = _OcclusionMap.sample(sampler_OcclusionMap, input.TEXCOORD0.xy).y;
    u_xlat16_1.x = (-Globals._OcclusionStrength) + half(1.0);
    u_xlat16_0.w = u_xlat16_0.x * Globals._OcclusionStrength + u_xlat16_1.x;
    u_xlat16_1.x = (-Globals._Metallic) * half(0.779083729) + half(0.779083729);
    u_xlat16_2.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_2.xyz * Globals._Color.xyz;
    u_xlat16_6.xyz = Globals._Color.xyz * u_xlat16_2.xyz + half3(-0.220916301, -0.220916301, -0.220916301);
    output.SV_Target1.xyz = half3(Globals._Metallic) * u_xlat16_6.xyz + half3(0.220916301, 0.220916301, 0.220916301);
    u_xlat16_0.xyz = u_xlat16_1.xxx * u_xlat16_3.xyz;
    output.SV_Target0 = u_xlat16_0;
    output.SV_Target1.w = Globals._Glossiness;
    output.SV_Target2.w = half(1.0);
    u_xlat16_1.x = dot(input.TEXCOORD4.xyz, input.TEXCOORD4.xyz);
    u_xlat16_1.x = rsqrt(u_xlat16_1.x);
    u_xlat16_1.xyz = u_xlat16_1.xxx * input.TEXCOORD4.xyz;
    u_xlat16_2.xyz = u_xlat16_1.xyz * half3(0.5, 0.5, 0.5) + half3(0.5, 0.5, 0.5);
    output.SV_Target2.xyz = u_xlat16_2.xyz;
    u_xlat16_1.w = half(1.0);
    u_xlat16_4.x = dot(Globals.unity_SHAr, u_xlat16_1);
    u_xlat16_4.y = dot(Globals.unity_SHAg, u_xlat16_1);
    u_xlat16_4.z = dot(Globals.unity_SHAb, u_xlat16_1);
    u_xlat16_1.xyz = u_xlat16_4.xyz + input.TEXCOORD5.xyz;
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = log2(u_xlat16_1.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * half3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * half3(1.05499995, 1.05499995, 1.05499995) + half3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_1.xyz = u_xlat16_0.www * u_xlat16_2.xyz;
    u_xlat16_2.xyz = _EmissionMap.sample(sampler_EmissionMap, input.TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * Globals._EmissionColor.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_0.xyz + u_xlat16_2.xyz;
    output.SV_Target3.xyz = exp2((-u_xlat16_1.xyz));
    output.SV_Target3.w = half(1.0);
    return output;
}


 }
}
SubShader { 
 LOD 150
 Tags { "RenderType"="Opaque" "PerformanceChecks"="False" }
 Pass {
  Name "FORWARD"
  Tags { "LIGHTMODE"="FORWARDBASE" "SHADOWSUPPORT"="true" "RenderType"="Opaque" "PerformanceChecks"="False" }
  ZWrite [_ZWrite]
  Blend [_SrcBlend] [_DstBlend]
  //////////////////////////////////
  //                              //
  //      Compiled programs       //
  //                              //
  //////////////////////////////////
//////////////////////////////////////////////////////
Keywords set in this variant: DIRECTIONAL 
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"
Uses vertex data channel "TexCoord0"

Constant Buffer "Globals" (306 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 80
  Matrix4x4 unity_WorldToObject at 144
  Matrix4x4 unity_MatrixVP at 208
  Vector3 _WorldSpaceCameraPos at 0
  VectorHalf4 unity_SHAr at 16
  VectorHalf4 unity_SHAg at 24
  VectorHalf4 unity_SHAb at 32
  VectorHalf4 unity_SHBr at 40
  VectorHalf4 unity_SHBg at 48
  VectorHalf4 unity_SHBb at 56
  VectorHalf4 unity_SHC at 64
  Vector4 _MainTex_ST at 272
  Vector4 _DetailAlbedoMap_ST at 288
  ScalarHalf _UVSec at 304
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    half4 unity_SHAr;
    half4 unity_SHAg;
    half4 unity_SHAb;
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    float4 _DetailAlbedoMap_ST;
    half _UVSec;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    half3 NORMAL0 [[ attribute(1) ]] ;
    float2 TEXCOORD0 [[ attribute(2) ]] ;
    float2 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    half4 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float2 TEXCOORD6 [[ user(TEXCOORD6) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool u_xlatb0;
    float4 u_xlat1;
    half4 u_xlat16_1;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    float u_xlat13;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0] * input.POSITION0.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2] * input.POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    output.mtl_Position = Globals.hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlatb0 = Globals._UVSec==half(0.0);
    u_xlat0.xy = (bool(u_xlatb0)) ? input.TEXCOORD0.xy : input.TEXCOORD1.xy;
    output.TEXCOORD0.zw = u_xlat0.xy * Globals._DetailAlbedoMap_ST.xy + Globals._DetailAlbedoMap_ST.zw;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy * Globals._MainTex_ST.xy + Globals._MainTex_ST.zw;
    u_xlat0.xyz = input.POSITION0.yyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * input.POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * input.POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyw = Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * input.POSITION0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyw + (-Globals._WorldSpaceCameraPos.xyzx.xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = rsqrt(u_xlat13);
    u_xlat1.xyz = float3(u_xlat13) * u_xlat1.xyz;
    output.TEXCOORD1.xyz = half3(u_xlat1.xyz);
    output.TEXCOORD2.w = half(u_xlat0.x);
    output.TEXCOORD2.xyz = half3(0.0, 0.0, 0.0);
    output.TEXCOORD3.w = half(u_xlat0.y);
    output.TEXCOORD3.xyz = half3(0.0, 0.0, 0.0);
    u_xlat1.x = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = rsqrt(u_xlat13);
    u_xlat1 = float4(u_xlat13) * u_xlat1.xyzz;
    u_xlat0.xyz = u_xlat1.xyw;
    output.TEXCOORD4 = half4(u_xlat0);
    u_xlat16_2.x = half(u_xlat0.y * u_xlat0.y);
    u_xlat16_2.x = half(u_xlat0.x * u_xlat0.x + (-float(u_xlat16_2.x)));
    u_xlat16_1 = half4(u_xlat1.ywzx * u_xlat1);
    u_xlat16_3.x = dot(Globals.unity_SHBr, u_xlat16_1);
    u_xlat16_3.y = dot(Globals.unity_SHBg, u_xlat16_1);
    u_xlat16_3.z = dot(Globals.unity_SHBb, u_xlat16_1);
    u_xlat16_2.xyz = Globals.unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;
    u_xlat0.w = 1.0;
    u_xlat16_3.x = half(dot(float4(Globals.unity_SHAr), u_xlat0));
    u_xlat16_3.y = half(dot(float4(Globals.unity_SHAg), u_xlat0));
    u_xlat16_3.z = half(dot(float4(Globals.unity_SHAb), u_xlat0));
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, half3(0.0, 0.0, 0.0));
    u_xlat0.xyz = log2(float3(u_xlat16_2.xyz));
    u_xlat0.xyz = u_xlat0.xyz * float3(0.416666657, 0.416666657, 0.416666657);
    u_xlat0.xyz = exp2(u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xyz * float3(1.05499995, 1.05499995, 1.05499995) + float3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat0.xyz = max(u_xlat0.xyz, float3(0.0, 0.0, 0.0));
    output.TEXCOORD5.xyz = half3(u_xlat0.xyz);
    output.TEXCOORD5.w = half(0.0);
    output.TEXCOORD6.xy = float2(0.0, 0.0);
    return output;
}


-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0 sampler slot 2
Set 2D Texture "_OcclusionMap" to slot 1 sampler slot 3
Set 2D Texture "unity_NHxRoughness" to slot 2 sampler slot 1
Set CUBE Texture "unity_SpecCube0" to slot 3 sampler slot 0

Constant Buffer "Globals" (36 bytes) on slot 0 {
  VectorHalf4 _WorldSpaceLightPos0 at 0
  VectorHalf4 unity_SpecCube0_HDR at 8
  VectorHalf4 _LightColor0 at 16
  VectorHalf4 _Color at 24
  ScalarHalf _Metallic at 32
  ScalarHalf _Glossiness at 34
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    half4 _WorldSpaceLightPos0;
    half4 unity_SpecCube0_HDR;
    half4 _LightColor0;
    half4 _Color;
    half _Metallic;
    half _Glossiness;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    half4 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(0) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    sampler samplerunity_SpecCube0 [[ sampler (0) ]],
    sampler samplerunity_NHxRoughness [[ sampler (1) ]],
    sampler sampler_MainTex [[ sampler (2) ]],
    sampler sampler_OcclusionMap [[ sampler (3) ]],
    texture2d<half, access::sample > _MainTex [[ texture (0) ]] ,
    texture2d<half, access::sample > _OcclusionMap [[ texture (1) ]] ,
    texture2d<half, access::sample > unity_NHxRoughness [[ texture (2) ]] ,
    texturecube<half, access::sample > unity_SpecCube0 [[ texture (3) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half4 u_xlat16_0;
    half3 u_xlat16_1;
    half4 u_xlat16_2;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    half3 u_xlat16_6;
    half3 u_xlat16_7;
    half3 u_xlat16_8;
    half u_xlat16_28;
    u_xlat16_0.xw = (-half2(Globals._Glossiness)) + half2(1.0, 1.0);
    u_xlat16_1.x = (-u_xlat16_0.x) * half(0.699999988) + half(1.70000005);
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_1.x;
    u_xlat16_0.x = u_xlat16_0.x * half(6.0);
    u_xlat16_1.x = dot(input.TEXCOORD4.xyz, input.TEXCOORD4.xyz);
    u_xlat16_1.x = rsqrt(u_xlat16_1.x);
    u_xlat16_1.xyz = u_xlat16_1.xxx * input.TEXCOORD4.xyz;
    u_xlat16_28 = dot(input.TEXCOORD1.xyz, u_xlat16_1.xyz);
    u_xlat16_28 = u_xlat16_28 + u_xlat16_28;
    u_xlat16_2.xyz = u_xlat16_1.xyz * (-half3(u_xlat16_28)) + input.TEXCOORD1.xyz;
    u_xlat16_2 = unity_SpecCube0.sample(samplerunity_SpecCube0, float3(u_xlat16_2.xyz), level(float(u_xlat16_0.x)));
    u_xlat16_0.x = u_xlat16_2.w + half(-1.0);
    u_xlat16_0.x = Globals.unity_SpecCube0_HDR.w * u_xlat16_0.x + half(1.0);
    u_xlat16_0.x = u_xlat16_0.x * Globals.unity_SpecCube0_HDR.x;
    u_xlat16_3.xyz = u_xlat16_2.xyz * u_xlat16_0.xxx;
    u_xlat16_4.x = _OcclusionMap.sample(sampler_OcclusionMap, input.TEXCOORD0.xy).y;
    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_4.xxx;
    u_xlat16_5.xyz = u_xlat16_4.xxx * input.TEXCOORD5.xyz;
    u_xlat16_0.x = dot((-input.TEXCOORD1.xyz), u_xlat16_1.xyz);
    u_xlat16_28 = u_xlat16_0.x + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x;
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0h, 1.0h);
    u_xlat16_6.y = (-u_xlat16_0.x) + half(1.0);
    u_xlat16_7.xyz = u_xlat16_1.xyz * (-half3(u_xlat16_28)) + (-input.TEXCOORD1.xyz);
    u_xlat16_0.x = dot(u_xlat16_1.xyz, Globals._WorldSpaceLightPos0.xyz);
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0h, 1.0h);
    u_xlat16_1.xyz = u_xlat16_0.xxx * Globals._LightColor0.xyz;
    u_xlat16_6.x = dot(u_xlat16_7.xyz, Globals._WorldSpaceLightPos0.xyz);
    u_xlat16_6.xy = u_xlat16_6.xy * u_xlat16_6.xy;
    u_xlat16_0.yz = u_xlat16_6.xy * u_xlat16_6.xy;
    u_xlat16_0.x = (-Globals._Metallic) * half(0.779083729) + half(0.779083729);
    u_xlat16_28 = (-u_xlat16_0.x) + Globals._Glossiness;
    u_xlat16_28 = u_xlat16_28 + half(1.0);
    u_xlat16_28 = clamp(u_xlat16_28, 0.0h, 1.0h);
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_6.xyz = Globals._Color.xyz * u_xlat16_4.xyz + half3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat16_4.xyz = u_xlat16_4.xyz * Globals._Color.xyz;
    u_xlat16_7.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz;
    u_xlat16_6.xyz = half3(Globals._Metallic) * u_xlat16_6.xyz + half3(0.220916301, 0.220916301, 0.220916301);
    u_xlat16_8.xyz = half3(u_xlat16_28) + (-u_xlat16_6.xyz);
    u_xlat16_8.xyz = u_xlat16_0.zzz * u_xlat16_8.xyz + u_xlat16_6.xyz;
    u_xlat16_4.x = unity_NHxRoughness.sample(samplerunity_NHxRoughness, float2(u_xlat16_0.yw)).w;
    u_xlat16_4.x = u_xlat16_4.x * half(16.0);
    u_xlat16_0.xyz = u_xlat16_4.xxx * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_8.xyz;
    u_xlat16_3.xyz = u_xlat16_5.xyz * u_xlat16_7.xyz + u_xlat16_3.xyz;
    output.SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz + u_xlat16_3.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}


-- Hardware tier variant: Tier 2
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"
Uses vertex data channel "TexCoord0"

Constant Buffer "Globals" (306 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 80
  Matrix4x4 unity_WorldToObject at 144
  Matrix4x4 unity_MatrixVP at 208
  Vector3 _WorldSpaceCameraPos at 0
  VectorHalf4 unity_SHAr at 16
  VectorHalf4 unity_SHAg at 24
  VectorHalf4 unity_SHAb at 32
  VectorHalf4 unity_SHBr at 40
  VectorHalf4 unity_SHBg at 48
  VectorHalf4 unity_SHBb at 56
  VectorHalf4 unity_SHC at 64
  Vector4 _MainTex_ST at 272
  Vector4 _DetailAlbedoMap_ST at 288
  ScalarHalf _UVSec at 304
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    half4 unity_SHAr;
    half4 unity_SHAg;
    half4 unity_SHAb;
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    float4 _DetailAlbedoMap_ST;
    half _UVSec;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    half3 NORMAL0 [[ attribute(1) ]] ;
    float2 TEXCOORD0 [[ attribute(2) ]] ;
    float2 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    half4 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float2 TEXCOORD6 [[ user(TEXCOORD6) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool u_xlatb0;
    float4 u_xlat1;
    half4 u_xlat16_1;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    float u_xlat13;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0] * input.POSITION0.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2] * input.POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    output.mtl_Position = Globals.hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlatb0 = Globals._UVSec==half(0.0);
    u_xlat0.xy = (bool(u_xlatb0)) ? input.TEXCOORD0.xy : input.TEXCOORD1.xy;
    output.TEXCOORD0.zw = u_xlat0.xy * Globals._DetailAlbedoMap_ST.xy + Globals._DetailAlbedoMap_ST.zw;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy * Globals._MainTex_ST.xy + Globals._MainTex_ST.zw;
    u_xlat0.xyz = input.POSITION0.yyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * input.POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * input.POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyw = Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * input.POSITION0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyw + (-Globals._WorldSpaceCameraPos.xyzx.xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = rsqrt(u_xlat13);
    u_xlat1.xyz = float3(u_xlat13) * u_xlat1.xyz;
    output.TEXCOORD1.xyz = half3(u_xlat1.xyz);
    output.TEXCOORD2.w = half(u_xlat0.x);
    output.TEXCOORD2.xyz = half3(0.0, 0.0, 0.0);
    output.TEXCOORD3.w = half(u_xlat0.y);
    output.TEXCOORD3.xyz = half3(0.0, 0.0, 0.0);
    u_xlat1.x = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = rsqrt(u_xlat13);
    u_xlat1 = float4(u_xlat13) * u_xlat1.xyzz;
    u_xlat0.xyz = u_xlat1.xyw;
    output.TEXCOORD4 = half4(u_xlat0);
    u_xlat16_2.x = half(u_xlat0.y * u_xlat0.y);
    u_xlat16_2.x = half(u_xlat0.x * u_xlat0.x + (-float(u_xlat16_2.x)));
    u_xlat16_1 = half4(u_xlat1.ywzx * u_xlat1);
    u_xlat16_3.x = dot(Globals.unity_SHBr, u_xlat16_1);
    u_xlat16_3.y = dot(Globals.unity_SHBg, u_xlat16_1);
    u_xlat16_3.z = dot(Globals.unity_SHBb, u_xlat16_1);
    u_xlat16_2.xyz = Globals.unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;
    u_xlat0.w = 1.0;
    u_xlat16_3.x = half(dot(float4(Globals.unity_SHAr), u_xlat0));
    u_xlat16_3.y = half(dot(float4(Globals.unity_SHAg), u_xlat0));
    u_xlat16_3.z = half(dot(float4(Globals.unity_SHAb), u_xlat0));
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, half3(0.0, 0.0, 0.0));
    u_xlat0.xyz = log2(float3(u_xlat16_2.xyz));
    u_xlat0.xyz = u_xlat0.xyz * float3(0.416666657, 0.416666657, 0.416666657);
    u_xlat0.xyz = exp2(u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xyz * float3(1.05499995, 1.05499995, 1.05499995) + float3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat0.xyz = max(u_xlat0.xyz, float3(0.0, 0.0, 0.0));
    output.TEXCOORD5.xyz = half3(u_xlat0.xyz);
    output.TEXCOORD5.w = half(0.0);
    output.TEXCOORD6.xy = float2(0.0, 0.0);
    return output;
}


-- Hardware tier variant: Tier 2
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0 sampler slot 2
Set 2D Texture "_OcclusionMap" to slot 1 sampler slot 3
Set 2D Texture "unity_NHxRoughness" to slot 2 sampler slot 1
Set CUBE Texture "unity_SpecCube0" to slot 3 sampler slot 0

Constant Buffer "Globals" (36 bytes) on slot 0 {
  VectorHalf4 _WorldSpaceLightPos0 at 0
  VectorHalf4 unity_SpecCube0_HDR at 8
  VectorHalf4 _LightColor0 at 16
  VectorHalf4 _Color at 24
  ScalarHalf _Metallic at 32
  ScalarHalf _Glossiness at 34
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    half4 _WorldSpaceLightPos0;
    half4 unity_SpecCube0_HDR;
    half4 _LightColor0;
    half4 _Color;
    half _Metallic;
    half _Glossiness;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    half4 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(0) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    sampler samplerunity_SpecCube0 [[ sampler (0) ]],
    sampler samplerunity_NHxRoughness [[ sampler (1) ]],
    sampler sampler_MainTex [[ sampler (2) ]],
    sampler sampler_OcclusionMap [[ sampler (3) ]],
    texture2d<half, access::sample > _MainTex [[ texture (0) ]] ,
    texture2d<half, access::sample > _OcclusionMap [[ texture (1) ]] ,
    texture2d<half, access::sample > unity_NHxRoughness [[ texture (2) ]] ,
    texturecube<half, access::sample > unity_SpecCube0 [[ texture (3) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half4 u_xlat16_0;
    half3 u_xlat16_1;
    half4 u_xlat16_2;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    half3 u_xlat16_6;
    half3 u_xlat16_7;
    half3 u_xlat16_8;
    half u_xlat16_28;
    u_xlat16_0.xw = (-half2(Globals._Glossiness)) + half2(1.0, 1.0);
    u_xlat16_1.x = (-u_xlat16_0.x) * half(0.699999988) + half(1.70000005);
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_1.x;
    u_xlat16_0.x = u_xlat16_0.x * half(6.0);
    u_xlat16_1.x = dot(input.TEXCOORD4.xyz, input.TEXCOORD4.xyz);
    u_xlat16_1.x = rsqrt(u_xlat16_1.x);
    u_xlat16_1.xyz = u_xlat16_1.xxx * input.TEXCOORD4.xyz;
    u_xlat16_28 = dot(input.TEXCOORD1.xyz, u_xlat16_1.xyz);
    u_xlat16_28 = u_xlat16_28 + u_xlat16_28;
    u_xlat16_2.xyz = u_xlat16_1.xyz * (-half3(u_xlat16_28)) + input.TEXCOORD1.xyz;
    u_xlat16_2 = unity_SpecCube0.sample(samplerunity_SpecCube0, float3(u_xlat16_2.xyz), level(float(u_xlat16_0.x)));
    u_xlat16_0.x = u_xlat16_2.w + half(-1.0);
    u_xlat16_0.x = Globals.unity_SpecCube0_HDR.w * u_xlat16_0.x + half(1.0);
    u_xlat16_0.x = u_xlat16_0.x * Globals.unity_SpecCube0_HDR.x;
    u_xlat16_3.xyz = u_xlat16_2.xyz * u_xlat16_0.xxx;
    u_xlat16_4.x = _OcclusionMap.sample(sampler_OcclusionMap, input.TEXCOORD0.xy).y;
    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_4.xxx;
    u_xlat16_5.xyz = u_xlat16_4.xxx * input.TEXCOORD5.xyz;
    u_xlat16_0.x = dot((-input.TEXCOORD1.xyz), u_xlat16_1.xyz);
    u_xlat16_28 = u_xlat16_0.x + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x;
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0h, 1.0h);
    u_xlat16_6.y = (-u_xlat16_0.x) + half(1.0);
    u_xlat16_7.xyz = u_xlat16_1.xyz * (-half3(u_xlat16_28)) + (-input.TEXCOORD1.xyz);
    u_xlat16_0.x = dot(u_xlat16_1.xyz, Globals._WorldSpaceLightPos0.xyz);
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0h, 1.0h);
    u_xlat16_1.xyz = u_xlat16_0.xxx * Globals._LightColor0.xyz;
    u_xlat16_6.x = dot(u_xlat16_7.xyz, Globals._WorldSpaceLightPos0.xyz);
    u_xlat16_6.xy = u_xlat16_6.xy * u_xlat16_6.xy;
    u_xlat16_0.yz = u_xlat16_6.xy * u_xlat16_6.xy;
    u_xlat16_0.x = (-Globals._Metallic) * half(0.779083729) + half(0.779083729);
    u_xlat16_28 = (-u_xlat16_0.x) + Globals._Glossiness;
    u_xlat16_28 = u_xlat16_28 + half(1.0);
    u_xlat16_28 = clamp(u_xlat16_28, 0.0h, 1.0h);
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_6.xyz = Globals._Color.xyz * u_xlat16_4.xyz + half3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat16_4.xyz = u_xlat16_4.xyz * Globals._Color.xyz;
    u_xlat16_7.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz;
    u_xlat16_6.xyz = half3(Globals._Metallic) * u_xlat16_6.xyz + half3(0.220916301, 0.220916301, 0.220916301);
    u_xlat16_8.xyz = half3(u_xlat16_28) + (-u_xlat16_6.xyz);
    u_xlat16_8.xyz = u_xlat16_0.zzz * u_xlat16_8.xyz + u_xlat16_6.xyz;
    u_xlat16_4.x = unity_NHxRoughness.sample(samplerunity_NHxRoughness, float2(u_xlat16_0.yw)).w;
    u_xlat16_4.x = u_xlat16_4.x * half(16.0);
    u_xlat16_0.xyz = u_xlat16_4.xxx * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_8.xyz;
    u_xlat16_3.xyz = u_xlat16_5.xyz * u_xlat16_7.xyz + u_xlat16_3.xyz;
    output.SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz + u_xlat16_3.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}


-- Hardware tier variant: Tier 3
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"
Uses vertex data channel "TexCoord0"

Constant Buffer "Globals" (306 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 80
  Matrix4x4 unity_WorldToObject at 144
  Matrix4x4 unity_MatrixVP at 208
  Vector3 _WorldSpaceCameraPos at 0
  VectorHalf4 unity_SHAr at 16
  VectorHalf4 unity_SHAg at 24
  VectorHalf4 unity_SHAb at 32
  VectorHalf4 unity_SHBr at 40
  VectorHalf4 unity_SHBg at 48
  VectorHalf4 unity_SHBb at 56
  VectorHalf4 unity_SHC at 64
  Vector4 _MainTex_ST at 272
  Vector4 _DetailAlbedoMap_ST at 288
  ScalarHalf _UVSec at 304
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    half4 unity_SHAr;
    half4 unity_SHAg;
    half4 unity_SHAb;
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    float4 _DetailAlbedoMap_ST;
    half _UVSec;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    half3 NORMAL0 [[ attribute(1) ]] ;
    float2 TEXCOORD0 [[ attribute(2) ]] ;
    float2 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    half4 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float2 TEXCOORD6 [[ user(TEXCOORD6) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool u_xlatb0;
    float4 u_xlat1;
    half4 u_xlat16_1;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    float u_xlat13;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0] * input.POSITION0.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2] * input.POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    output.mtl_Position = Globals.hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlatb0 = Globals._UVSec==half(0.0);
    u_xlat0.xy = (bool(u_xlatb0)) ? input.TEXCOORD0.xy : input.TEXCOORD1.xy;
    output.TEXCOORD0.zw = u_xlat0.xy * Globals._DetailAlbedoMap_ST.xy + Globals._DetailAlbedoMap_ST.zw;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy * Globals._MainTex_ST.xy + Globals._MainTex_ST.zw;
    u_xlat0.xyz = input.POSITION0.yyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * input.POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * input.POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyw = Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * input.POSITION0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyw + (-Globals._WorldSpaceCameraPos.xyzx.xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = rsqrt(u_xlat13);
    u_xlat1.xyz = float3(u_xlat13) * u_xlat1.xyz;
    output.TEXCOORD1.xyz = half3(u_xlat1.xyz);
    output.TEXCOORD2.w = half(u_xlat0.x);
    output.TEXCOORD2.xyz = half3(0.0, 0.0, 0.0);
    output.TEXCOORD3.w = half(u_xlat0.y);
    output.TEXCOORD3.xyz = half3(0.0, 0.0, 0.0);
    u_xlat1.x = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = rsqrt(u_xlat13);
    u_xlat1 = float4(u_xlat13) * u_xlat1.xyzz;
    u_xlat0.xyz = u_xlat1.xyw;
    output.TEXCOORD4 = half4(u_xlat0);
    u_xlat16_2.x = half(u_xlat0.y * u_xlat0.y);
    u_xlat16_2.x = half(u_xlat0.x * u_xlat0.x + (-float(u_xlat16_2.x)));
    u_xlat16_1 = half4(u_xlat1.ywzx * u_xlat1);
    u_xlat16_3.x = dot(Globals.unity_SHBr, u_xlat16_1);
    u_xlat16_3.y = dot(Globals.unity_SHBg, u_xlat16_1);
    u_xlat16_3.z = dot(Globals.unity_SHBb, u_xlat16_1);
    u_xlat16_2.xyz = Globals.unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;
    u_xlat0.w = 1.0;
    u_xlat16_3.x = half(dot(float4(Globals.unity_SHAr), u_xlat0));
    u_xlat16_3.y = half(dot(float4(Globals.unity_SHAg), u_xlat0));
    u_xlat16_3.z = half(dot(float4(Globals.unity_SHAb), u_xlat0));
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, half3(0.0, 0.0, 0.0));
    u_xlat0.xyz = log2(float3(u_xlat16_2.xyz));
    u_xlat0.xyz = u_xlat0.xyz * float3(0.416666657, 0.416666657, 0.416666657);
    u_xlat0.xyz = exp2(u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xyz * float3(1.05499995, 1.05499995, 1.05499995) + float3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat0.xyz = max(u_xlat0.xyz, float3(0.0, 0.0, 0.0));
    output.TEXCOORD5.xyz = half3(u_xlat0.xyz);
    output.TEXCOORD5.w = half(0.0);
    output.TEXCOORD6.xy = float2(0.0, 0.0);
    return output;
}


-- Hardware tier variant: Tier 3
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0 sampler slot 2
Set 2D Texture "_OcclusionMap" to slot 1 sampler slot 3
Set 2D Texture "unity_NHxRoughness" to slot 2 sampler slot 1
Set CUBE Texture "unity_SpecCube0" to slot 3 sampler slot 0

Constant Buffer "Globals" (36 bytes) on slot 0 {
  VectorHalf4 _WorldSpaceLightPos0 at 0
  VectorHalf4 unity_SpecCube0_HDR at 8
  VectorHalf4 _LightColor0 at 16
  VectorHalf4 _Color at 24
  ScalarHalf _Metallic at 32
  ScalarHalf _Glossiness at 34
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    half4 _WorldSpaceLightPos0;
    half4 unity_SpecCube0_HDR;
    half4 _LightColor0;
    half4 _Color;
    half _Metallic;
    half _Glossiness;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    half4 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(0) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    sampler samplerunity_SpecCube0 [[ sampler (0) ]],
    sampler samplerunity_NHxRoughness [[ sampler (1) ]],
    sampler sampler_MainTex [[ sampler (2) ]],
    sampler sampler_OcclusionMap [[ sampler (3) ]],
    texture2d<half, access::sample > _MainTex [[ texture (0) ]] ,
    texture2d<half, access::sample > _OcclusionMap [[ texture (1) ]] ,
    texture2d<half, access::sample > unity_NHxRoughness [[ texture (2) ]] ,
    texturecube<half, access::sample > unity_SpecCube0 [[ texture (3) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half4 u_xlat16_0;
    half3 u_xlat16_1;
    half4 u_xlat16_2;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    half3 u_xlat16_6;
    half3 u_xlat16_7;
    half3 u_xlat16_8;
    half u_xlat16_28;
    u_xlat16_0.xw = (-half2(Globals._Glossiness)) + half2(1.0, 1.0);
    u_xlat16_1.x = (-u_xlat16_0.x) * half(0.699999988) + half(1.70000005);
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_1.x;
    u_xlat16_0.x = u_xlat16_0.x * half(6.0);
    u_xlat16_1.x = dot(input.TEXCOORD4.xyz, input.TEXCOORD4.xyz);
    u_xlat16_1.x = rsqrt(u_xlat16_1.x);
    u_xlat16_1.xyz = u_xlat16_1.xxx * input.TEXCOORD4.xyz;
    u_xlat16_28 = dot(input.TEXCOORD1.xyz, u_xlat16_1.xyz);
    u_xlat16_28 = u_xlat16_28 + u_xlat16_28;
    u_xlat16_2.xyz = u_xlat16_1.xyz * (-half3(u_xlat16_28)) + input.TEXCOORD1.xyz;
    u_xlat16_2 = unity_SpecCube0.sample(samplerunity_SpecCube0, float3(u_xlat16_2.xyz), level(float(u_xlat16_0.x)));
    u_xlat16_0.x = u_xlat16_2.w + half(-1.0);
    u_xlat16_0.x = Globals.unity_SpecCube0_HDR.w * u_xlat16_0.x + half(1.0);
    u_xlat16_0.x = u_xlat16_0.x * Globals.unity_SpecCube0_HDR.x;
    u_xlat16_3.xyz = u_xlat16_2.xyz * u_xlat16_0.xxx;
    u_xlat16_4.x = _OcclusionMap.sample(sampler_OcclusionMap, input.TEXCOORD0.xy).y;
    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_4.xxx;
    u_xlat16_5.xyz = u_xlat16_4.xxx * input.TEXCOORD5.xyz;
    u_xlat16_0.x = dot((-input.TEXCOORD1.xyz), u_xlat16_1.xyz);
    u_xlat16_28 = u_xlat16_0.x + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x;
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0h, 1.0h);
    u_xlat16_6.y = (-u_xlat16_0.x) + half(1.0);
    u_xlat16_7.xyz = u_xlat16_1.xyz * (-half3(u_xlat16_28)) + (-input.TEXCOORD1.xyz);
    u_xlat16_0.x = dot(u_xlat16_1.xyz, Globals._WorldSpaceLightPos0.xyz);
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0h, 1.0h);
    u_xlat16_1.xyz = u_xlat16_0.xxx * Globals._LightColor0.xyz;
    u_xlat16_6.x = dot(u_xlat16_7.xyz, Globals._WorldSpaceLightPos0.xyz);
    u_xlat16_6.xy = u_xlat16_6.xy * u_xlat16_6.xy;
    u_xlat16_0.yz = u_xlat16_6.xy * u_xlat16_6.xy;
    u_xlat16_0.x = (-Globals._Metallic) * half(0.779083729) + half(0.779083729);
    u_xlat16_28 = (-u_xlat16_0.x) + Globals._Glossiness;
    u_xlat16_28 = u_xlat16_28 + half(1.0);
    u_xlat16_28 = clamp(u_xlat16_28, 0.0h, 1.0h);
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_6.xyz = Globals._Color.xyz * u_xlat16_4.xyz + half3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat16_4.xyz = u_xlat16_4.xyz * Globals._Color.xyz;
    u_xlat16_7.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz;
    u_xlat16_6.xyz = half3(Globals._Metallic) * u_xlat16_6.xyz + half3(0.220916301, 0.220916301, 0.220916301);
    u_xlat16_8.xyz = half3(u_xlat16_28) + (-u_xlat16_6.xyz);
    u_xlat16_8.xyz = u_xlat16_0.zzz * u_xlat16_8.xyz + u_xlat16_6.xyz;
    u_xlat16_4.x = unity_NHxRoughness.sample(samplerunity_NHxRoughness, float2(u_xlat16_0.yw)).w;
    u_xlat16_4.x = u_xlat16_4.x * half(16.0);
    u_xlat16_0.xyz = u_xlat16_4.xxx * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_8.xyz;
    u_xlat16_3.xyz = u_xlat16_5.xyz * u_xlat16_7.xyz + u_xlat16_3.xyz;
    output.SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz + u_xlat16_3.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}


//////////////////////////////////////////////////////
Keywords set in this variant: DIRECTIONAL SHADOWS_SCREEN _EMISSION 
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"
Uses vertex data channel "TexCoord0"

Constant Buffer "Globals" (274 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 48
  Matrix4x4 unity_WorldToObject at 112
  Matrix4x4 unity_MatrixVP at 176
  Vector3 _WorldSpaceCameraPos at 0
  VectorHalf4 unity_SHBr at 16
  VectorHalf4 unity_SHBg at 24
  VectorHalf4 unity_SHBb at 32
  VectorHalf4 unity_SHC at 40
  Vector4 _MainTex_ST at 240
  Vector4 _DetailAlbedoMap_ST at 256
  ScalarHalf _UVSec at 272
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    float4 _DetailAlbedoMap_ST;
    half _UVSec;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    half3 NORMAL0 [[ attribute(1) ]] ;
    float2 TEXCOORD0 [[ attribute(2) ]] ;
    float2 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    half4 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float2 TEXCOORD6 [[ user(TEXCOORD6) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    half4 u_xlat16_0;
    bool u_xlatb0;
    float4 u_xlat1;
    half u_xlat16_2;
    half3 u_xlat16_3;
    float u_xlat13;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0] * input.POSITION0.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2] * input.POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    output.mtl_Position = Globals.hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlatb0 = Globals._UVSec==half(0.0);
    u_xlat0.xy = (bool(u_xlatb0)) ? input.TEXCOORD0.xy : input.TEXCOORD1.xy;
    output.TEXCOORD0.zw = u_xlat0.xy * Globals._DetailAlbedoMap_ST.xy + Globals._DetailAlbedoMap_ST.zw;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy * Globals._MainTex_ST.xy + Globals._MainTex_ST.zw;
    u_xlat0.xyz = input.POSITION0.yyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * input.POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * input.POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyw = Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * input.POSITION0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyw + (-Globals._WorldSpaceCameraPos.xyzx.xyz);
    output.TEXCOORD1.xyz = half3(u_xlat1.xyz);
    output.TEXCOORD2.w = half(u_xlat0.x);
    output.TEXCOORD2.xyz = half3(0.0, 0.0, 0.0);
    output.TEXCOORD3.w = half(u_xlat0.y);
    output.TEXCOORD3.xyz = half3(0.0, 0.0, 0.0);
    u_xlat1.x = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = rsqrt(u_xlat13);
    u_xlat0.xyz = float3(u_xlat13) * u_xlat1.xyz;
    output.TEXCOORD4 = half4(u_xlat0);
    u_xlat16_2 = half(u_xlat0.y * u_xlat0.y);
    u_xlat16_2 = half(u_xlat0.x * u_xlat0.x + (-float(u_xlat16_2)));
    u_xlat16_0 = half4(u_xlat0.yzzx * u_xlat0.xyzz);
    u_xlat16_3.x = dot(Globals.unity_SHBr, u_xlat16_0);
    u_xlat16_3.y = dot(Globals.unity_SHBg, u_xlat16_0);
    u_xlat16_3.z = dot(Globals.unity_SHBb, u_xlat16_0);
    output.TEXCOORD5.xyz = Globals.unity_SHC.xyz * half3(u_xlat16_2) + u_xlat16_3.xyz;
    output.TEXCOORD5.w = half(0.0);
    output.TEXCOORD6.xy = float2(0.0, 0.0);
    return output;
}


-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0 sampler slot 2
Set 2D Texture "_OcclusionMap" to slot 1 sampler slot 3
Set 2D Texture "unity_NHxRoughness" to slot 2 sampler slot 1
Set 2D Texture "_EmissionMap" to slot 3 sampler slot 4
Set CUBE Texture "unity_SpecCube0" to slot 4 sampler slot 0
Set 2D Texture "_ShadowMapTexture" to slot 5

Constant Buffer "Globals" (440 bytes) on slot 0 {
  Matrix4x4 unity_WorldToShadow[4] at 48
  Matrix4x4 unity_MatrixV at 336
  Vector3 _WorldSpaceCameraPos at 0
  VectorHalf4 _WorldSpaceLightPos0 at 16
  VectorHalf4 unity_SHAr at 24
  VectorHalf4 unity_SHAg at 32
  VectorHalf4 unity_SHAb at 40
  VectorHalf4 _LightShadowData at 304
  Vector4 unity_ShadowFadeCenterAndType at 320
  VectorHalf4 unity_SpecCube0_HDR at 400
  VectorHalf4 _LightColor0 at 408
  VectorHalf4 _Color at 416
  ScalarHalf _Metallic at 424
  ScalarHalf _Glossiness at 426
  ScalarHalf _OcclusionStrength at 428
  VectorHalf4 _EmissionColor at 432
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    half4 _WorldSpaceLightPos0;
    half4 unity_SHAr;
    half4 unity_SHAg;
    half4 unity_SHAb;
    float4 hlslcc_mtx4x4unity_WorldToShadow[16];
    half4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    half4 unity_SpecCube0_HDR;
    half4 _LightColor0;
    half4 _Color;
    half _Metallic;
    half _Glossiness;
    half _OcclusionStrength;
    half4 _EmissionColor;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    half4 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(0) ]];
};

constexpr sampler _mtl_xl_shadow_sampler(address::clamp_to_edge, filter::linear, compare_func::greater_equal);
fragment Mtl_FragmentOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    sampler samplerunity_SpecCube0 [[ sampler (0) ]],
    sampler samplerunity_NHxRoughness [[ sampler (1) ]],
    sampler sampler_MainTex [[ sampler (2) ]],
    sampler sampler_OcclusionMap [[ sampler (3) ]],
    sampler sampler_EmissionMap [[ sampler (4) ]],
    sampler sampler_ShadowMapTexture [[ sampler (5) ]],
    texture2d<half, access::sample > _MainTex [[ texture (0) ]] ,
    texture2d<half, access::sample > _OcclusionMap [[ texture (1) ]] ,
    texture2d<half, access::sample > unity_NHxRoughness [[ texture (2) ]] ,
    texture2d<half, access::sample > _EmissionMap [[ texture (3) ]] ,
    texturecube<half, access::sample > unity_SpecCube0 [[ texture (4) ]] ,
    depth2d<float, access::sample > _ShadowMapTexture [[ texture (5) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half4 u_xlat16_0;
    half3 u_xlat16_1;
    half4 u_xlat16_2;
    half4 u_xlat16_3;
    half4 u_xlat16_4;
    half3 u_xlat16_5;
    half3 u_xlat16_6;
    float3 u_xlat7;
    half3 u_xlat16_7;
    float3 u_xlat8;
    float3 u_xlat9;
    half3 u_xlat16_11;
    half u_xlat16_12;
    float3 u_xlat17;
    half u_xlat16_17;
    half u_xlat16_21;
    half u_xlat16_31;
    half u_xlat16_32;
    float u_xlat37;
    u_xlat16_0.x = _OcclusionMap.sample(sampler_OcclusionMap, input.TEXCOORD0.xy).y;
    u_xlat16_1.x = (-Globals._OcclusionStrength) + half(1.0);
    u_xlat16_1.x = u_xlat16_0.x * Globals._OcclusionStrength + u_xlat16_1.x;
    u_xlat16_0.xw = (-half2(Globals._Glossiness)) + half2(1.0, 1.0);
    u_xlat16_11.x = (-u_xlat16_0.x) * half(0.699999988) + half(1.70000005);
    u_xlat16_11.x = u_xlat16_0.x * u_xlat16_11.x;
    u_xlat16_11.x = u_xlat16_11.x * half(6.0);
    u_xlat16_21 = dot(input.TEXCOORD1.xyz, input.TEXCOORD1.xyz);
    u_xlat16_21 = rsqrt(u_xlat16_21);
    u_xlat16_2.xyz = half3(u_xlat16_21) * input.TEXCOORD1.xyz;
    u_xlat16_21 = dot(input.TEXCOORD4.xyz, input.TEXCOORD4.xyz);
    u_xlat16_21 = rsqrt(u_xlat16_21);
    u_xlat16_3.xyz = half3(u_xlat16_21) * input.TEXCOORD4.xyz;
    u_xlat16_21 = dot(u_xlat16_2.xyz, u_xlat16_3.xyz);
    u_xlat16_21 = u_xlat16_21 + u_xlat16_21;
    u_xlat16_4.xyz = u_xlat16_3.xyz * (-half3(u_xlat16_21)) + u_xlat16_2.xyz;
    u_xlat16_4 = unity_SpecCube0.sample(samplerunity_SpecCube0, float3(u_xlat16_4.xyz), level(float(u_xlat16_11.x)));
    u_xlat16_11.x = u_xlat16_4.w + half(-1.0);
    u_xlat16_11.x = Globals.unity_SpecCube0_HDR.w * u_xlat16_11.x + half(1.0);
    u_xlat16_11.x = u_xlat16_11.x * Globals.unity_SpecCube0_HDR.x;
    u_xlat16_11.xyz = u_xlat16_4.xyz * u_xlat16_11.xxx;
    u_xlat16_11.xyz = u_xlat16_1.xxx * u_xlat16_11.xyz;
    u_xlat16_32 = dot((-u_xlat16_2.xyz), u_xlat16_3.xyz);
    u_xlat16_5.x = u_xlat16_32 + u_xlat16_32;
    u_xlat16_32 = u_xlat16_32;
    u_xlat16_32 = clamp(u_xlat16_32, 0.0h, 1.0h);
    u_xlat16_6.y = (-u_xlat16_32) + half(1.0);
    u_xlat16_2.xyz = u_xlat16_3.xyz * (-u_xlat16_5.xxx) + (-u_xlat16_2.xyz);
    u_xlat16_6.x = dot(u_xlat16_2.xyz, Globals._WorldSpaceLightPos0.xyz);
    u_xlat16_2.xy = u_xlat16_6.xy * u_xlat16_6.xy;
    u_xlat16_0.yz = u_xlat16_2.xy * u_xlat16_2.xy;
    u_xlat16_2.x = (-Globals._Metallic) * half(0.779083729) + half(0.779083729);
    u_xlat16_12 = (-u_xlat16_2.x) + Globals._Glossiness;
    u_xlat16_12 = u_xlat16_12 + half(1.0);
    u_xlat16_12 = clamp(u_xlat16_12, 0.0h, 1.0h);
    u_xlat16_7.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_5.xyz = Globals._Color.xyz * u_xlat16_7.xyz + half3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat16_7.xyz = u_xlat16_7.xyz * Globals._Color.xyz;
    u_xlat16_2.xzw = u_xlat16_2.xxx * u_xlat16_7.xyz;
    u_xlat16_5.xyz = half3(Globals._Metallic) * u_xlat16_5.xyz + half3(0.220916301, 0.220916301, 0.220916301);
    u_xlat16_6.xyz = half3(u_xlat16_12) + (-u_xlat16_5.xyz);
    u_xlat16_6.xyz = u_xlat16_0.zzz * u_xlat16_6.xyz + u_xlat16_5.xyz;
    u_xlat16_7.x = unity_NHxRoughness.sample(samplerunity_NHxRoughness, float2(u_xlat16_0.yw)).w;
    u_xlat16_7.x = u_xlat16_7.x * half(16.0);
    u_xlat16_5.xyz = u_xlat16_7.xxx * u_xlat16_5.xyz + u_xlat16_2.xzw;
    u_xlat16_11.xyz = u_xlat16_11.xyz * u_xlat16_6.xyz;
    u_xlat16_3.w = half(1.0);
    u_xlat16_6.x = dot(Globals.unity_SHAr, u_xlat16_3);
    u_xlat16_6.y = dot(Globals.unity_SHAg, u_xlat16_3);
    u_xlat16_6.z = dot(Globals.unity_SHAb, u_xlat16_3);
    u_xlat16_12 = dot(u_xlat16_3.xyz, Globals._WorldSpaceLightPos0.xyz);
    u_xlat16_12 = clamp(u_xlat16_12, 0.0h, 1.0h);
    u_xlat16_3.xyz = u_xlat16_6.xyz + input.TEXCOORD5.xyz;
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_7.xyz = log2(u_xlat16_3.xyz);
    u_xlat16_7.xyz = u_xlat16_7.xyz * half3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_7.xyz = exp2(u_xlat16_7.xyz);
    u_xlat16_7.xyz = u_xlat16_7.xyz * half3(1.05499995, 1.05499995, 1.05499995) + half3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_7.xyz = max(u_xlat16_7.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_3.xyz = u_xlat16_1.xxx * u_xlat16_7.xyz;
    u_xlat16_1.xyz = u_xlat16_3.xyz * u_xlat16_2.xzw + u_xlat16_11.xyz;
    u_xlat7.x = Globals.hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat7.y = Globals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat7.z = Globals.hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat16_3.x = input.TEXCOORD2.w;
    u_xlat16_3.y = input.TEXCOORD3.w;
    u_xlat16_3.z = input.TEXCOORD4.w;
    u_xlat8.xyz = (-float3(u_xlat16_3.xyz)) + Globals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat9.xyz = float3(u_xlat16_3.xyz) + (-Globals.unity_ShadowFadeCenterAndType.xyz);
    u_xlat37 = dot(u_xlat9.xyz, u_xlat9.xyz);
    u_xlat37 = sqrt(u_xlat37);
    u_xlat7.x = dot(u_xlat8.xyz, u_xlat7.xyz);
    u_xlat17.x = (-u_xlat7.x) + u_xlat37;
    u_xlat7.x = Globals.unity_ShadowFadeCenterAndType.w * u_xlat17.x + u_xlat7.x;
    u_xlat7.x = u_xlat7.x * float(Globals._LightShadowData.z) + float(Globals._LightShadowData.w);
    u_xlat7.x = clamp(u_xlat7.x, 0.0f, 1.0f);
    u_xlat17.xyz = float3(input.TEXCOORD3.www) * Globals.hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
    u_xlat17.xyz = Globals.hlslcc_mtx4x4unity_WorldToShadow[0].xyz * float3(input.TEXCOORD2.www) + u_xlat17.xyz;
    u_xlat17.xyz = Globals.hlslcc_mtx4x4unity_WorldToShadow[2].xyz * float3(input.TEXCOORD4.www) + u_xlat17.xyz;
    u_xlat17.xyz = u_xlat17.xyz + Globals.hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
    u_xlat16_17 = _ShadowMapTexture.sample_compare(_mtl_xl_shadow_sampler, u_xlat17.xy, saturate(u_xlat17.z), level(0.0));
    u_xlat16_31 = (-Globals._LightShadowData.x) + half(1.0);
    u_xlat16_31 = u_xlat16_17 * u_xlat16_31 + Globals._LightShadowData.x;
    u_xlat16_31 = half(u_xlat7.x + float(u_xlat16_31));
    u_xlat16_31 = clamp(u_xlat16_31, 0.0h, 1.0h);
    u_xlat16_2.xzw = half3(u_xlat16_31) * Globals._LightColor0.xyz;
    u_xlat16_2.xyz = half3(u_xlat16_12) * u_xlat16_2.xzw;
    u_xlat16_1.xyz = u_xlat16_5.xyz * u_xlat16_2.xyz + u_xlat16_1.xyz;
    u_xlat16_7.xyz = _EmissionMap.sample(sampler_EmissionMap, input.TEXCOORD0.xy).xyz;
    output.SV_Target0.xyz = u_xlat16_7.xyz * Globals._EmissionColor.xyz + u_xlat16_1.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}


-- Hardware tier variant: Tier 2
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"
Uses vertex data channel "TexCoord0"

Constant Buffer "Globals" (274 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 48
  Matrix4x4 unity_WorldToObject at 112
  Matrix4x4 unity_MatrixVP at 176
  Vector3 _WorldSpaceCameraPos at 0
  VectorHalf4 unity_SHBr at 16
  VectorHalf4 unity_SHBg at 24
  VectorHalf4 unity_SHBb at 32
  VectorHalf4 unity_SHC at 40
  Vector4 _MainTex_ST at 240
  Vector4 _DetailAlbedoMap_ST at 256
  ScalarHalf _UVSec at 272
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    float4 _DetailAlbedoMap_ST;
    half _UVSec;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    half3 NORMAL0 [[ attribute(1) ]] ;
    float2 TEXCOORD0 [[ attribute(2) ]] ;
    float2 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    half4 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float2 TEXCOORD6 [[ user(TEXCOORD6) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    half4 u_xlat16_0;
    bool u_xlatb0;
    float4 u_xlat1;
    half u_xlat16_2;
    half3 u_xlat16_3;
    float u_xlat13;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0] * input.POSITION0.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2] * input.POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    output.mtl_Position = Globals.hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlatb0 = Globals._UVSec==half(0.0);
    u_xlat0.xy = (bool(u_xlatb0)) ? input.TEXCOORD0.xy : input.TEXCOORD1.xy;
    output.TEXCOORD0.zw = u_xlat0.xy * Globals._DetailAlbedoMap_ST.xy + Globals._DetailAlbedoMap_ST.zw;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy * Globals._MainTex_ST.xy + Globals._MainTex_ST.zw;
    u_xlat0.xyz = input.POSITION0.yyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * input.POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * input.POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyw = Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * input.POSITION0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyw + (-Globals._WorldSpaceCameraPos.xyzx.xyz);
    output.TEXCOORD1.xyz = half3(u_xlat1.xyz);
    output.TEXCOORD2.w = half(u_xlat0.x);
    output.TEXCOORD2.xyz = half3(0.0, 0.0, 0.0);
    output.TEXCOORD3.w = half(u_xlat0.y);
    output.TEXCOORD3.xyz = half3(0.0, 0.0, 0.0);
    u_xlat1.x = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = rsqrt(u_xlat13);
    u_xlat0.xyz = float3(u_xlat13) * u_xlat1.xyz;
    output.TEXCOORD4 = half4(u_xlat0);
    u_xlat16_2 = half(u_xlat0.y * u_xlat0.y);
    u_xlat16_2 = half(u_xlat0.x * u_xlat0.x + (-float(u_xlat16_2)));
    u_xlat16_0 = half4(u_xlat0.yzzx * u_xlat0.xyzz);
    u_xlat16_3.x = dot(Globals.unity_SHBr, u_xlat16_0);
    u_xlat16_3.y = dot(Globals.unity_SHBg, u_xlat16_0);
    u_xlat16_3.z = dot(Globals.unity_SHBb, u_xlat16_0);
    output.TEXCOORD5.xyz = Globals.unity_SHC.xyz * half3(u_xlat16_2) + u_xlat16_3.xyz;
    output.TEXCOORD5.w = half(0.0);
    output.TEXCOORD6.xy = float2(0.0, 0.0);
    return output;
}


-- Hardware tier variant: Tier 2
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0 sampler slot 1
Set 2D Texture "_OcclusionMap" to slot 1 sampler slot 2
Set 2D Texture "_EmissionMap" to slot 2 sampler slot 3
Set CUBE Texture "unity_SpecCube0" to slot 3 sampler slot 0
Set 2D Texture "_ShadowMapTexture" to slot 4

Constant Buffer "Globals" (440 bytes) on slot 0 {
  Matrix4x4 unity_WorldToShadow[4] at 48
  Matrix4x4 unity_MatrixV at 336
  Vector3 _WorldSpaceCameraPos at 0
  VectorHalf4 _WorldSpaceLightPos0 at 16
  VectorHalf4 unity_SHAr at 24
  VectorHalf4 unity_SHAg at 32
  VectorHalf4 unity_SHAb at 40
  VectorHalf4 _LightShadowData at 304
  Vector4 unity_ShadowFadeCenterAndType at 320
  VectorHalf4 unity_SpecCube0_HDR at 400
  VectorHalf4 _LightColor0 at 408
  VectorHalf4 _Color at 416
  ScalarHalf _Metallic at 424
  ScalarHalf _Glossiness at 426
  ScalarHalf _OcclusionStrength at 428
  VectorHalf4 _EmissionColor at 432
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    half4 _WorldSpaceLightPos0;
    half4 unity_SHAr;
    half4 unity_SHAg;
    half4 unity_SHAb;
    float4 hlslcc_mtx4x4unity_WorldToShadow[16];
    half4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    half4 unity_SpecCube0_HDR;
    half4 _LightColor0;
    half4 _Color;
    half _Metallic;
    half _Glossiness;
    half _OcclusionStrength;
    half4 _EmissionColor;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    half4 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(0) ]];
};

constexpr sampler _mtl_xl_shadow_sampler(address::clamp_to_edge, filter::linear, compare_func::greater_equal);
fragment Mtl_FragmentOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    sampler samplerunity_SpecCube0 [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_OcclusionMap [[ sampler (2) ]],
    sampler sampler_EmissionMap [[ sampler (3) ]],
    sampler sampler_ShadowMapTexture [[ sampler (4) ]],
    texture2d<half, access::sample > _MainTex [[ texture (0) ]] ,
    texture2d<half, access::sample > _OcclusionMap [[ texture (1) ]] ,
    texture2d<half, access::sample > _EmissionMap [[ texture (2) ]] ,
    texturecube<half, access::sample > unity_SpecCube0 [[ texture (3) ]] ,
    depth2d<float, access::sample > _ShadowMapTexture [[ texture (4) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half4 u_xlat16_0;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half4 u_xlat16_2;
    float3 u_xlat3;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    half3 u_xlat16_6;
    half3 u_xlat16_7;
    half3 u_xlat16_8;
    half3 u_xlat16_9;
    float3 u_xlat10;
    half u_xlat16_10;
    half3 u_xlat16_14;
    half u_xlat16_24;
    float u_xlat30;
    half u_xlat16_30;
    half u_xlat16_31;
    half u_xlat16_34;
    u_xlat0.x = Globals.hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat0.y = Globals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.z = Globals.hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat16_1.x = input.TEXCOORD2.w;
    u_xlat16_1.y = input.TEXCOORD3.w;
    u_xlat16_1.z = input.TEXCOORD4.w;
    u_xlat2.xyz = (-float3(u_xlat16_1.xyz)) + Globals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat3.xyz = float3(u_xlat16_1.xyz) + (-Globals.unity_ShadowFadeCenterAndType.xyz);
    u_xlat30 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat30 = sqrt(u_xlat30);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat10.x = (-u_xlat0.x) + u_xlat30;
    u_xlat0.x = Globals.unity_ShadowFadeCenterAndType.w * u_xlat10.x + u_xlat0.x;
    u_xlat0.x = u_xlat0.x * float(Globals._LightShadowData.z) + float(Globals._LightShadowData.w);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat10.xyz = float3(input.TEXCOORD3.www) * Globals.hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
    u_xlat10.xyz = Globals.hlslcc_mtx4x4unity_WorldToShadow[0].xyz * float3(input.TEXCOORD2.www) + u_xlat10.xyz;
    u_xlat10.xyz = Globals.hlslcc_mtx4x4unity_WorldToShadow[2].xyz * float3(input.TEXCOORD4.www) + u_xlat10.xyz;
    u_xlat10.xyz = u_xlat10.xyz + Globals.hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
    u_xlat16_10 = _ShadowMapTexture.sample_compare(_mtl_xl_shadow_sampler, u_xlat10.xy, saturate(u_xlat10.z), level(0.0));
    u_xlat16_1.x = (-Globals._LightShadowData.x) + half(1.0);
    u_xlat16_1.x = u_xlat16_10 * u_xlat16_1.x + Globals._LightShadowData.x;
    u_xlat16_1.x = half(u_xlat0.x + float(u_xlat16_1.x));
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0h, 1.0h);
    u_xlat16_1.xyz = u_xlat16_1.xxx * Globals._LightColor0.xyz;
    u_xlat16_31 = dot(input.TEXCOORD1.xyz, input.TEXCOORD1.xyz);
    u_xlat16_31 = rsqrt(u_xlat16_31);
    u_xlat16_4.xyz = (-input.TEXCOORD1.xyz) * half3(u_xlat16_31) + Globals._WorldSpaceLightPos0.xyz;
    u_xlat16_5.xyz = half3(u_xlat16_31) * input.TEXCOORD1.xyz;
    u_xlat16_31 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
    u_xlat16_0.x = max(u_xlat16_31, half(0.00100000005));
    u_xlat16_31 = rsqrt(u_xlat16_0.x);
    u_xlat16_4.xyz = half3(u_xlat16_31) * u_xlat16_4.xyz;
    u_xlat16_31 = dot(Globals._WorldSpaceLightPos0.xyz, u_xlat16_4.xyz);
    u_xlat16_31 = clamp(u_xlat16_31, 0.0h, 1.0h);
    u_xlat16_0.x = max(u_xlat16_31, half(0.319999993));
    u_xlat16_31 = (-Globals._Glossiness) + half(1.0);
    u_xlat16_10 = u_xlat16_31 * u_xlat16_31 + half(1.5);
    u_xlat16_0.x = u_xlat16_10 * u_xlat16_0.x;
    u_xlat16_34 = dot(input.TEXCOORD4.xyz, input.TEXCOORD4.xyz);
    u_xlat16_34 = rsqrt(u_xlat16_34);
    u_xlat16_2.xyz = half3(u_xlat16_34) * input.TEXCOORD4.xyz;
    u_xlat16_4.x = dot(u_xlat16_2.xyz, u_xlat16_4.xyz);
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0h, 1.0h);
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_14.x = u_xlat16_31 * u_xlat16_31;
    u_xlat16_10 = u_xlat16_14.x * u_xlat16_14.x + half(-1.0);
    u_xlat16_10 = u_xlat16_4.x * u_xlat16_10 + half(1.00001001);
    u_xlat16_0.x = u_xlat16_10 * u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_14.x / u_xlat16_0.x;
    u_xlat16_4.x = u_xlat16_31 * u_xlat16_14.x;
    u_xlat16_4.x = (-u_xlat16_4.x) * half(0.280000001) + half(1.0);
    u_xlat16_0.x = u_xlat16_0.x + half(-9.99999975e-05);
    u_xlat16_14.x = max(u_xlat16_0.x, half(0.0));
    u_xlat16_14.x = min(u_xlat16_14.x, half(100.0));
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_0.xyz * Globals._Color.xyz;
    u_xlat16_6.xyz = Globals._Color.xyz * u_xlat16_0.xyz + half3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat16_6.xyz = half3(Globals._Metallic) * u_xlat16_6.xyz + half3(0.220916301, 0.220916301, 0.220916301);
    u_xlat16_24 = (-Globals._Metallic) * half(0.779083729) + half(0.779083729);
    u_xlat16_7.xyz = u_xlat16_3.xyz * half3(u_xlat16_24);
    u_xlat16_24 = (-u_xlat16_24) + Globals._Glossiness;
    u_xlat16_24 = u_xlat16_24 + half(1.0);
    u_xlat16_24 = clamp(u_xlat16_24, 0.0h, 1.0h);
    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + half3(u_xlat16_24);
    u_xlat16_14.xyz = u_xlat16_14.xxx * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_14.xyz;
    u_xlat16_2.w = half(1.0);
    u_xlat16_9.x = dot(Globals.unity_SHAr, u_xlat16_2);
    u_xlat16_9.y = dot(Globals.unity_SHAg, u_xlat16_2);
    u_xlat16_9.z = dot(Globals.unity_SHAb, u_xlat16_2);
    u_xlat16_14.xyz = u_xlat16_9.xyz + input.TEXCOORD5.xyz;
    u_xlat16_14.xyz = max(u_xlat16_14.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_0.xyz = log2(u_xlat16_14.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * half3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * half3(1.05499995, 1.05499995, 1.05499995) + half3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_0.xyz = max(u_xlat16_0.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_30 = _OcclusionMap.sample(sampler_OcclusionMap, input.TEXCOORD0.xy).y;
    u_xlat16_14.x = (-Globals._OcclusionStrength) + half(1.0);
    u_xlat16_14.x = u_xlat16_30 * Globals._OcclusionStrength + u_xlat16_14.x;
    u_xlat16_9.xyz = u_xlat16_0.xyz * u_xlat16_14.xxx;
    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_9.xyz;
    u_xlat16_24 = dot(u_xlat16_2.xyz, Globals._WorldSpaceLightPos0.xyz);
    u_xlat16_24 = clamp(u_xlat16_24, 0.0h, 1.0h);
    u_xlat16_1.xyz = u_xlat16_1.xyz * half3(u_xlat16_24) + u_xlat16_7.xyz;
    u_xlat16_24 = (-u_xlat16_31) * half(0.699999988) + half(1.70000005);
    u_xlat16_31 = u_xlat16_31 * u_xlat16_24;
    u_xlat16_31 = u_xlat16_31 * half(6.0);
    u_xlat16_24 = dot(u_xlat16_5.xyz, u_xlat16_2.xyz);
    u_xlat16_24 = u_xlat16_24 + u_xlat16_24;
    u_xlat16_7.xyz = u_xlat16_2.xyz * (-half3(u_xlat16_24)) + u_xlat16_5.xyz;
    u_xlat16_24 = dot(u_xlat16_2.xyz, (-u_xlat16_5.xyz));
    u_xlat16_24 = clamp(u_xlat16_24, 0.0h, 1.0h);
    u_xlat16_24 = (-u_xlat16_24) + half(1.0);
    u_xlat16_24 = u_xlat16_24 * u_xlat16_24;
    u_xlat16_24 = u_xlat16_24 * u_xlat16_24;
    u_xlat16_5.xyz = half3(u_xlat16_24) * u_xlat16_8.xyz + u_xlat16_6.xyz;
    u_xlat16_0 = unity_SpecCube0.sample(samplerunity_SpecCube0, float3(u_xlat16_7.xyz), level(float(u_xlat16_31)));
    u_xlat16_31 = u_xlat16_0.w + half(-1.0);
    u_xlat16_31 = Globals.unity_SpecCube0_HDR.w * u_xlat16_31 + half(1.0);
    u_xlat16_31 = u_xlat16_31 * Globals.unity_SpecCube0_HDR.x;
    u_xlat16_6.xyz = u_xlat16_0.xyz * half3(u_xlat16_31);
    u_xlat16_14.xyz = u_xlat16_14.xxx * u_xlat16_6.xyz;
    u_xlat16_4.xyz = u_xlat16_14.xyz * u_xlat16_4.xxx;
    u_xlat16_1.xyz = u_xlat16_4.xyz * u_xlat16_5.xyz + u_xlat16_1.xyz;
    u_xlat16_0.xyz = _EmissionMap.sample(sampler_EmissionMap, input.TEXCOORD0.xy).xyz;
    output.SV_Target0.xyz = u_xlat16_0.xyz * Globals._EmissionColor.xyz + u_xlat16_1.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}


-- Hardware tier variant: Tier 3
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"
Uses vertex data channel "TexCoord0"

Constant Buffer "Globals" (274 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 48
  Matrix4x4 unity_WorldToObject at 112
  Matrix4x4 unity_MatrixVP at 176
  Vector3 _WorldSpaceCameraPos at 0
  VectorHalf4 unity_SHBr at 16
  VectorHalf4 unity_SHBg at 24
  VectorHalf4 unity_SHBb at 32
  VectorHalf4 unity_SHC at 40
  Vector4 _MainTex_ST at 240
  Vector4 _DetailAlbedoMap_ST at 256
  ScalarHalf _UVSec at 272
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    float4 _DetailAlbedoMap_ST;
    half _UVSec;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    half3 NORMAL0 [[ attribute(1) ]] ;
    float2 TEXCOORD0 [[ attribute(2) ]] ;
    float2 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    half4 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float2 TEXCOORD6 [[ user(TEXCOORD6) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    half4 u_xlat16_0;
    bool u_xlatb0;
    float4 u_xlat1;
    half u_xlat16_2;
    half3 u_xlat16_3;
    float u_xlat13;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0] * input.POSITION0.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2] * input.POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    output.mtl_Position = Globals.hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlatb0 = Globals._UVSec==half(0.0);
    u_xlat0.xy = (bool(u_xlatb0)) ? input.TEXCOORD0.xy : input.TEXCOORD1.xy;
    output.TEXCOORD0.zw = u_xlat0.xy * Globals._DetailAlbedoMap_ST.xy + Globals._DetailAlbedoMap_ST.zw;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy * Globals._MainTex_ST.xy + Globals._MainTex_ST.zw;
    u_xlat0.xyz = input.POSITION0.yyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * input.POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * input.POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyw = Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * input.POSITION0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyw + (-Globals._WorldSpaceCameraPos.xyzx.xyz);
    output.TEXCOORD1.xyz = half3(u_xlat1.xyz);
    output.TEXCOORD2.w = half(u_xlat0.x);
    output.TEXCOORD2.xyz = half3(0.0, 0.0, 0.0);
    output.TEXCOORD3.w = half(u_xlat0.y);
    output.TEXCOORD3.xyz = half3(0.0, 0.0, 0.0);
    u_xlat1.x = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = rsqrt(u_xlat13);
    u_xlat0.xyz = float3(u_xlat13) * u_xlat1.xyz;
    output.TEXCOORD4 = half4(u_xlat0);
    u_xlat16_2 = half(u_xlat0.y * u_xlat0.y);
    u_xlat16_2 = half(u_xlat0.x * u_xlat0.x + (-float(u_xlat16_2)));
    u_xlat16_0 = half4(u_xlat0.yzzx * u_xlat0.xyzz);
    u_xlat16_3.x = dot(Globals.unity_SHBr, u_xlat16_0);
    u_xlat16_3.y = dot(Globals.unity_SHBg, u_xlat16_0);
    u_xlat16_3.z = dot(Globals.unity_SHBb, u_xlat16_0);
    output.TEXCOORD5.xyz = Globals.unity_SHC.xyz * half3(u_xlat16_2) + u_xlat16_3.xyz;
    output.TEXCOORD5.w = half(0.0);
    output.TEXCOORD6.xy = float2(0.0, 0.0);
    return output;
}


-- Hardware tier variant: Tier 3
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0 sampler slot 1
Set 2D Texture "_OcclusionMap" to slot 1 sampler slot 2
Set 2D Texture "_EmissionMap" to slot 2 sampler slot 3
Set CUBE Texture "unity_SpecCube0" to slot 3 sampler slot 0
Set 2D Texture "_ShadowMapTexture" to slot 4

Constant Buffer "Globals" (440 bytes) on slot 0 {
  Matrix4x4 unity_WorldToShadow[4] at 48
  Matrix4x4 unity_MatrixV at 336
  Vector3 _WorldSpaceCameraPos at 0
  VectorHalf4 _WorldSpaceLightPos0 at 16
  VectorHalf4 unity_SHAr at 24
  VectorHalf4 unity_SHAg at 32
  VectorHalf4 unity_SHAb at 40
  VectorHalf4 _LightShadowData at 304
  Vector4 unity_ShadowFadeCenterAndType at 320
  VectorHalf4 unity_SpecCube0_HDR at 400
  VectorHalf4 _LightColor0 at 408
  VectorHalf4 _Color at 416
  ScalarHalf _Metallic at 424
  ScalarHalf _Glossiness at 426
  ScalarHalf _OcclusionStrength at 428
  VectorHalf4 _EmissionColor at 432
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    half4 _WorldSpaceLightPos0;
    half4 unity_SHAr;
    half4 unity_SHAg;
    half4 unity_SHAb;
    float4 hlslcc_mtx4x4unity_WorldToShadow[16];
    half4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    half4 unity_SpecCube0_HDR;
    half4 _LightColor0;
    half4 _Color;
    half _Metallic;
    half _Glossiness;
    half _OcclusionStrength;
    half4 _EmissionColor;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    half4 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(0) ]];
};

constexpr sampler _mtl_xl_shadow_sampler(address::clamp_to_edge, filter::linear, compare_func::greater_equal);
fragment Mtl_FragmentOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    sampler samplerunity_SpecCube0 [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_OcclusionMap [[ sampler (2) ]],
    sampler sampler_EmissionMap [[ sampler (3) ]],
    sampler sampler_ShadowMapTexture [[ sampler (4) ]],
    texture2d<half, access::sample > _MainTex [[ texture (0) ]] ,
    texture2d<half, access::sample > _OcclusionMap [[ texture (1) ]] ,
    texture2d<half, access::sample > _EmissionMap [[ texture (2) ]] ,
    texturecube<half, access::sample > unity_SpecCube0 [[ texture (3) ]] ,
    depth2d<float, access::sample > _ShadowMapTexture [[ texture (4) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half4 u_xlat16_0;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half4 u_xlat16_2;
    float3 u_xlat3;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    half3 u_xlat16_6;
    half3 u_xlat16_7;
    half3 u_xlat16_8;
    half3 u_xlat16_9;
    float3 u_xlat10;
    half u_xlat16_10;
    half3 u_xlat16_14;
    half u_xlat16_24;
    float u_xlat30;
    half u_xlat16_30;
    half u_xlat16_31;
    half u_xlat16_34;
    u_xlat0.x = Globals.hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat0.y = Globals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.z = Globals.hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat16_1.x = input.TEXCOORD2.w;
    u_xlat16_1.y = input.TEXCOORD3.w;
    u_xlat16_1.z = input.TEXCOORD4.w;
    u_xlat2.xyz = (-float3(u_xlat16_1.xyz)) + Globals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat3.xyz = float3(u_xlat16_1.xyz) + (-Globals.unity_ShadowFadeCenterAndType.xyz);
    u_xlat30 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat30 = sqrt(u_xlat30);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat10.x = (-u_xlat0.x) + u_xlat30;
    u_xlat0.x = Globals.unity_ShadowFadeCenterAndType.w * u_xlat10.x + u_xlat0.x;
    u_xlat0.x = u_xlat0.x * float(Globals._LightShadowData.z) + float(Globals._LightShadowData.w);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat10.xyz = float3(input.TEXCOORD3.www) * Globals.hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
    u_xlat10.xyz = Globals.hlslcc_mtx4x4unity_WorldToShadow[0].xyz * float3(input.TEXCOORD2.www) + u_xlat10.xyz;
    u_xlat10.xyz = Globals.hlslcc_mtx4x4unity_WorldToShadow[2].xyz * float3(input.TEXCOORD4.www) + u_xlat10.xyz;
    u_xlat10.xyz = u_xlat10.xyz + Globals.hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
    u_xlat16_10 = _ShadowMapTexture.sample_compare(_mtl_xl_shadow_sampler, u_xlat10.xy, saturate(u_xlat10.z), level(0.0));
    u_xlat16_1.x = (-Globals._LightShadowData.x) + half(1.0);
    u_xlat16_1.x = u_xlat16_10 * u_xlat16_1.x + Globals._LightShadowData.x;
    u_xlat16_1.x = half(u_xlat0.x + float(u_xlat16_1.x));
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0h, 1.0h);
    u_xlat16_1.xyz = u_xlat16_1.xxx * Globals._LightColor0.xyz;
    u_xlat16_31 = dot(input.TEXCOORD1.xyz, input.TEXCOORD1.xyz);
    u_xlat16_31 = rsqrt(u_xlat16_31);
    u_xlat16_4.xyz = (-input.TEXCOORD1.xyz) * half3(u_xlat16_31) + Globals._WorldSpaceLightPos0.xyz;
    u_xlat16_5.xyz = half3(u_xlat16_31) * input.TEXCOORD1.xyz;
    u_xlat16_31 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
    u_xlat16_0.x = max(u_xlat16_31, half(0.00100000005));
    u_xlat16_31 = rsqrt(u_xlat16_0.x);
    u_xlat16_4.xyz = half3(u_xlat16_31) * u_xlat16_4.xyz;
    u_xlat16_31 = dot(Globals._WorldSpaceLightPos0.xyz, u_xlat16_4.xyz);
    u_xlat16_31 = clamp(u_xlat16_31, 0.0h, 1.0h);
    u_xlat16_0.x = max(u_xlat16_31, half(0.319999993));
    u_xlat16_31 = (-Globals._Glossiness) + half(1.0);
    u_xlat16_10 = u_xlat16_31 * u_xlat16_31 + half(1.5);
    u_xlat16_0.x = u_xlat16_10 * u_xlat16_0.x;
    u_xlat16_34 = dot(input.TEXCOORD4.xyz, input.TEXCOORD4.xyz);
    u_xlat16_34 = rsqrt(u_xlat16_34);
    u_xlat16_2.xyz = half3(u_xlat16_34) * input.TEXCOORD4.xyz;
    u_xlat16_4.x = dot(u_xlat16_2.xyz, u_xlat16_4.xyz);
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0h, 1.0h);
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_14.x = u_xlat16_31 * u_xlat16_31;
    u_xlat16_10 = u_xlat16_14.x * u_xlat16_14.x + half(-1.0);
    u_xlat16_10 = u_xlat16_4.x * u_xlat16_10 + half(1.00001001);
    u_xlat16_0.x = u_xlat16_10 * u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_14.x / u_xlat16_0.x;
    u_xlat16_4.x = u_xlat16_31 * u_xlat16_14.x;
    u_xlat16_4.x = (-u_xlat16_4.x) * half(0.280000001) + half(1.0);
    u_xlat16_0.x = u_xlat16_0.x + half(-9.99999975e-05);
    u_xlat16_14.x = max(u_xlat16_0.x, half(0.0));
    u_xlat16_14.x = min(u_xlat16_14.x, half(100.0));
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_0.xyz * Globals._Color.xyz;
    u_xlat16_6.xyz = Globals._Color.xyz * u_xlat16_0.xyz + half3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat16_6.xyz = half3(Globals._Metallic) * u_xlat16_6.xyz + half3(0.220916301, 0.220916301, 0.220916301);
    u_xlat16_24 = (-Globals._Metallic) * half(0.779083729) + half(0.779083729);
    u_xlat16_7.xyz = u_xlat16_3.xyz * half3(u_xlat16_24);
    u_xlat16_24 = (-u_xlat16_24) + Globals._Glossiness;
    u_xlat16_24 = u_xlat16_24 + half(1.0);
    u_xlat16_24 = clamp(u_xlat16_24, 0.0h, 1.0h);
    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + half3(u_xlat16_24);
    u_xlat16_14.xyz = u_xlat16_14.xxx * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_14.xyz;
    u_xlat16_2.w = half(1.0);
    u_xlat16_9.x = dot(Globals.unity_SHAr, u_xlat16_2);
    u_xlat16_9.y = dot(Globals.unity_SHAg, u_xlat16_2);
    u_xlat16_9.z = dot(Globals.unity_SHAb, u_xlat16_2);
    u_xlat16_14.xyz = u_xlat16_9.xyz + input.TEXCOORD5.xyz;
    u_xlat16_14.xyz = max(u_xlat16_14.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_0.xyz = log2(u_xlat16_14.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * half3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * half3(1.05499995, 1.05499995, 1.05499995) + half3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_0.xyz = max(u_xlat16_0.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_30 = _OcclusionMap.sample(sampler_OcclusionMap, input.TEXCOORD0.xy).y;
    u_xlat16_14.x = (-Globals._OcclusionStrength) + half(1.0);
    u_xlat16_14.x = u_xlat16_30 * Globals._OcclusionStrength + u_xlat16_14.x;
    u_xlat16_9.xyz = u_xlat16_0.xyz * u_xlat16_14.xxx;
    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_9.xyz;
    u_xlat16_24 = dot(u_xlat16_2.xyz, Globals._WorldSpaceLightPos0.xyz);
    u_xlat16_24 = clamp(u_xlat16_24, 0.0h, 1.0h);
    u_xlat16_1.xyz = u_xlat16_1.xyz * half3(u_xlat16_24) + u_xlat16_7.xyz;
    u_xlat16_24 = (-u_xlat16_31) * half(0.699999988) + half(1.70000005);
    u_xlat16_31 = u_xlat16_31 * u_xlat16_24;
    u_xlat16_31 = u_xlat16_31 * half(6.0);
    u_xlat16_24 = dot(u_xlat16_5.xyz, u_xlat16_2.xyz);
    u_xlat16_24 = u_xlat16_24 + u_xlat16_24;
    u_xlat16_7.xyz = u_xlat16_2.xyz * (-half3(u_xlat16_24)) + u_xlat16_5.xyz;
    u_xlat16_24 = dot(u_xlat16_2.xyz, (-u_xlat16_5.xyz));
    u_xlat16_24 = clamp(u_xlat16_24, 0.0h, 1.0h);
    u_xlat16_24 = (-u_xlat16_24) + half(1.0);
    u_xlat16_24 = u_xlat16_24 * u_xlat16_24;
    u_xlat16_24 = u_xlat16_24 * u_xlat16_24;
    u_xlat16_5.xyz = half3(u_xlat16_24) * u_xlat16_8.xyz + u_xlat16_6.xyz;
    u_xlat16_0 = unity_SpecCube0.sample(samplerunity_SpecCube0, float3(u_xlat16_7.xyz), level(float(u_xlat16_31)));
    u_xlat16_31 = u_xlat16_0.w + half(-1.0);
    u_xlat16_31 = Globals.unity_SpecCube0_HDR.w * u_xlat16_31 + half(1.0);
    u_xlat16_31 = u_xlat16_31 * Globals.unity_SpecCube0_HDR.x;
    u_xlat16_6.xyz = u_xlat16_0.xyz * half3(u_xlat16_31);
    u_xlat16_14.xyz = u_xlat16_14.xxx * u_xlat16_6.xyz;
    u_xlat16_4.xyz = u_xlat16_14.xyz * u_xlat16_4.xxx;
    u_xlat16_1.xyz = u_xlat16_4.xyz * u_xlat16_5.xyz + u_xlat16_1.xyz;
    u_xlat16_0.xyz = _EmissionMap.sample(sampler_EmissionMap, input.TEXCOORD0.xy).xyz;
    output.SV_Target0.xyz = u_xlat16_0.xyz * Globals._EmissionColor.xyz + u_xlat16_1.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}


-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"
Uses vertex data channel "TexCoord0"

Constant Buffer "Globals" (274 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 48
  Matrix4x4 unity_WorldToObject at 112
  Matrix4x4 unity_MatrixVP at 176
  Vector3 _WorldSpaceCameraPos at 0
  VectorHalf4 unity_SHBr at 16
  VectorHalf4 unity_SHBg at 24
  VectorHalf4 unity_SHBb at 32
  VectorHalf4 unity_SHC at 40
  Vector4 _MainTex_ST at 240
  Vector4 _DetailAlbedoMap_ST at 256
  ScalarHalf _UVSec at 272
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    float4 _DetailAlbedoMap_ST;
    half _UVSec;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    half3 NORMAL0 [[ attribute(1) ]] ;
    float2 TEXCOORD0 [[ attribute(2) ]] ;
    float2 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    half4 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float2 TEXCOORD6 [[ user(TEXCOORD6) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    half4 u_xlat16_0;
    bool u_xlatb0;
    float4 u_xlat1;
    half u_xlat16_2;
    half3 u_xlat16_3;
    float u_xlat13;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0] * input.POSITION0.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2] * input.POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    output.mtl_Position = Globals.hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlatb0 = Globals._UVSec==half(0.0);
    u_xlat0.xy = (bool(u_xlatb0)) ? input.TEXCOORD0.xy : input.TEXCOORD1.xy;
    output.TEXCOORD0.zw = u_xlat0.xy * Globals._DetailAlbedoMap_ST.xy + Globals._DetailAlbedoMap_ST.zw;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy * Globals._MainTex_ST.xy + Globals._MainTex_ST.zw;
    u_xlat0.xyz = input.POSITION0.yyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * input.POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * input.POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyw = Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * input.POSITION0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyw + (-Globals._WorldSpaceCameraPos.xyzx.xyz);
    output.TEXCOORD1.xyz = half3(u_xlat1.xyz);
    output.TEXCOORD2.w = half(u_xlat0.x);
    output.TEXCOORD2.xyz = half3(0.0, 0.0, 0.0);
    output.TEXCOORD3.w = half(u_xlat0.y);
    output.TEXCOORD3.xyz = half3(0.0, 0.0, 0.0);
    u_xlat1.x = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = rsqrt(u_xlat13);
    u_xlat0.xyz = float3(u_xlat13) * u_xlat1.xyz;
    output.TEXCOORD4 = half4(u_xlat0);
    u_xlat16_2 = half(u_xlat0.y * u_xlat0.y);
    u_xlat16_2 = half(u_xlat0.x * u_xlat0.x + (-float(u_xlat16_2)));
    u_xlat16_0 = half4(u_xlat0.yzzx * u_xlat0.xyzz);
    u_xlat16_3.x = dot(Globals.unity_SHBr, u_xlat16_0);
    u_xlat16_3.y = dot(Globals.unity_SHBg, u_xlat16_0);
    u_xlat16_3.z = dot(Globals.unity_SHBb, u_xlat16_0);
    output.TEXCOORD5.xyz = Globals.unity_SHC.xyz * half3(u_xlat16_2) + u_xlat16_3.xyz;
    output.TEXCOORD5.w = half(0.0);
    output.TEXCOORD6.xy = float2(0.0, 0.0);
    return output;
}


-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0 sampler slot 2
Set 2D Texture "_OcclusionMap" to slot 1 sampler slot 3
Set 2D Texture "unity_NHxRoughness" to slot 2 sampler slot 1
Set CUBE Texture "unity_SpecCube0" to slot 3 sampler slot 0
Set 2D Texture "_ShadowMapTexture" to slot 4

Constant Buffer "Globals" (430 bytes) on slot 0 {
  Matrix4x4 unity_WorldToShadow[4] at 48
  Matrix4x4 unity_MatrixV at 336
  Vector3 _WorldSpaceCameraPos at 0
  VectorHalf4 _WorldSpaceLightPos0 at 16
  VectorHalf4 unity_SHAr at 24
  VectorHalf4 unity_SHAg at 32
  VectorHalf4 unity_SHAb at 40
  VectorHalf4 _LightShadowData at 304
  Vector4 unity_ShadowFadeCenterAndType at 320
  VectorHalf4 unity_SpecCube0_HDR at 400
  VectorHalf4 _LightColor0 at 408
  VectorHalf4 _Color at 416
  ScalarHalf _Metallic at 424
  ScalarHalf _Glossiness at 426
  ScalarHalf _OcclusionStrength at 428
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    half4 _WorldSpaceLightPos0;
    half4 unity_SHAr;
    half4 unity_SHAg;
    half4 unity_SHAb;
    float4 hlslcc_mtx4x4unity_WorldToShadow[16];
    half4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    half4 unity_SpecCube0_HDR;
    half4 _LightColor0;
    half4 _Color;
    half _Metallic;
    half _Glossiness;
    half _OcclusionStrength;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    half4 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(0) ]];
};

constexpr sampler _mtl_xl_shadow_sampler(address::clamp_to_edge, filter::linear, compare_func::greater_equal);
fragment Mtl_FragmentOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    sampler samplerunity_SpecCube0 [[ sampler (0) ]],
    sampler samplerunity_NHxRoughness [[ sampler (1) ]],
    sampler sampler_MainTex [[ sampler (2) ]],
    sampler sampler_OcclusionMap [[ sampler (3) ]],
    sampler sampler_ShadowMapTexture [[ sampler (4) ]],
    texture2d<half, access::sample > _MainTex [[ texture (0) ]] ,
    texture2d<half, access::sample > _OcclusionMap [[ texture (1) ]] ,
    texture2d<half, access::sample > unity_NHxRoughness [[ texture (2) ]] ,
    texturecube<half, access::sample > unity_SpecCube0 [[ texture (3) ]] ,
    depth2d<float, access::sample > _ShadowMapTexture [[ texture (4) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half4 u_xlat16_0;
    half3 u_xlat16_1;
    half4 u_xlat16_2;
    half4 u_xlat16_3;
    half4 u_xlat16_4;
    half3 u_xlat16_5;
    half3 u_xlat16_6;
    float3 u_xlat7;
    half3 u_xlat16_7;
    float3 u_xlat8;
    float3 u_xlat9;
    half3 u_xlat16_11;
    half u_xlat16_12;
    float3 u_xlat17;
    half u_xlat16_17;
    half u_xlat16_21;
    half u_xlat16_31;
    half u_xlat16_32;
    float u_xlat37;
    u_xlat16_0.x = _OcclusionMap.sample(sampler_OcclusionMap, input.TEXCOORD0.xy).y;
    u_xlat16_1.x = (-Globals._OcclusionStrength) + half(1.0);
    u_xlat16_1.x = u_xlat16_0.x * Globals._OcclusionStrength + u_xlat16_1.x;
    u_xlat16_0.xw = (-half2(Globals._Glossiness)) + half2(1.0, 1.0);
    u_xlat16_11.x = (-u_xlat16_0.x) * half(0.699999988) + half(1.70000005);
    u_xlat16_11.x = u_xlat16_0.x * u_xlat16_11.x;
    u_xlat16_11.x = u_xlat16_11.x * half(6.0);
    u_xlat16_21 = dot(input.TEXCOORD1.xyz, input.TEXCOORD1.xyz);
    u_xlat16_21 = rsqrt(u_xlat16_21);
    u_xlat16_2.xyz = half3(u_xlat16_21) * input.TEXCOORD1.xyz;
    u_xlat16_21 = dot(input.TEXCOORD4.xyz, input.TEXCOORD4.xyz);
    u_xlat16_21 = rsqrt(u_xlat16_21);
    u_xlat16_3.xyz = half3(u_xlat16_21) * input.TEXCOORD4.xyz;
    u_xlat16_21 = dot(u_xlat16_2.xyz, u_xlat16_3.xyz);
    u_xlat16_21 = u_xlat16_21 + u_xlat16_21;
    u_xlat16_4.xyz = u_xlat16_3.xyz * (-half3(u_xlat16_21)) + u_xlat16_2.xyz;
    u_xlat16_4 = unity_SpecCube0.sample(samplerunity_SpecCube0, float3(u_xlat16_4.xyz), level(float(u_xlat16_11.x)));
    u_xlat16_11.x = u_xlat16_4.w + half(-1.0);
    u_xlat16_11.x = Globals.unity_SpecCube0_HDR.w * u_xlat16_11.x + half(1.0);
    u_xlat16_11.x = u_xlat16_11.x * Globals.unity_SpecCube0_HDR.x;
    u_xlat16_11.xyz = u_xlat16_4.xyz * u_xlat16_11.xxx;
    u_xlat16_11.xyz = u_xlat16_1.xxx * u_xlat16_11.xyz;
    u_xlat16_32 = dot((-u_xlat16_2.xyz), u_xlat16_3.xyz);
    u_xlat16_5.x = u_xlat16_32 + u_xlat16_32;
    u_xlat16_32 = u_xlat16_32;
    u_xlat16_32 = clamp(u_xlat16_32, 0.0h, 1.0h);
    u_xlat16_6.y = (-u_xlat16_32) + half(1.0);
    u_xlat16_2.xyz = u_xlat16_3.xyz * (-u_xlat16_5.xxx) + (-u_xlat16_2.xyz);
    u_xlat16_6.x = dot(u_xlat16_2.xyz, Globals._WorldSpaceLightPos0.xyz);
    u_xlat16_2.xy = u_xlat16_6.xy * u_xlat16_6.xy;
    u_xlat16_0.yz = u_xlat16_2.xy * u_xlat16_2.xy;
    u_xlat16_2.x = (-Globals._Metallic) * half(0.779083729) + half(0.779083729);
    u_xlat16_12 = (-u_xlat16_2.x) + Globals._Glossiness;
    u_xlat16_12 = u_xlat16_12 + half(1.0);
    u_xlat16_12 = clamp(u_xlat16_12, 0.0h, 1.0h);
    u_xlat16_7.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_5.xyz = Globals._Color.xyz * u_xlat16_7.xyz + half3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat16_7.xyz = u_xlat16_7.xyz * Globals._Color.xyz;
    u_xlat16_2.xzw = u_xlat16_2.xxx * u_xlat16_7.xyz;
    u_xlat16_5.xyz = half3(Globals._Metallic) * u_xlat16_5.xyz + half3(0.220916301, 0.220916301, 0.220916301);
    u_xlat16_6.xyz = half3(u_xlat16_12) + (-u_xlat16_5.xyz);
    u_xlat16_6.xyz = u_xlat16_0.zzz * u_xlat16_6.xyz + u_xlat16_5.xyz;
    u_xlat16_7.x = unity_NHxRoughness.sample(samplerunity_NHxRoughness, float2(u_xlat16_0.yw)).w;
    u_xlat16_7.x = u_xlat16_7.x * half(16.0);
    u_xlat16_5.xyz = u_xlat16_7.xxx * u_xlat16_5.xyz + u_xlat16_2.xzw;
    u_xlat16_11.xyz = u_xlat16_11.xyz * u_xlat16_6.xyz;
    u_xlat16_3.w = half(1.0);
    u_xlat16_6.x = dot(Globals.unity_SHAr, u_xlat16_3);
    u_xlat16_6.y = dot(Globals.unity_SHAg, u_xlat16_3);
    u_xlat16_6.z = dot(Globals.unity_SHAb, u_xlat16_3);
    u_xlat16_12 = dot(u_xlat16_3.xyz, Globals._WorldSpaceLightPos0.xyz);
    u_xlat16_12 = clamp(u_xlat16_12, 0.0h, 1.0h);
    u_xlat16_3.xyz = u_xlat16_6.xyz + input.TEXCOORD5.xyz;
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_7.xyz = log2(u_xlat16_3.xyz);
    u_xlat16_7.xyz = u_xlat16_7.xyz * half3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_7.xyz = exp2(u_xlat16_7.xyz);
    u_xlat16_7.xyz = u_xlat16_7.xyz * half3(1.05499995, 1.05499995, 1.05499995) + half3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_7.xyz = max(u_xlat16_7.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_3.xyz = u_xlat16_1.xxx * u_xlat16_7.xyz;
    u_xlat16_1.xyz = u_xlat16_3.xyz * u_xlat16_2.xzw + u_xlat16_11.xyz;
    u_xlat7.x = Globals.hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat7.y = Globals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat7.z = Globals.hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat16_3.x = input.TEXCOORD2.w;
    u_xlat16_3.y = input.TEXCOORD3.w;
    u_xlat16_3.z = input.TEXCOORD4.w;
    u_xlat8.xyz = (-float3(u_xlat16_3.xyz)) + Globals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat9.xyz = float3(u_xlat16_3.xyz) + (-Globals.unity_ShadowFadeCenterAndType.xyz);
    u_xlat37 = dot(u_xlat9.xyz, u_xlat9.xyz);
    u_xlat37 = sqrt(u_xlat37);
    u_xlat7.x = dot(u_xlat8.xyz, u_xlat7.xyz);
    u_xlat17.x = (-u_xlat7.x) + u_xlat37;
    u_xlat7.x = Globals.unity_ShadowFadeCenterAndType.w * u_xlat17.x + u_xlat7.x;
    u_xlat7.x = u_xlat7.x * float(Globals._LightShadowData.z) + float(Globals._LightShadowData.w);
    u_xlat7.x = clamp(u_xlat7.x, 0.0f, 1.0f);
    u_xlat17.xyz = float3(input.TEXCOORD3.www) * Globals.hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
    u_xlat17.xyz = Globals.hlslcc_mtx4x4unity_WorldToShadow[0].xyz * float3(input.TEXCOORD2.www) + u_xlat17.xyz;
    u_xlat17.xyz = Globals.hlslcc_mtx4x4unity_WorldToShadow[2].xyz * float3(input.TEXCOORD4.www) + u_xlat17.xyz;
    u_xlat17.xyz = u_xlat17.xyz + Globals.hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
    u_xlat16_17 = _ShadowMapTexture.sample_compare(_mtl_xl_shadow_sampler, u_xlat17.xy, saturate(u_xlat17.z), level(0.0));
    u_xlat16_31 = (-Globals._LightShadowData.x) + half(1.0);
    u_xlat16_31 = u_xlat16_17 * u_xlat16_31 + Globals._LightShadowData.x;
    u_xlat16_31 = half(u_xlat7.x + float(u_xlat16_31));
    u_xlat16_31 = clamp(u_xlat16_31, 0.0h, 1.0h);
    u_xlat16_2.xzw = half3(u_xlat16_31) * Globals._LightColor0.xyz;
    u_xlat16_2.xyz = half3(u_xlat16_12) * u_xlat16_2.xzw;
    output.SV_Target0.xyz = u_xlat16_5.xyz * u_xlat16_2.xyz + u_xlat16_1.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}


-- Hardware tier variant: Tier 2
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"
Uses vertex data channel "TexCoord0"

Constant Buffer "Globals" (274 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 48
  Matrix4x4 unity_WorldToObject at 112
  Matrix4x4 unity_MatrixVP at 176
  Vector3 _WorldSpaceCameraPos at 0
  VectorHalf4 unity_SHBr at 16
  VectorHalf4 unity_SHBg at 24
  VectorHalf4 unity_SHBb at 32
  VectorHalf4 unity_SHC at 40
  Vector4 _MainTex_ST at 240
  Vector4 _DetailAlbedoMap_ST at 256
  ScalarHalf _UVSec at 272
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    float4 _DetailAlbedoMap_ST;
    half _UVSec;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    half3 NORMAL0 [[ attribute(1) ]] ;
    float2 TEXCOORD0 [[ attribute(2) ]] ;
    float2 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    half4 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float2 TEXCOORD6 [[ user(TEXCOORD6) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    half4 u_xlat16_0;
    bool u_xlatb0;
    float4 u_xlat1;
    half u_xlat16_2;
    half3 u_xlat16_3;
    float u_xlat13;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0] * input.POSITION0.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2] * input.POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    output.mtl_Position = Globals.hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlatb0 = Globals._UVSec==half(0.0);
    u_xlat0.xy = (bool(u_xlatb0)) ? input.TEXCOORD0.xy : input.TEXCOORD1.xy;
    output.TEXCOORD0.zw = u_xlat0.xy * Globals._DetailAlbedoMap_ST.xy + Globals._DetailAlbedoMap_ST.zw;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy * Globals._MainTex_ST.xy + Globals._MainTex_ST.zw;
    u_xlat0.xyz = input.POSITION0.yyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * input.POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * input.POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyw = Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * input.POSITION0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyw + (-Globals._WorldSpaceCameraPos.xyzx.xyz);
    output.TEXCOORD1.xyz = half3(u_xlat1.xyz);
    output.TEXCOORD2.w = half(u_xlat0.x);
    output.TEXCOORD2.xyz = half3(0.0, 0.0, 0.0);
    output.TEXCOORD3.w = half(u_xlat0.y);
    output.TEXCOORD3.xyz = half3(0.0, 0.0, 0.0);
    u_xlat1.x = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = rsqrt(u_xlat13);
    u_xlat0.xyz = float3(u_xlat13) * u_xlat1.xyz;
    output.TEXCOORD4 = half4(u_xlat0);
    u_xlat16_2 = half(u_xlat0.y * u_xlat0.y);
    u_xlat16_2 = half(u_xlat0.x * u_xlat0.x + (-float(u_xlat16_2)));
    u_xlat16_0 = half4(u_xlat0.yzzx * u_xlat0.xyzz);
    u_xlat16_3.x = dot(Globals.unity_SHBr, u_xlat16_0);
    u_xlat16_3.y = dot(Globals.unity_SHBg, u_xlat16_0);
    u_xlat16_3.z = dot(Globals.unity_SHBb, u_xlat16_0);
    output.TEXCOORD5.xyz = Globals.unity_SHC.xyz * half3(u_xlat16_2) + u_xlat16_3.xyz;
    output.TEXCOORD5.w = half(0.0);
    output.TEXCOORD6.xy = float2(0.0, 0.0);
    return output;
}


-- Hardware tier variant: Tier 2
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0 sampler slot 1
Set 2D Texture "_OcclusionMap" to slot 1 sampler slot 2
Set CUBE Texture "unity_SpecCube0" to slot 2 sampler slot 0
Set 2D Texture "_ShadowMapTexture" to slot 3

Constant Buffer "Globals" (430 bytes) on slot 0 {
  Matrix4x4 unity_WorldToShadow[4] at 48
  Matrix4x4 unity_MatrixV at 336
  Vector3 _WorldSpaceCameraPos at 0
  VectorHalf4 _WorldSpaceLightPos0 at 16
  VectorHalf4 unity_SHAr at 24
  VectorHalf4 unity_SHAg at 32
  VectorHalf4 unity_SHAb at 40
  VectorHalf4 _LightShadowData at 304
  Vector4 unity_ShadowFadeCenterAndType at 320
  VectorHalf4 unity_SpecCube0_HDR at 400
  VectorHalf4 _LightColor0 at 408
  VectorHalf4 _Color at 416
  ScalarHalf _Metallic at 424
  ScalarHalf _Glossiness at 426
  ScalarHalf _OcclusionStrength at 428
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    half4 _WorldSpaceLightPos0;
    half4 unity_SHAr;
    half4 unity_SHAg;
    half4 unity_SHAb;
    float4 hlslcc_mtx4x4unity_WorldToShadow[16];
    half4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    half4 unity_SpecCube0_HDR;
    half4 _LightColor0;
    half4 _Color;
    half _Metallic;
    half _Glossiness;
    half _OcclusionStrength;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    half4 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(0) ]];
};

constexpr sampler _mtl_xl_shadow_sampler(address::clamp_to_edge, filter::linear, compare_func::greater_equal);
fragment Mtl_FragmentOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    sampler samplerunity_SpecCube0 [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_OcclusionMap [[ sampler (2) ]],
    sampler sampler_ShadowMapTexture [[ sampler (3) ]],
    texture2d<half, access::sample > _MainTex [[ texture (0) ]] ,
    texture2d<half, access::sample > _OcclusionMap [[ texture (1) ]] ,
    texturecube<half, access::sample > unity_SpecCube0 [[ texture (2) ]] ,
    depth2d<float, access::sample > _ShadowMapTexture [[ texture (3) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half4 u_xlat16_0;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half4 u_xlat16_2;
    float3 u_xlat3;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    half3 u_xlat16_6;
    half3 u_xlat16_7;
    half3 u_xlat16_8;
    half3 u_xlat16_9;
    float3 u_xlat10;
    half u_xlat16_10;
    half3 u_xlat16_14;
    half u_xlat16_24;
    float u_xlat30;
    half u_xlat16_30;
    half u_xlat16_31;
    half u_xlat16_34;
    u_xlat0.x = Globals.hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat0.y = Globals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.z = Globals.hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat16_1.x = input.TEXCOORD2.w;
    u_xlat16_1.y = input.TEXCOORD3.w;
    u_xlat16_1.z = input.TEXCOORD4.w;
    u_xlat2.xyz = (-float3(u_xlat16_1.xyz)) + Globals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat3.xyz = float3(u_xlat16_1.xyz) + (-Globals.unity_ShadowFadeCenterAndType.xyz);
    u_xlat30 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat30 = sqrt(u_xlat30);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat10.x = (-u_xlat0.x) + u_xlat30;
    u_xlat0.x = Globals.unity_ShadowFadeCenterAndType.w * u_xlat10.x + u_xlat0.x;
    u_xlat0.x = u_xlat0.x * float(Globals._LightShadowData.z) + float(Globals._LightShadowData.w);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat10.xyz = float3(input.TEXCOORD3.www) * Globals.hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
    u_xlat10.xyz = Globals.hlslcc_mtx4x4unity_WorldToShadow[0].xyz * float3(input.TEXCOORD2.www) + u_xlat10.xyz;
    u_xlat10.xyz = Globals.hlslcc_mtx4x4unity_WorldToShadow[2].xyz * float3(input.TEXCOORD4.www) + u_xlat10.xyz;
    u_xlat10.xyz = u_xlat10.xyz + Globals.hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
    u_xlat16_10 = _ShadowMapTexture.sample_compare(_mtl_xl_shadow_sampler, u_xlat10.xy, saturate(u_xlat10.z), level(0.0));
    u_xlat16_1.x = (-Globals._LightShadowData.x) + half(1.0);
    u_xlat16_1.x = u_xlat16_10 * u_xlat16_1.x + Globals._LightShadowData.x;
    u_xlat16_1.x = half(u_xlat0.x + float(u_xlat16_1.x));
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0h, 1.0h);
    u_xlat16_1.xyz = u_xlat16_1.xxx * Globals._LightColor0.xyz;
    u_xlat16_31 = dot(input.TEXCOORD1.xyz, input.TEXCOORD1.xyz);
    u_xlat16_31 = rsqrt(u_xlat16_31);
    u_xlat16_4.xyz = (-input.TEXCOORD1.xyz) * half3(u_xlat16_31) + Globals._WorldSpaceLightPos0.xyz;
    u_xlat16_5.xyz = half3(u_xlat16_31) * input.TEXCOORD1.xyz;
    u_xlat16_31 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
    u_xlat16_0.x = max(u_xlat16_31, half(0.00100000005));
    u_xlat16_31 = rsqrt(u_xlat16_0.x);
    u_xlat16_4.xyz = half3(u_xlat16_31) * u_xlat16_4.xyz;
    u_xlat16_31 = dot(Globals._WorldSpaceLightPos0.xyz, u_xlat16_4.xyz);
    u_xlat16_31 = clamp(u_xlat16_31, 0.0h, 1.0h);
    u_xlat16_0.x = max(u_xlat16_31, half(0.319999993));
    u_xlat16_31 = (-Globals._Glossiness) + half(1.0);
    u_xlat16_10 = u_xlat16_31 * u_xlat16_31 + half(1.5);
    u_xlat16_0.x = u_xlat16_10 * u_xlat16_0.x;
    u_xlat16_34 = dot(input.TEXCOORD4.xyz, input.TEXCOORD4.xyz);
    u_xlat16_34 = rsqrt(u_xlat16_34);
    u_xlat16_2.xyz = half3(u_xlat16_34) * input.TEXCOORD4.xyz;
    u_xlat16_4.x = dot(u_xlat16_2.xyz, u_xlat16_4.xyz);
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0h, 1.0h);
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_14.x = u_xlat16_31 * u_xlat16_31;
    u_xlat16_10 = u_xlat16_14.x * u_xlat16_14.x + half(-1.0);
    u_xlat16_10 = u_xlat16_4.x * u_xlat16_10 + half(1.00001001);
    u_xlat16_0.x = u_xlat16_10 * u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_14.x / u_xlat16_0.x;
    u_xlat16_4.x = u_xlat16_31 * u_xlat16_14.x;
    u_xlat16_4.x = (-u_xlat16_4.x) * half(0.280000001) + half(1.0);
    u_xlat16_0.x = u_xlat16_0.x + half(-9.99999975e-05);
    u_xlat16_14.x = max(u_xlat16_0.x, half(0.0));
    u_xlat16_14.x = min(u_xlat16_14.x, half(100.0));
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_0.xyz * Globals._Color.xyz;
    u_xlat16_6.xyz = Globals._Color.xyz * u_xlat16_0.xyz + half3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat16_6.xyz = half3(Globals._Metallic) * u_xlat16_6.xyz + half3(0.220916301, 0.220916301, 0.220916301);
    u_xlat16_24 = (-Globals._Metallic) * half(0.779083729) + half(0.779083729);
    u_xlat16_7.xyz = u_xlat16_3.xyz * half3(u_xlat16_24);
    u_xlat16_24 = (-u_xlat16_24) + Globals._Glossiness;
    u_xlat16_24 = u_xlat16_24 + half(1.0);
    u_xlat16_24 = clamp(u_xlat16_24, 0.0h, 1.0h);
    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + half3(u_xlat16_24);
    u_xlat16_14.xyz = u_xlat16_14.xxx * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_14.xyz;
    u_xlat16_2.w = half(1.0);
    u_xlat16_9.x = dot(Globals.unity_SHAr, u_xlat16_2);
    u_xlat16_9.y = dot(Globals.unity_SHAg, u_xlat16_2);
    u_xlat16_9.z = dot(Globals.unity_SHAb, u_xlat16_2);
    u_xlat16_14.xyz = u_xlat16_9.xyz + input.TEXCOORD5.xyz;
    u_xlat16_14.xyz = max(u_xlat16_14.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_0.xyz = log2(u_xlat16_14.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * half3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * half3(1.05499995, 1.05499995, 1.05499995) + half3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_0.xyz = max(u_xlat16_0.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_30 = _OcclusionMap.sample(sampler_OcclusionMap, input.TEXCOORD0.xy).y;
    u_xlat16_14.x = (-Globals._OcclusionStrength) + half(1.0);
    u_xlat16_14.x = u_xlat16_30 * Globals._OcclusionStrength + u_xlat16_14.x;
    u_xlat16_9.xyz = u_xlat16_0.xyz * u_xlat16_14.xxx;
    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_9.xyz;
    u_xlat16_24 = dot(u_xlat16_2.xyz, Globals._WorldSpaceLightPos0.xyz);
    u_xlat16_24 = clamp(u_xlat16_24, 0.0h, 1.0h);
    u_xlat16_1.xyz = u_xlat16_1.xyz * half3(u_xlat16_24) + u_xlat16_7.xyz;
    u_xlat16_24 = (-u_xlat16_31) * half(0.699999988) + half(1.70000005);
    u_xlat16_31 = u_xlat16_31 * u_xlat16_24;
    u_xlat16_31 = u_xlat16_31 * half(6.0);
    u_xlat16_24 = dot(u_xlat16_5.xyz, u_xlat16_2.xyz);
    u_xlat16_24 = u_xlat16_24 + u_xlat16_24;
    u_xlat16_7.xyz = u_xlat16_2.xyz * (-half3(u_xlat16_24)) + u_xlat16_5.xyz;
    u_xlat16_24 = dot(u_xlat16_2.xyz, (-u_xlat16_5.xyz));
    u_xlat16_24 = clamp(u_xlat16_24, 0.0h, 1.0h);
    u_xlat16_24 = (-u_xlat16_24) + half(1.0);
    u_xlat16_24 = u_xlat16_24 * u_xlat16_24;
    u_xlat16_24 = u_xlat16_24 * u_xlat16_24;
    u_xlat16_5.xyz = half3(u_xlat16_24) * u_xlat16_8.xyz + u_xlat16_6.xyz;
    u_xlat16_0 = unity_SpecCube0.sample(samplerunity_SpecCube0, float3(u_xlat16_7.xyz), level(float(u_xlat16_31)));
    u_xlat16_31 = u_xlat16_0.w + half(-1.0);
    u_xlat16_31 = Globals.unity_SpecCube0_HDR.w * u_xlat16_31 + half(1.0);
    u_xlat16_31 = u_xlat16_31 * Globals.unity_SpecCube0_HDR.x;
    u_xlat16_6.xyz = u_xlat16_0.xyz * half3(u_xlat16_31);
    u_xlat16_14.xyz = u_xlat16_14.xxx * u_xlat16_6.xyz;
    u_xlat16_4.xyz = u_xlat16_14.xyz * u_xlat16_4.xxx;
    output.SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_5.xyz + u_xlat16_1.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}


-- Hardware tier variant: Tier 3
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"
Uses vertex data channel "TexCoord0"

Constant Buffer "Globals" (274 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 48
  Matrix4x4 unity_WorldToObject at 112
  Matrix4x4 unity_MatrixVP at 176
  Vector3 _WorldSpaceCameraPos at 0
  VectorHalf4 unity_SHBr at 16
  VectorHalf4 unity_SHBg at 24
  VectorHalf4 unity_SHBb at 32
  VectorHalf4 unity_SHC at 40
  Vector4 _MainTex_ST at 240
  Vector4 _DetailAlbedoMap_ST at 256
  ScalarHalf _UVSec at 272
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    float4 _DetailAlbedoMap_ST;
    half _UVSec;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    half3 NORMAL0 [[ attribute(1) ]] ;
    float2 TEXCOORD0 [[ attribute(2) ]] ;
    float2 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    half4 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float2 TEXCOORD6 [[ user(TEXCOORD6) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    half4 u_xlat16_0;
    bool u_xlatb0;
    float4 u_xlat1;
    half u_xlat16_2;
    half3 u_xlat16_3;
    float u_xlat13;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0] * input.POSITION0.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2] * input.POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    output.mtl_Position = Globals.hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlatb0 = Globals._UVSec==half(0.0);
    u_xlat0.xy = (bool(u_xlatb0)) ? input.TEXCOORD0.xy : input.TEXCOORD1.xy;
    output.TEXCOORD0.zw = u_xlat0.xy * Globals._DetailAlbedoMap_ST.xy + Globals._DetailAlbedoMap_ST.zw;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy * Globals._MainTex_ST.xy + Globals._MainTex_ST.zw;
    u_xlat0.xyz = input.POSITION0.yyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * input.POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * input.POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyw = Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * input.POSITION0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyw + (-Globals._WorldSpaceCameraPos.xyzx.xyz);
    output.TEXCOORD1.xyz = half3(u_xlat1.xyz);
    output.TEXCOORD2.w = half(u_xlat0.x);
    output.TEXCOORD2.xyz = half3(0.0, 0.0, 0.0);
    output.TEXCOORD3.w = half(u_xlat0.y);
    output.TEXCOORD3.xyz = half3(0.0, 0.0, 0.0);
    u_xlat1.x = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = rsqrt(u_xlat13);
    u_xlat0.xyz = float3(u_xlat13) * u_xlat1.xyz;
    output.TEXCOORD4 = half4(u_xlat0);
    u_xlat16_2 = half(u_xlat0.y * u_xlat0.y);
    u_xlat16_2 = half(u_xlat0.x * u_xlat0.x + (-float(u_xlat16_2)));
    u_xlat16_0 = half4(u_xlat0.yzzx * u_xlat0.xyzz);
    u_xlat16_3.x = dot(Globals.unity_SHBr, u_xlat16_0);
    u_xlat16_3.y = dot(Globals.unity_SHBg, u_xlat16_0);
    u_xlat16_3.z = dot(Globals.unity_SHBb, u_xlat16_0);
    output.TEXCOORD5.xyz = Globals.unity_SHC.xyz * half3(u_xlat16_2) + u_xlat16_3.xyz;
    output.TEXCOORD5.w = half(0.0);
    output.TEXCOORD6.xy = float2(0.0, 0.0);
    return output;
}


-- Hardware tier variant: Tier 3
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0 sampler slot 1
Set 2D Texture "_OcclusionMap" to slot 1 sampler slot 2
Set CUBE Texture "unity_SpecCube0" to slot 2 sampler slot 0
Set 2D Texture "_ShadowMapTexture" to slot 3

Constant Buffer "Globals" (430 bytes) on slot 0 {
  Matrix4x4 unity_WorldToShadow[4] at 48
  Matrix4x4 unity_MatrixV at 336
  Vector3 _WorldSpaceCameraPos at 0
  VectorHalf4 _WorldSpaceLightPos0 at 16
  VectorHalf4 unity_SHAr at 24
  VectorHalf4 unity_SHAg at 32
  VectorHalf4 unity_SHAb at 40
  VectorHalf4 _LightShadowData at 304
  Vector4 unity_ShadowFadeCenterAndType at 320
  VectorHalf4 unity_SpecCube0_HDR at 400
  VectorHalf4 _LightColor0 at 408
  VectorHalf4 _Color at 416
  ScalarHalf _Metallic at 424
  ScalarHalf _Glossiness at 426
  ScalarHalf _OcclusionStrength at 428
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    half4 _WorldSpaceLightPos0;
    half4 unity_SHAr;
    half4 unity_SHAg;
    half4 unity_SHAb;
    float4 hlslcc_mtx4x4unity_WorldToShadow[16];
    half4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    half4 unity_SpecCube0_HDR;
    half4 _LightColor0;
    half4 _Color;
    half _Metallic;
    half _Glossiness;
    half _OcclusionStrength;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    half4 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(0) ]];
};

constexpr sampler _mtl_xl_shadow_sampler(address::clamp_to_edge, filter::linear, compare_func::greater_equal);
fragment Mtl_FragmentOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    sampler samplerunity_SpecCube0 [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_OcclusionMap [[ sampler (2) ]],
    sampler sampler_ShadowMapTexture [[ sampler (3) ]],
    texture2d<half, access::sample > _MainTex [[ texture (0) ]] ,
    texture2d<half, access::sample > _OcclusionMap [[ texture (1) ]] ,
    texturecube<half, access::sample > unity_SpecCube0 [[ texture (2) ]] ,
    depth2d<float, access::sample > _ShadowMapTexture [[ texture (3) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half4 u_xlat16_0;
    half3 u_xlat16_1;
    float3 u_xlat2;
    half4 u_xlat16_2;
    float3 u_xlat3;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    half3 u_xlat16_6;
    half3 u_xlat16_7;
    half3 u_xlat16_8;
    half3 u_xlat16_9;
    float3 u_xlat10;
    half u_xlat16_10;
    half3 u_xlat16_14;
    half u_xlat16_24;
    float u_xlat30;
    half u_xlat16_30;
    half u_xlat16_31;
    half u_xlat16_34;
    u_xlat0.x = Globals.hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat0.y = Globals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.z = Globals.hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat16_1.x = input.TEXCOORD2.w;
    u_xlat16_1.y = input.TEXCOORD3.w;
    u_xlat16_1.z = input.TEXCOORD4.w;
    u_xlat2.xyz = (-float3(u_xlat16_1.xyz)) + Globals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat3.xyz = float3(u_xlat16_1.xyz) + (-Globals.unity_ShadowFadeCenterAndType.xyz);
    u_xlat30 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat30 = sqrt(u_xlat30);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat10.x = (-u_xlat0.x) + u_xlat30;
    u_xlat0.x = Globals.unity_ShadowFadeCenterAndType.w * u_xlat10.x + u_xlat0.x;
    u_xlat0.x = u_xlat0.x * float(Globals._LightShadowData.z) + float(Globals._LightShadowData.w);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat10.xyz = float3(input.TEXCOORD3.www) * Globals.hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
    u_xlat10.xyz = Globals.hlslcc_mtx4x4unity_WorldToShadow[0].xyz * float3(input.TEXCOORD2.www) + u_xlat10.xyz;
    u_xlat10.xyz = Globals.hlslcc_mtx4x4unity_WorldToShadow[2].xyz * float3(input.TEXCOORD4.www) + u_xlat10.xyz;
    u_xlat10.xyz = u_xlat10.xyz + Globals.hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
    u_xlat16_10 = _ShadowMapTexture.sample_compare(_mtl_xl_shadow_sampler, u_xlat10.xy, saturate(u_xlat10.z), level(0.0));
    u_xlat16_1.x = (-Globals._LightShadowData.x) + half(1.0);
    u_xlat16_1.x = u_xlat16_10 * u_xlat16_1.x + Globals._LightShadowData.x;
    u_xlat16_1.x = half(u_xlat0.x + float(u_xlat16_1.x));
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0h, 1.0h);
    u_xlat16_1.xyz = u_xlat16_1.xxx * Globals._LightColor0.xyz;
    u_xlat16_31 = dot(input.TEXCOORD1.xyz, input.TEXCOORD1.xyz);
    u_xlat16_31 = rsqrt(u_xlat16_31);
    u_xlat16_4.xyz = (-input.TEXCOORD1.xyz) * half3(u_xlat16_31) + Globals._WorldSpaceLightPos0.xyz;
    u_xlat16_5.xyz = half3(u_xlat16_31) * input.TEXCOORD1.xyz;
    u_xlat16_31 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
    u_xlat16_0.x = max(u_xlat16_31, half(0.00100000005));
    u_xlat16_31 = rsqrt(u_xlat16_0.x);
    u_xlat16_4.xyz = half3(u_xlat16_31) * u_xlat16_4.xyz;
    u_xlat16_31 = dot(Globals._WorldSpaceLightPos0.xyz, u_xlat16_4.xyz);
    u_xlat16_31 = clamp(u_xlat16_31, 0.0h, 1.0h);
    u_xlat16_0.x = max(u_xlat16_31, half(0.319999993));
    u_xlat16_31 = (-Globals._Glossiness) + half(1.0);
    u_xlat16_10 = u_xlat16_31 * u_xlat16_31 + half(1.5);
    u_xlat16_0.x = u_xlat16_10 * u_xlat16_0.x;
    u_xlat16_34 = dot(input.TEXCOORD4.xyz, input.TEXCOORD4.xyz);
    u_xlat16_34 = rsqrt(u_xlat16_34);
    u_xlat16_2.xyz = half3(u_xlat16_34) * input.TEXCOORD4.xyz;
    u_xlat16_4.x = dot(u_xlat16_2.xyz, u_xlat16_4.xyz);
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0h, 1.0h);
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_14.x = u_xlat16_31 * u_xlat16_31;
    u_xlat16_10 = u_xlat16_14.x * u_xlat16_14.x + half(-1.0);
    u_xlat16_10 = u_xlat16_4.x * u_xlat16_10 + half(1.00001001);
    u_xlat16_0.x = u_xlat16_10 * u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_14.x / u_xlat16_0.x;
    u_xlat16_4.x = u_xlat16_31 * u_xlat16_14.x;
    u_xlat16_4.x = (-u_xlat16_4.x) * half(0.280000001) + half(1.0);
    u_xlat16_0.x = u_xlat16_0.x + half(-9.99999975e-05);
    u_xlat16_14.x = max(u_xlat16_0.x, half(0.0));
    u_xlat16_14.x = min(u_xlat16_14.x, half(100.0));
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_0.xyz * Globals._Color.xyz;
    u_xlat16_6.xyz = Globals._Color.xyz * u_xlat16_0.xyz + half3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat16_6.xyz = half3(Globals._Metallic) * u_xlat16_6.xyz + half3(0.220916301, 0.220916301, 0.220916301);
    u_xlat16_24 = (-Globals._Metallic) * half(0.779083729) + half(0.779083729);
    u_xlat16_7.xyz = u_xlat16_3.xyz * half3(u_xlat16_24);
    u_xlat16_24 = (-u_xlat16_24) + Globals._Glossiness;
    u_xlat16_24 = u_xlat16_24 + half(1.0);
    u_xlat16_24 = clamp(u_xlat16_24, 0.0h, 1.0h);
    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + half3(u_xlat16_24);
    u_xlat16_14.xyz = u_xlat16_14.xxx * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_14.xyz;
    u_xlat16_2.w = half(1.0);
    u_xlat16_9.x = dot(Globals.unity_SHAr, u_xlat16_2);
    u_xlat16_9.y = dot(Globals.unity_SHAg, u_xlat16_2);
    u_xlat16_9.z = dot(Globals.unity_SHAb, u_xlat16_2);
    u_xlat16_14.xyz = u_xlat16_9.xyz + input.TEXCOORD5.xyz;
    u_xlat16_14.xyz = max(u_xlat16_14.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_0.xyz = log2(u_xlat16_14.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * half3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * half3(1.05499995, 1.05499995, 1.05499995) + half3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_0.xyz = max(u_xlat16_0.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_30 = _OcclusionMap.sample(sampler_OcclusionMap, input.TEXCOORD0.xy).y;
    u_xlat16_14.x = (-Globals._OcclusionStrength) + half(1.0);
    u_xlat16_14.x = u_xlat16_30 * Globals._OcclusionStrength + u_xlat16_14.x;
    u_xlat16_9.xyz = u_xlat16_0.xyz * u_xlat16_14.xxx;
    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_9.xyz;
    u_xlat16_24 = dot(u_xlat16_2.xyz, Globals._WorldSpaceLightPos0.xyz);
    u_xlat16_24 = clamp(u_xlat16_24, 0.0h, 1.0h);
    u_xlat16_1.xyz = u_xlat16_1.xyz * half3(u_xlat16_24) + u_xlat16_7.xyz;
    u_xlat16_24 = (-u_xlat16_31) * half(0.699999988) + half(1.70000005);
    u_xlat16_31 = u_xlat16_31 * u_xlat16_24;
    u_xlat16_31 = u_xlat16_31 * half(6.0);
    u_xlat16_24 = dot(u_xlat16_5.xyz, u_xlat16_2.xyz);
    u_xlat16_24 = u_xlat16_24 + u_xlat16_24;
    u_xlat16_7.xyz = u_xlat16_2.xyz * (-half3(u_xlat16_24)) + u_xlat16_5.xyz;
    u_xlat16_24 = dot(u_xlat16_2.xyz, (-u_xlat16_5.xyz));
    u_xlat16_24 = clamp(u_xlat16_24, 0.0h, 1.0h);
    u_xlat16_24 = (-u_xlat16_24) + half(1.0);
    u_xlat16_24 = u_xlat16_24 * u_xlat16_24;
    u_xlat16_24 = u_xlat16_24 * u_xlat16_24;
    u_xlat16_5.xyz = half3(u_xlat16_24) * u_xlat16_8.xyz + u_xlat16_6.xyz;
    u_xlat16_0 = unity_SpecCube0.sample(samplerunity_SpecCube0, float3(u_xlat16_7.xyz), level(float(u_xlat16_31)));
    u_xlat16_31 = u_xlat16_0.w + half(-1.0);
    u_xlat16_31 = Globals.unity_SpecCube0_HDR.w * u_xlat16_31 + half(1.0);
    u_xlat16_31 = u_xlat16_31 * Globals.unity_SpecCube0_HDR.x;
    u_xlat16_6.xyz = u_xlat16_0.xyz * half3(u_xlat16_31);
    u_xlat16_14.xyz = u_xlat16_14.xxx * u_xlat16_6.xyz;
    u_xlat16_4.xyz = u_xlat16_14.xyz * u_xlat16_4.xxx;
    output.SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_5.xyz + u_xlat16_1.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}


//////////////////////////////////////////////////////
Keywords set in this variant: DIRECTIONAL _EMISSION 
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0 sampler slot 2
Set 2D Texture "_OcclusionMap" to slot 1 sampler slot 3
Set 2D Texture "unity_NHxRoughness" to slot 2 sampler slot 1
Set 2D Texture "_EmissionMap" to slot 3 sampler slot 4
Set CUBE Texture "unity_SpecCube0" to slot 4 sampler slot 0

Constant Buffer "Globals" (48 bytes) on slot 0 {
  VectorHalf4 _WorldSpaceLightPos0 at 0
  VectorHalf4 unity_SpecCube0_HDR at 8
  VectorHalf4 _LightColor0 at 16
  VectorHalf4 _Color at 24
  ScalarHalf _Metallic at 32
  ScalarHalf _Glossiness at 34
  VectorHalf4 _EmissionColor at 40
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    half4 _WorldSpaceLightPos0;
    half4 unity_SpecCube0_HDR;
    half4 _LightColor0;
    half4 _Color;
    half _Metallic;
    half _Glossiness;
    half4 _EmissionColor;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    half4 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(0) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    sampler samplerunity_SpecCube0 [[ sampler (0) ]],
    sampler samplerunity_NHxRoughness [[ sampler (1) ]],
    sampler sampler_MainTex [[ sampler (2) ]],
    sampler sampler_OcclusionMap [[ sampler (3) ]],
    sampler sampler_EmissionMap [[ sampler (4) ]],
    texture2d<half, access::sample > _MainTex [[ texture (0) ]] ,
    texture2d<half, access::sample > _OcclusionMap [[ texture (1) ]] ,
    texture2d<half, access::sample > unity_NHxRoughness [[ texture (2) ]] ,
    texture2d<half, access::sample > _EmissionMap [[ texture (3) ]] ,
    texturecube<half, access::sample > unity_SpecCube0 [[ texture (4) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half4 u_xlat16_0;
    half3 u_xlat16_1;
    half4 u_xlat16_2;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    half3 u_xlat16_6;
    half3 u_xlat16_7;
    half3 u_xlat16_8;
    half u_xlat16_28;
    u_xlat16_0.xw = (-half2(Globals._Glossiness)) + half2(1.0, 1.0);
    u_xlat16_1.x = (-u_xlat16_0.x) * half(0.699999988) + half(1.70000005);
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_1.x;
    u_xlat16_0.x = u_xlat16_0.x * half(6.0);
    u_xlat16_1.x = dot(input.TEXCOORD4.xyz, input.TEXCOORD4.xyz);
    u_xlat16_1.x = rsqrt(u_xlat16_1.x);
    u_xlat16_1.xyz = u_xlat16_1.xxx * input.TEXCOORD4.xyz;
    u_xlat16_28 = dot(input.TEXCOORD1.xyz, u_xlat16_1.xyz);
    u_xlat16_28 = u_xlat16_28 + u_xlat16_28;
    u_xlat16_2.xyz = u_xlat16_1.xyz * (-half3(u_xlat16_28)) + input.TEXCOORD1.xyz;
    u_xlat16_2 = unity_SpecCube0.sample(samplerunity_SpecCube0, float3(u_xlat16_2.xyz), level(float(u_xlat16_0.x)));
    u_xlat16_0.x = u_xlat16_2.w + half(-1.0);
    u_xlat16_0.x = Globals.unity_SpecCube0_HDR.w * u_xlat16_0.x + half(1.0);
    u_xlat16_0.x = u_xlat16_0.x * Globals.unity_SpecCube0_HDR.x;
    u_xlat16_3.xyz = u_xlat16_2.xyz * u_xlat16_0.xxx;
    u_xlat16_4.x = _OcclusionMap.sample(sampler_OcclusionMap, input.TEXCOORD0.xy).y;
    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_4.xxx;
    u_xlat16_5.xyz = u_xlat16_4.xxx * input.TEXCOORD5.xyz;
    u_xlat16_0.x = dot((-input.TEXCOORD1.xyz), u_xlat16_1.xyz);
    u_xlat16_28 = u_xlat16_0.x + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x;
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0h, 1.0h);
    u_xlat16_6.y = (-u_xlat16_0.x) + half(1.0);
    u_xlat16_7.xyz = u_xlat16_1.xyz * (-half3(u_xlat16_28)) + (-input.TEXCOORD1.xyz);
    u_xlat16_0.x = dot(u_xlat16_1.xyz, Globals._WorldSpaceLightPos0.xyz);
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0h, 1.0h);
    u_xlat16_1.xyz = u_xlat16_0.xxx * Globals._LightColor0.xyz;
    u_xlat16_6.x = dot(u_xlat16_7.xyz, Globals._WorldSpaceLightPos0.xyz);
    u_xlat16_6.xy = u_xlat16_6.xy * u_xlat16_6.xy;
    u_xlat16_0.yz = u_xlat16_6.xy * u_xlat16_6.xy;
    u_xlat16_0.x = (-Globals._Metallic) * half(0.779083729) + half(0.779083729);
    u_xlat16_28 = (-u_xlat16_0.x) + Globals._Glossiness;
    u_xlat16_28 = u_xlat16_28 + half(1.0);
    u_xlat16_28 = clamp(u_xlat16_28, 0.0h, 1.0h);
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_6.xyz = Globals._Color.xyz * u_xlat16_4.xyz + half3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat16_4.xyz = u_xlat16_4.xyz * Globals._Color.xyz;
    u_xlat16_7.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz;
    u_xlat16_6.xyz = half3(Globals._Metallic) * u_xlat16_6.xyz + half3(0.220916301, 0.220916301, 0.220916301);
    u_xlat16_8.xyz = half3(u_xlat16_28) + (-u_xlat16_6.xyz);
    u_xlat16_8.xyz = u_xlat16_0.zzz * u_xlat16_8.xyz + u_xlat16_6.xyz;
    u_xlat16_4.x = unity_NHxRoughness.sample(samplerunity_NHxRoughness, float2(u_xlat16_0.yw)).w;
    u_xlat16_4.x = u_xlat16_4.x * half(16.0);
    u_xlat16_0.xyz = u_xlat16_4.xxx * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_8.xyz;
    u_xlat16_3.xyz = u_xlat16_5.xyz * u_xlat16_7.xyz + u_xlat16_3.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz + u_xlat16_3.xyz;
    u_xlat16_4.xyz = _EmissionMap.sample(sampler_EmissionMap, input.TEXCOORD0.xy).xyz;
    output.SV_Target0.xyz = u_xlat16_4.xyz * Globals._EmissionColor.xyz + u_xlat16_0.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}


-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 2
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0 sampler slot 2
Set 2D Texture "_OcclusionMap" to slot 1 sampler slot 3
Set 2D Texture "unity_NHxRoughness" to slot 2 sampler slot 1
Set 2D Texture "_EmissionMap" to slot 3 sampler slot 4
Set CUBE Texture "unity_SpecCube0" to slot 4 sampler slot 0

Constant Buffer "Globals" (48 bytes) on slot 0 {
  VectorHalf4 _WorldSpaceLightPos0 at 0
  VectorHalf4 unity_SpecCube0_HDR at 8
  VectorHalf4 _LightColor0 at 16
  VectorHalf4 _Color at 24
  ScalarHalf _Metallic at 32
  ScalarHalf _Glossiness at 34
  VectorHalf4 _EmissionColor at 40
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    half4 _WorldSpaceLightPos0;
    half4 unity_SpecCube0_HDR;
    half4 _LightColor0;
    half4 _Color;
    half _Metallic;
    half _Glossiness;
    half4 _EmissionColor;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    half4 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(0) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    sampler samplerunity_SpecCube0 [[ sampler (0) ]],
    sampler samplerunity_NHxRoughness [[ sampler (1) ]],
    sampler sampler_MainTex [[ sampler (2) ]],
    sampler sampler_OcclusionMap [[ sampler (3) ]],
    sampler sampler_EmissionMap [[ sampler (4) ]],
    texture2d<half, access::sample > _MainTex [[ texture (0) ]] ,
    texture2d<half, access::sample > _OcclusionMap [[ texture (1) ]] ,
    texture2d<half, access::sample > unity_NHxRoughness [[ texture (2) ]] ,
    texture2d<half, access::sample > _EmissionMap [[ texture (3) ]] ,
    texturecube<half, access::sample > unity_SpecCube0 [[ texture (4) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half4 u_xlat16_0;
    half3 u_xlat16_1;
    half4 u_xlat16_2;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    half3 u_xlat16_6;
    half3 u_xlat16_7;
    half3 u_xlat16_8;
    half u_xlat16_28;
    u_xlat16_0.xw = (-half2(Globals._Glossiness)) + half2(1.0, 1.0);
    u_xlat16_1.x = (-u_xlat16_0.x) * half(0.699999988) + half(1.70000005);
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_1.x;
    u_xlat16_0.x = u_xlat16_0.x * half(6.0);
    u_xlat16_1.x = dot(input.TEXCOORD4.xyz, input.TEXCOORD4.xyz);
    u_xlat16_1.x = rsqrt(u_xlat16_1.x);
    u_xlat16_1.xyz = u_xlat16_1.xxx * input.TEXCOORD4.xyz;
    u_xlat16_28 = dot(input.TEXCOORD1.xyz, u_xlat16_1.xyz);
    u_xlat16_28 = u_xlat16_28 + u_xlat16_28;
    u_xlat16_2.xyz = u_xlat16_1.xyz * (-half3(u_xlat16_28)) + input.TEXCOORD1.xyz;
    u_xlat16_2 = unity_SpecCube0.sample(samplerunity_SpecCube0, float3(u_xlat16_2.xyz), level(float(u_xlat16_0.x)));
    u_xlat16_0.x = u_xlat16_2.w + half(-1.0);
    u_xlat16_0.x = Globals.unity_SpecCube0_HDR.w * u_xlat16_0.x + half(1.0);
    u_xlat16_0.x = u_xlat16_0.x * Globals.unity_SpecCube0_HDR.x;
    u_xlat16_3.xyz = u_xlat16_2.xyz * u_xlat16_0.xxx;
    u_xlat16_4.x = _OcclusionMap.sample(sampler_OcclusionMap, input.TEXCOORD0.xy).y;
    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_4.xxx;
    u_xlat16_5.xyz = u_xlat16_4.xxx * input.TEXCOORD5.xyz;
    u_xlat16_0.x = dot((-input.TEXCOORD1.xyz), u_xlat16_1.xyz);
    u_xlat16_28 = u_xlat16_0.x + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x;
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0h, 1.0h);
    u_xlat16_6.y = (-u_xlat16_0.x) + half(1.0);
    u_xlat16_7.xyz = u_xlat16_1.xyz * (-half3(u_xlat16_28)) + (-input.TEXCOORD1.xyz);
    u_xlat16_0.x = dot(u_xlat16_1.xyz, Globals._WorldSpaceLightPos0.xyz);
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0h, 1.0h);
    u_xlat16_1.xyz = u_xlat16_0.xxx * Globals._LightColor0.xyz;
    u_xlat16_6.x = dot(u_xlat16_7.xyz, Globals._WorldSpaceLightPos0.xyz);
    u_xlat16_6.xy = u_xlat16_6.xy * u_xlat16_6.xy;
    u_xlat16_0.yz = u_xlat16_6.xy * u_xlat16_6.xy;
    u_xlat16_0.x = (-Globals._Metallic) * half(0.779083729) + half(0.779083729);
    u_xlat16_28 = (-u_xlat16_0.x) + Globals._Glossiness;
    u_xlat16_28 = u_xlat16_28 + half(1.0);
    u_xlat16_28 = clamp(u_xlat16_28, 0.0h, 1.0h);
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_6.xyz = Globals._Color.xyz * u_xlat16_4.xyz + half3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat16_4.xyz = u_xlat16_4.xyz * Globals._Color.xyz;
    u_xlat16_7.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz;
    u_xlat16_6.xyz = half3(Globals._Metallic) * u_xlat16_6.xyz + half3(0.220916301, 0.220916301, 0.220916301);
    u_xlat16_8.xyz = half3(u_xlat16_28) + (-u_xlat16_6.xyz);
    u_xlat16_8.xyz = u_xlat16_0.zzz * u_xlat16_8.xyz + u_xlat16_6.xyz;
    u_xlat16_4.x = unity_NHxRoughness.sample(samplerunity_NHxRoughness, float2(u_xlat16_0.yw)).w;
    u_xlat16_4.x = u_xlat16_4.x * half(16.0);
    u_xlat16_0.xyz = u_xlat16_4.xxx * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_8.xyz;
    u_xlat16_3.xyz = u_xlat16_5.xyz * u_xlat16_7.xyz + u_xlat16_3.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz + u_xlat16_3.xyz;
    u_xlat16_4.xyz = _EmissionMap.sample(sampler_EmissionMap, input.TEXCOORD0.xy).xyz;
    output.SV_Target0.xyz = u_xlat16_4.xyz * Globals._EmissionColor.xyz + u_xlat16_0.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}


-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 3
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0 sampler slot 2
Set 2D Texture "_OcclusionMap" to slot 1 sampler slot 3
Set 2D Texture "unity_NHxRoughness" to slot 2 sampler slot 1
Set 2D Texture "_EmissionMap" to slot 3 sampler slot 4
Set CUBE Texture "unity_SpecCube0" to slot 4 sampler slot 0

Constant Buffer "Globals" (48 bytes) on slot 0 {
  VectorHalf4 _WorldSpaceLightPos0 at 0
  VectorHalf4 unity_SpecCube0_HDR at 8
  VectorHalf4 _LightColor0 at 16
  VectorHalf4 _Color at 24
  ScalarHalf _Metallic at 32
  ScalarHalf _Glossiness at 34
  VectorHalf4 _EmissionColor at 40
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    half4 _WorldSpaceLightPos0;
    half4 unity_SpecCube0_HDR;
    half4 _LightColor0;
    half4 _Color;
    half _Metallic;
    half _Glossiness;
    half4 _EmissionColor;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    half4 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(0) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    sampler samplerunity_SpecCube0 [[ sampler (0) ]],
    sampler samplerunity_NHxRoughness [[ sampler (1) ]],
    sampler sampler_MainTex [[ sampler (2) ]],
    sampler sampler_OcclusionMap [[ sampler (3) ]],
    sampler sampler_EmissionMap [[ sampler (4) ]],
    texture2d<half, access::sample > _MainTex [[ texture (0) ]] ,
    texture2d<half, access::sample > _OcclusionMap [[ texture (1) ]] ,
    texture2d<half, access::sample > unity_NHxRoughness [[ texture (2) ]] ,
    texture2d<half, access::sample > _EmissionMap [[ texture (3) ]] ,
    texturecube<half, access::sample > unity_SpecCube0 [[ texture (4) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half4 u_xlat16_0;
    half3 u_xlat16_1;
    half4 u_xlat16_2;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    half3 u_xlat16_6;
    half3 u_xlat16_7;
    half3 u_xlat16_8;
    half u_xlat16_28;
    u_xlat16_0.xw = (-half2(Globals._Glossiness)) + half2(1.0, 1.0);
    u_xlat16_1.x = (-u_xlat16_0.x) * half(0.699999988) + half(1.70000005);
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_1.x;
    u_xlat16_0.x = u_xlat16_0.x * half(6.0);
    u_xlat16_1.x = dot(input.TEXCOORD4.xyz, input.TEXCOORD4.xyz);
    u_xlat16_1.x = rsqrt(u_xlat16_1.x);
    u_xlat16_1.xyz = u_xlat16_1.xxx * input.TEXCOORD4.xyz;
    u_xlat16_28 = dot(input.TEXCOORD1.xyz, u_xlat16_1.xyz);
    u_xlat16_28 = u_xlat16_28 + u_xlat16_28;
    u_xlat16_2.xyz = u_xlat16_1.xyz * (-half3(u_xlat16_28)) + input.TEXCOORD1.xyz;
    u_xlat16_2 = unity_SpecCube0.sample(samplerunity_SpecCube0, float3(u_xlat16_2.xyz), level(float(u_xlat16_0.x)));
    u_xlat16_0.x = u_xlat16_2.w + half(-1.0);
    u_xlat16_0.x = Globals.unity_SpecCube0_HDR.w * u_xlat16_0.x + half(1.0);
    u_xlat16_0.x = u_xlat16_0.x * Globals.unity_SpecCube0_HDR.x;
    u_xlat16_3.xyz = u_xlat16_2.xyz * u_xlat16_0.xxx;
    u_xlat16_4.x = _OcclusionMap.sample(sampler_OcclusionMap, input.TEXCOORD0.xy).y;
    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_4.xxx;
    u_xlat16_5.xyz = u_xlat16_4.xxx * input.TEXCOORD5.xyz;
    u_xlat16_0.x = dot((-input.TEXCOORD1.xyz), u_xlat16_1.xyz);
    u_xlat16_28 = u_xlat16_0.x + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x;
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0h, 1.0h);
    u_xlat16_6.y = (-u_xlat16_0.x) + half(1.0);
    u_xlat16_7.xyz = u_xlat16_1.xyz * (-half3(u_xlat16_28)) + (-input.TEXCOORD1.xyz);
    u_xlat16_0.x = dot(u_xlat16_1.xyz, Globals._WorldSpaceLightPos0.xyz);
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0h, 1.0h);
    u_xlat16_1.xyz = u_xlat16_0.xxx * Globals._LightColor0.xyz;
    u_xlat16_6.x = dot(u_xlat16_7.xyz, Globals._WorldSpaceLightPos0.xyz);
    u_xlat16_6.xy = u_xlat16_6.xy * u_xlat16_6.xy;
    u_xlat16_0.yz = u_xlat16_6.xy * u_xlat16_6.xy;
    u_xlat16_0.x = (-Globals._Metallic) * half(0.779083729) + half(0.779083729);
    u_xlat16_28 = (-u_xlat16_0.x) + Globals._Glossiness;
    u_xlat16_28 = u_xlat16_28 + half(1.0);
    u_xlat16_28 = clamp(u_xlat16_28, 0.0h, 1.0h);
    u_xlat16_4.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_6.xyz = Globals._Color.xyz * u_xlat16_4.xyz + half3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat16_4.xyz = u_xlat16_4.xyz * Globals._Color.xyz;
    u_xlat16_7.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz;
    u_xlat16_6.xyz = half3(Globals._Metallic) * u_xlat16_6.xyz + half3(0.220916301, 0.220916301, 0.220916301);
    u_xlat16_8.xyz = half3(u_xlat16_28) + (-u_xlat16_6.xyz);
    u_xlat16_8.xyz = u_xlat16_0.zzz * u_xlat16_8.xyz + u_xlat16_6.xyz;
    u_xlat16_4.x = unity_NHxRoughness.sample(samplerunity_NHxRoughness, float2(u_xlat16_0.yw)).w;
    u_xlat16_4.x = u_xlat16_4.x * half(16.0);
    u_xlat16_0.xyz = u_xlat16_4.xxx * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_8.xyz;
    u_xlat16_3.xyz = u_xlat16_5.xyz * u_xlat16_7.xyz + u_xlat16_3.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz + u_xlat16_3.xyz;
    u_xlat16_4.xyz = _EmissionMap.sample(sampler_EmissionMap, input.TEXCOORD0.xy).xyz;
    output.SV_Target0.xyz = u_xlat16_4.xyz * Globals._EmissionColor.xyz + u_xlat16_0.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}


//////////////////////////////////////////////////////
Keywords set in this variant: DIRECTIONAL _EMISSION VERTEXLIGHT_ON 
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"
Uses vertex data channel "TexCoord0"

Constant Buffer "Globals" (418 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 192
  Matrix4x4 unity_WorldToObject at 256
  Matrix4x4 unity_MatrixVP at 320
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 unity_4LightPosX0 at 16
  Vector4 unity_4LightPosY0 at 32
  Vector4 unity_4LightPosZ0 at 48
  VectorHalf4 unity_4LightAtten0 at 64
  VectorHalf4 unity_LightColor[8] at 72
  VectorHalf4 unity_SHAr at 136
  VectorHalf4 unity_SHAg at 144
  VectorHalf4 unity_SHAb at 152
  VectorHalf4 unity_SHBr at 160
  VectorHalf4 unity_SHBg at 168
  VectorHalf4 unity_SHBb at 176
  VectorHalf4 unity_SHC at 184
  Vector4 _MainTex_ST at 384
  Vector4 _DetailAlbedoMap_ST at 400
  ScalarHalf _UVSec at 416
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 unity_4LightPosX0;
    float4 unity_4LightPosY0;
    float4 unity_4LightPosZ0;
    half4 unity_4LightAtten0;
    half4 unity_LightColor[8];
    half4 unity_SHAr;
    half4 unity_SHAg;
    half4 unity_SHAb;
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    float4 _DetailAlbedoMap_ST;
    half _UVSec;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    half3 NORMAL0 [[ attribute(1) ]] ;
    float2 TEXCOORD0 [[ attribute(2) ]] ;
    float2 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    half4 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float2 TEXCOORD6 [[ user(TEXCOORD6) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool u_xlatb0;
    float4 u_xlat1;
    float4 u_xlat2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    float4 u_xlat4;
    half4 u_xlat16_4;
    float4 u_xlat5;
    half3 u_xlat16_5;
    float3 u_xlat6;
    float u_xlat21;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0] * input.POSITION0.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2] * input.POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    output.mtl_Position = Globals.hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlatb0 = Globals._UVSec==half(0.0);
    u_xlat0.xy = (bool(u_xlatb0)) ? input.TEXCOORD0.xy : input.TEXCOORD1.xy;
    output.TEXCOORD0.zw = u_xlat0.xy * Globals._DetailAlbedoMap_ST.xy + Globals._DetailAlbedoMap_ST.zw;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy * Globals._MainTex_ST.xy + Globals._MainTex_ST.zw;
    u_xlat0.xyz = input.POSITION0.yyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * input.POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * input.POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * input.POSITION0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-Globals._WorldSpaceCameraPos.xyzx.xyz);
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = rsqrt(u_xlat21);
    u_xlat1.xyz = float3(u_xlat21) * u_xlat1.xyz;
    output.TEXCOORD1.xyz = half3(u_xlat1.xyz);
    output.TEXCOORD2.xyz = half3(0.0, 0.0, 0.0);
    output.TEXCOORD2.w = half(u_xlat0.x);
    output.TEXCOORD3.xyz = half3(0.0, 0.0, 0.0);
    output.TEXCOORD3.w = half(u_xlat0.y);
    u_xlat1.w = u_xlat0.z;
    u_xlat2.x = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = rsqrt(u_xlat21);
    u_xlat2 = float4(u_xlat21) * u_xlat2.xyzz;
    u_xlat1.xyz = u_xlat2.xyw;
    output.TEXCOORD4 = half4(u_xlat1);
    u_xlat16_3.x = half(u_xlat1.y * u_xlat1.y);
    u_xlat16_3.x = half(u_xlat1.x * u_xlat1.x + (-float(u_xlat16_3.x)));
    u_xlat16_4 = half4(u_xlat2.ywzx * u_xlat2);
    u_xlat16_5.x = dot(Globals.unity_SHBr, u_xlat16_4);
    u_xlat16_5.y = dot(Globals.unity_SHBg, u_xlat16_4);
    u_xlat16_5.z = dot(Globals.unity_SHBb, u_xlat16_4);
    u_xlat16_3.xyz = Globals.unity_SHC.xyz * u_xlat16_3.xxx + u_xlat16_5.xyz;
    u_xlat1.w = 1.0;
    u_xlat16_4.x = half(dot(float4(Globals.unity_SHAr), u_xlat1));
    u_xlat16_4.y = half(dot(float4(Globals.unity_SHAg), u_xlat1));
    u_xlat16_4.z = half(dot(float4(Globals.unity_SHAb), u_xlat1));
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, half3(0.0, 0.0, 0.0));
    u_xlat6.xyz = log2(float3(u_xlat16_3.xyz));
    u_xlat6.xyz = u_xlat6.xyz * float3(0.416666657, 0.416666657, 0.416666657);
    u_xlat6.xyz = exp2(u_xlat6.xyz);
    u_xlat6.xyz = u_xlat6.xyz * float3(1.05499995, 1.05499995, 1.05499995) + float3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat6.xyz = max(u_xlat6.xyz, float3(0.0, 0.0, 0.0));
    u_xlat3 = (-u_xlat0.yyyy) + Globals.unity_4LightPosY0;
    u_xlat4 = u_xlat1.yyyy * u_xlat3;
    u_xlat3 = u_xlat3 * u_xlat3;
    u_xlat5 = (-u_xlat0.xxxx) + Globals.unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + Globals.unity_4LightPosZ0;
    u_xlat1 = u_xlat5 * u_xlat1.xxxx + u_xlat4;
    u_xlat1 = u_xlat0 * u_xlat2.wwzw + u_xlat1;
    u_xlat2 = u_xlat5 * u_xlat5 + u_xlat3;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
    u_xlat0 = max(u_xlat0, float4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat2 = rsqrt(u_xlat0);
    u_xlat0 = u_xlat0 * float4(Globals.unity_4LightAtten0) + float4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = float4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, float4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * float3(Globals.unity_LightColor[1].xyz);
    u_xlat1.xyz = float3(Globals.unity_LightColor[0].xyz) * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = float3(Globals.unity_LightColor[2].xyz) * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = float3(Globals.unity_LightColor[3].xyz) * u_xlat0.www + u_xlat0.xyz;
    output.TEXCOORD5.xyz = half3(u_xlat6.xyz + u_xlat0.xyz);
    output.TEXCOORD5.w = half(0.0);
    output.TEXCOORD6.xy = float2(0.0, 0.0);
    return output;
}


-- Fragment shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 2
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"
Uses vertex data channel "TexCoord0"

Constant Buffer "Globals" (418 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 192
  Matrix4x4 unity_WorldToObject at 256
  Matrix4x4 unity_MatrixVP at 320
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 unity_4LightPosX0 at 16
  Vector4 unity_4LightPosY0 at 32
  Vector4 unity_4LightPosZ0 at 48
  VectorHalf4 unity_4LightAtten0 at 64
  VectorHalf4 unity_LightColor[8] at 72
  VectorHalf4 unity_SHAr at 136
  VectorHalf4 unity_SHAg at 144
  VectorHalf4 unity_SHAb at 152
  VectorHalf4 unity_SHBr at 160
  VectorHalf4 unity_SHBg at 168
  VectorHalf4 unity_SHBb at 176
  VectorHalf4 unity_SHC at 184
  Vector4 _MainTex_ST at 384
  Vector4 _DetailAlbedoMap_ST at 400
  ScalarHalf _UVSec at 416
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 unity_4LightPosX0;
    float4 unity_4LightPosY0;
    float4 unity_4LightPosZ0;
    half4 unity_4LightAtten0;
    half4 unity_LightColor[8];
    half4 unity_SHAr;
    half4 unity_SHAg;
    half4 unity_SHAb;
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    float4 _DetailAlbedoMap_ST;
    half _UVSec;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    half3 NORMAL0 [[ attribute(1) ]] ;
    float2 TEXCOORD0 [[ attribute(2) ]] ;
    float2 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    half4 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float2 TEXCOORD6 [[ user(TEXCOORD6) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool u_xlatb0;
    float4 u_xlat1;
    float4 u_xlat2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    float4 u_xlat4;
    half4 u_xlat16_4;
    float4 u_xlat5;
    half3 u_xlat16_5;
    float3 u_xlat6;
    float u_xlat21;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0] * input.POSITION0.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2] * input.POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    output.mtl_Position = Globals.hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlatb0 = Globals._UVSec==half(0.0);
    u_xlat0.xy = (bool(u_xlatb0)) ? input.TEXCOORD0.xy : input.TEXCOORD1.xy;
    output.TEXCOORD0.zw = u_xlat0.xy * Globals._DetailAlbedoMap_ST.xy + Globals._DetailAlbedoMap_ST.zw;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy * Globals._MainTex_ST.xy + Globals._MainTex_ST.zw;
    u_xlat0.xyz = input.POSITION0.yyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * input.POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * input.POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * input.POSITION0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-Globals._WorldSpaceCameraPos.xyzx.xyz);
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = rsqrt(u_xlat21);
    u_xlat1.xyz = float3(u_xlat21) * u_xlat1.xyz;
    output.TEXCOORD1.xyz = half3(u_xlat1.xyz);
    output.TEXCOORD2.xyz = half3(0.0, 0.0, 0.0);
    output.TEXCOORD2.w = half(u_xlat0.x);
    output.TEXCOORD3.xyz = half3(0.0, 0.0, 0.0);
    output.TEXCOORD3.w = half(u_xlat0.y);
    u_xlat1.w = u_xlat0.z;
    u_xlat2.x = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = rsqrt(u_xlat21);
    u_xlat2 = float4(u_xlat21) * u_xlat2.xyzz;
    u_xlat1.xyz = u_xlat2.xyw;
    output.TEXCOORD4 = half4(u_xlat1);
    u_xlat16_3.x = half(u_xlat1.y * u_xlat1.y);
    u_xlat16_3.x = half(u_xlat1.x * u_xlat1.x + (-float(u_xlat16_3.x)));
    u_xlat16_4 = half4(u_xlat2.ywzx * u_xlat2);
    u_xlat16_5.x = dot(Globals.unity_SHBr, u_xlat16_4);
    u_xlat16_5.y = dot(Globals.unity_SHBg, u_xlat16_4);
    u_xlat16_5.z = dot(Globals.unity_SHBb, u_xlat16_4);
    u_xlat16_3.xyz = Globals.unity_SHC.xyz * u_xlat16_3.xxx + u_xlat16_5.xyz;
    u_xlat1.w = 1.0;
    u_xlat16_4.x = half(dot(float4(Globals.unity_SHAr), u_xlat1));
    u_xlat16_4.y = half(dot(float4(Globals.unity_SHAg), u_xlat1));
    u_xlat16_4.z = half(dot(float4(Globals.unity_SHAb), u_xlat1));
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, half3(0.0, 0.0, 0.0));
    u_xlat6.xyz = log2(float3(u_xlat16_3.xyz));
    u_xlat6.xyz = u_xlat6.xyz * float3(0.416666657, 0.416666657, 0.416666657);
    u_xlat6.xyz = exp2(u_xlat6.xyz);
    u_xlat6.xyz = u_xlat6.xyz * float3(1.05499995, 1.05499995, 1.05499995) + float3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat6.xyz = max(u_xlat6.xyz, float3(0.0, 0.0, 0.0));
    u_xlat3 = (-u_xlat0.yyyy) + Globals.unity_4LightPosY0;
    u_xlat4 = u_xlat1.yyyy * u_xlat3;
    u_xlat3 = u_xlat3 * u_xlat3;
    u_xlat5 = (-u_xlat0.xxxx) + Globals.unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + Globals.unity_4LightPosZ0;
    u_xlat1 = u_xlat5 * u_xlat1.xxxx + u_xlat4;
    u_xlat1 = u_xlat0 * u_xlat2.wwzw + u_xlat1;
    u_xlat2 = u_xlat5 * u_xlat5 + u_xlat3;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
    u_xlat0 = max(u_xlat0, float4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat2 = rsqrt(u_xlat0);
    u_xlat0 = u_xlat0 * float4(Globals.unity_4LightAtten0) + float4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = float4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, float4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * float3(Globals.unity_LightColor[1].xyz);
    u_xlat1.xyz = float3(Globals.unity_LightColor[0].xyz) * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = float3(Globals.unity_LightColor[2].xyz) * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = float3(Globals.unity_LightColor[3].xyz) * u_xlat0.www + u_xlat0.xyz;
    output.TEXCOORD5.xyz = half3(u_xlat6.xyz + u_xlat0.xyz);
    output.TEXCOORD5.w = half(0.0);
    output.TEXCOORD6.xy = float2(0.0, 0.0);
    return output;
}


-- Fragment shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 3
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"
Uses vertex data channel "TexCoord0"

Constant Buffer "Globals" (418 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 192
  Matrix4x4 unity_WorldToObject at 256
  Matrix4x4 unity_MatrixVP at 320
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 unity_4LightPosX0 at 16
  Vector4 unity_4LightPosY0 at 32
  Vector4 unity_4LightPosZ0 at 48
  VectorHalf4 unity_4LightAtten0 at 64
  VectorHalf4 unity_LightColor[8] at 72
  VectorHalf4 unity_SHAr at 136
  VectorHalf4 unity_SHAg at 144
  VectorHalf4 unity_SHAb at 152
  VectorHalf4 unity_SHBr at 160
  VectorHalf4 unity_SHBg at 168
  VectorHalf4 unity_SHBb at 176
  VectorHalf4 unity_SHC at 184
  Vector4 _MainTex_ST at 384
  Vector4 _DetailAlbedoMap_ST at 400
  ScalarHalf _UVSec at 416
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 unity_4LightPosX0;
    float4 unity_4LightPosY0;
    float4 unity_4LightPosZ0;
    half4 unity_4LightAtten0;
    half4 unity_LightColor[8];
    half4 unity_SHAr;
    half4 unity_SHAg;
    half4 unity_SHAb;
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    float4 _DetailAlbedoMap_ST;
    half _UVSec;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    half3 NORMAL0 [[ attribute(1) ]] ;
    float2 TEXCOORD0 [[ attribute(2) ]] ;
    float2 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    half4 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float2 TEXCOORD6 [[ user(TEXCOORD6) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool u_xlatb0;
    float4 u_xlat1;
    float4 u_xlat2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    float4 u_xlat4;
    half4 u_xlat16_4;
    float4 u_xlat5;
    half3 u_xlat16_5;
    float3 u_xlat6;
    float u_xlat21;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0] * input.POSITION0.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2] * input.POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    output.mtl_Position = Globals.hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlatb0 = Globals._UVSec==half(0.0);
    u_xlat0.xy = (bool(u_xlatb0)) ? input.TEXCOORD0.xy : input.TEXCOORD1.xy;
    output.TEXCOORD0.zw = u_xlat0.xy * Globals._DetailAlbedoMap_ST.xy + Globals._DetailAlbedoMap_ST.zw;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy * Globals._MainTex_ST.xy + Globals._MainTex_ST.zw;
    u_xlat0.xyz = input.POSITION0.yyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * input.POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * input.POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * input.POSITION0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-Globals._WorldSpaceCameraPos.xyzx.xyz);
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = rsqrt(u_xlat21);
    u_xlat1.xyz = float3(u_xlat21) * u_xlat1.xyz;
    output.TEXCOORD1.xyz = half3(u_xlat1.xyz);
    output.TEXCOORD2.xyz = half3(0.0, 0.0, 0.0);
    output.TEXCOORD2.w = half(u_xlat0.x);
    output.TEXCOORD3.xyz = half3(0.0, 0.0, 0.0);
    output.TEXCOORD3.w = half(u_xlat0.y);
    u_xlat1.w = u_xlat0.z;
    u_xlat2.x = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = rsqrt(u_xlat21);
    u_xlat2 = float4(u_xlat21) * u_xlat2.xyzz;
    u_xlat1.xyz = u_xlat2.xyw;
    output.TEXCOORD4 = half4(u_xlat1);
    u_xlat16_3.x = half(u_xlat1.y * u_xlat1.y);
    u_xlat16_3.x = half(u_xlat1.x * u_xlat1.x + (-float(u_xlat16_3.x)));
    u_xlat16_4 = half4(u_xlat2.ywzx * u_xlat2);
    u_xlat16_5.x = dot(Globals.unity_SHBr, u_xlat16_4);
    u_xlat16_5.y = dot(Globals.unity_SHBg, u_xlat16_4);
    u_xlat16_5.z = dot(Globals.unity_SHBb, u_xlat16_4);
    u_xlat16_3.xyz = Globals.unity_SHC.xyz * u_xlat16_3.xxx + u_xlat16_5.xyz;
    u_xlat1.w = 1.0;
    u_xlat16_4.x = half(dot(float4(Globals.unity_SHAr), u_xlat1));
    u_xlat16_4.y = half(dot(float4(Globals.unity_SHAg), u_xlat1));
    u_xlat16_4.z = half(dot(float4(Globals.unity_SHAb), u_xlat1));
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, half3(0.0, 0.0, 0.0));
    u_xlat6.xyz = log2(float3(u_xlat16_3.xyz));
    u_xlat6.xyz = u_xlat6.xyz * float3(0.416666657, 0.416666657, 0.416666657);
    u_xlat6.xyz = exp2(u_xlat6.xyz);
    u_xlat6.xyz = u_xlat6.xyz * float3(1.05499995, 1.05499995, 1.05499995) + float3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat6.xyz = max(u_xlat6.xyz, float3(0.0, 0.0, 0.0));
    u_xlat3 = (-u_xlat0.yyyy) + Globals.unity_4LightPosY0;
    u_xlat4 = u_xlat1.yyyy * u_xlat3;
    u_xlat3 = u_xlat3 * u_xlat3;
    u_xlat5 = (-u_xlat0.xxxx) + Globals.unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + Globals.unity_4LightPosZ0;
    u_xlat1 = u_xlat5 * u_xlat1.xxxx + u_xlat4;
    u_xlat1 = u_xlat0 * u_xlat2.wwzw + u_xlat1;
    u_xlat2 = u_xlat5 * u_xlat5 + u_xlat3;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
    u_xlat0 = max(u_xlat0, float4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat2 = rsqrt(u_xlat0);
    u_xlat0 = u_xlat0 * float4(Globals.unity_4LightAtten0) + float4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = float4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, float4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * float3(Globals.unity_LightColor[1].xyz);
    u_xlat1.xyz = float3(Globals.unity_LightColor[0].xyz) * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = float3(Globals.unity_LightColor[2].xyz) * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = float3(Globals.unity_LightColor[3].xyz) * u_xlat0.www + u_xlat0.xyz;
    output.TEXCOORD5.xyz = half3(u_xlat6.xyz + u_xlat0.xyz);
    output.TEXCOORD5.w = half(0.0);
    output.TEXCOORD6.xy = float2(0.0, 0.0);
    return output;
}


-- Fragment shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"
Uses vertex data channel "TexCoord0"

Constant Buffer "Globals" (418 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 192
  Matrix4x4 unity_WorldToObject at 256
  Matrix4x4 unity_MatrixVP at 320
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 unity_4LightPosX0 at 16
  Vector4 unity_4LightPosY0 at 32
  Vector4 unity_4LightPosZ0 at 48
  VectorHalf4 unity_4LightAtten0 at 64
  VectorHalf4 unity_LightColor[8] at 72
  VectorHalf4 unity_SHAr at 136
  VectorHalf4 unity_SHAg at 144
  VectorHalf4 unity_SHAb at 152
  VectorHalf4 unity_SHBr at 160
  VectorHalf4 unity_SHBg at 168
  VectorHalf4 unity_SHBb at 176
  VectorHalf4 unity_SHC at 184
  Vector4 _MainTex_ST at 384
  Vector4 _DetailAlbedoMap_ST at 400
  ScalarHalf _UVSec at 416
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 unity_4LightPosX0;
    float4 unity_4LightPosY0;
    float4 unity_4LightPosZ0;
    half4 unity_4LightAtten0;
    half4 unity_LightColor[8];
    half4 unity_SHAr;
    half4 unity_SHAg;
    half4 unity_SHAb;
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    float4 _DetailAlbedoMap_ST;
    half _UVSec;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    half3 NORMAL0 [[ attribute(1) ]] ;
    float2 TEXCOORD0 [[ attribute(2) ]] ;
    float2 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    half4 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float2 TEXCOORD6 [[ user(TEXCOORD6) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool u_xlatb0;
    float4 u_xlat1;
    float4 u_xlat2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    float4 u_xlat4;
    half4 u_xlat16_4;
    float4 u_xlat5;
    half3 u_xlat16_5;
    float3 u_xlat6;
    float u_xlat21;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0] * input.POSITION0.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2] * input.POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    output.mtl_Position = Globals.hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlatb0 = Globals._UVSec==half(0.0);
    u_xlat0.xy = (bool(u_xlatb0)) ? input.TEXCOORD0.xy : input.TEXCOORD1.xy;
    output.TEXCOORD0.zw = u_xlat0.xy * Globals._DetailAlbedoMap_ST.xy + Globals._DetailAlbedoMap_ST.zw;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy * Globals._MainTex_ST.xy + Globals._MainTex_ST.zw;
    u_xlat0.xyz = input.POSITION0.yyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * input.POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * input.POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * input.POSITION0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-Globals._WorldSpaceCameraPos.xyzx.xyz);
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = rsqrt(u_xlat21);
    u_xlat1.xyz = float3(u_xlat21) * u_xlat1.xyz;
    output.TEXCOORD1.xyz = half3(u_xlat1.xyz);
    output.TEXCOORD2.xyz = half3(0.0, 0.0, 0.0);
    output.TEXCOORD2.w = half(u_xlat0.x);
    output.TEXCOORD3.xyz = half3(0.0, 0.0, 0.0);
    output.TEXCOORD3.w = half(u_xlat0.y);
    u_xlat1.w = u_xlat0.z;
    u_xlat2.x = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = rsqrt(u_xlat21);
    u_xlat2 = float4(u_xlat21) * u_xlat2.xyzz;
    u_xlat1.xyz = u_xlat2.xyw;
    output.TEXCOORD4 = half4(u_xlat1);
    u_xlat16_3.x = half(u_xlat1.y * u_xlat1.y);
    u_xlat16_3.x = half(u_xlat1.x * u_xlat1.x + (-float(u_xlat16_3.x)));
    u_xlat16_4 = half4(u_xlat2.ywzx * u_xlat2);
    u_xlat16_5.x = dot(Globals.unity_SHBr, u_xlat16_4);
    u_xlat16_5.y = dot(Globals.unity_SHBg, u_xlat16_4);
    u_xlat16_5.z = dot(Globals.unity_SHBb, u_xlat16_4);
    u_xlat16_3.xyz = Globals.unity_SHC.xyz * u_xlat16_3.xxx + u_xlat16_5.xyz;
    u_xlat1.w = 1.0;
    u_xlat16_4.x = half(dot(float4(Globals.unity_SHAr), u_xlat1));
    u_xlat16_4.y = half(dot(float4(Globals.unity_SHAg), u_xlat1));
    u_xlat16_4.z = half(dot(float4(Globals.unity_SHAb), u_xlat1));
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, half3(0.0, 0.0, 0.0));
    u_xlat6.xyz = log2(float3(u_xlat16_3.xyz));
    u_xlat6.xyz = u_xlat6.xyz * float3(0.416666657, 0.416666657, 0.416666657);
    u_xlat6.xyz = exp2(u_xlat6.xyz);
    u_xlat6.xyz = u_xlat6.xyz * float3(1.05499995, 1.05499995, 1.05499995) + float3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat6.xyz = max(u_xlat6.xyz, float3(0.0, 0.0, 0.0));
    u_xlat3 = (-u_xlat0.yyyy) + Globals.unity_4LightPosY0;
    u_xlat4 = u_xlat1.yyyy * u_xlat3;
    u_xlat3 = u_xlat3 * u_xlat3;
    u_xlat5 = (-u_xlat0.xxxx) + Globals.unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + Globals.unity_4LightPosZ0;
    u_xlat1 = u_xlat5 * u_xlat1.xxxx + u_xlat4;
    u_xlat1 = u_xlat0 * u_xlat2.wwzw + u_xlat1;
    u_xlat2 = u_xlat5 * u_xlat5 + u_xlat3;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
    u_xlat0 = max(u_xlat0, float4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat2 = rsqrt(u_xlat0);
    u_xlat0 = u_xlat0 * float4(Globals.unity_4LightAtten0) + float4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = float4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, float4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * float3(Globals.unity_LightColor[1].xyz);
    u_xlat1.xyz = float3(Globals.unity_LightColor[0].xyz) * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = float3(Globals.unity_LightColor[2].xyz) * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = float3(Globals.unity_LightColor[3].xyz) * u_xlat0.www + u_xlat0.xyz;
    output.TEXCOORD5.xyz = half3(u_xlat6.xyz + u_xlat0.xyz);
    output.TEXCOORD5.w = half(0.0);
    output.TEXCOORD6.xy = float2(0.0, 0.0);
    return output;
}


-- Fragment shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 2
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"
Uses vertex data channel "TexCoord0"

Constant Buffer "Globals" (418 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 192
  Matrix4x4 unity_WorldToObject at 256
  Matrix4x4 unity_MatrixVP at 320
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 unity_4LightPosX0 at 16
  Vector4 unity_4LightPosY0 at 32
  Vector4 unity_4LightPosZ0 at 48
  VectorHalf4 unity_4LightAtten0 at 64
  VectorHalf4 unity_LightColor[8] at 72
  VectorHalf4 unity_SHAr at 136
  VectorHalf4 unity_SHAg at 144
  VectorHalf4 unity_SHAb at 152
  VectorHalf4 unity_SHBr at 160
  VectorHalf4 unity_SHBg at 168
  VectorHalf4 unity_SHBb at 176
  VectorHalf4 unity_SHC at 184
  Vector4 _MainTex_ST at 384
  Vector4 _DetailAlbedoMap_ST at 400
  ScalarHalf _UVSec at 416
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 unity_4LightPosX0;
    float4 unity_4LightPosY0;
    float4 unity_4LightPosZ0;
    half4 unity_4LightAtten0;
    half4 unity_LightColor[8];
    half4 unity_SHAr;
    half4 unity_SHAg;
    half4 unity_SHAb;
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    float4 _DetailAlbedoMap_ST;
    half _UVSec;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    half3 NORMAL0 [[ attribute(1) ]] ;
    float2 TEXCOORD0 [[ attribute(2) ]] ;
    float2 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    half4 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float2 TEXCOORD6 [[ user(TEXCOORD6) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool u_xlatb0;
    float4 u_xlat1;
    float4 u_xlat2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    float4 u_xlat4;
    half4 u_xlat16_4;
    float4 u_xlat5;
    half3 u_xlat16_5;
    float3 u_xlat6;
    float u_xlat21;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0] * input.POSITION0.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2] * input.POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    output.mtl_Position = Globals.hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlatb0 = Globals._UVSec==half(0.0);
    u_xlat0.xy = (bool(u_xlatb0)) ? input.TEXCOORD0.xy : input.TEXCOORD1.xy;
    output.TEXCOORD0.zw = u_xlat0.xy * Globals._DetailAlbedoMap_ST.xy + Globals._DetailAlbedoMap_ST.zw;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy * Globals._MainTex_ST.xy + Globals._MainTex_ST.zw;
    u_xlat0.xyz = input.POSITION0.yyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * input.POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * input.POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * input.POSITION0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-Globals._WorldSpaceCameraPos.xyzx.xyz);
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = rsqrt(u_xlat21);
    u_xlat1.xyz = float3(u_xlat21) * u_xlat1.xyz;
    output.TEXCOORD1.xyz = half3(u_xlat1.xyz);
    output.TEXCOORD2.xyz = half3(0.0, 0.0, 0.0);
    output.TEXCOORD2.w = half(u_xlat0.x);
    output.TEXCOORD3.xyz = half3(0.0, 0.0, 0.0);
    output.TEXCOORD3.w = half(u_xlat0.y);
    u_xlat1.w = u_xlat0.z;
    u_xlat2.x = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = rsqrt(u_xlat21);
    u_xlat2 = float4(u_xlat21) * u_xlat2.xyzz;
    u_xlat1.xyz = u_xlat2.xyw;
    output.TEXCOORD4 = half4(u_xlat1);
    u_xlat16_3.x = half(u_xlat1.y * u_xlat1.y);
    u_xlat16_3.x = half(u_xlat1.x * u_xlat1.x + (-float(u_xlat16_3.x)));
    u_xlat16_4 = half4(u_xlat2.ywzx * u_xlat2);
    u_xlat16_5.x = dot(Globals.unity_SHBr, u_xlat16_4);
    u_xlat16_5.y = dot(Globals.unity_SHBg, u_xlat16_4);
    u_xlat16_5.z = dot(Globals.unity_SHBb, u_xlat16_4);
    u_xlat16_3.xyz = Globals.unity_SHC.xyz * u_xlat16_3.xxx + u_xlat16_5.xyz;
    u_xlat1.w = 1.0;
    u_xlat16_4.x = half(dot(float4(Globals.unity_SHAr), u_xlat1));
    u_xlat16_4.y = half(dot(float4(Globals.unity_SHAg), u_xlat1));
    u_xlat16_4.z = half(dot(float4(Globals.unity_SHAb), u_xlat1));
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, half3(0.0, 0.0, 0.0));
    u_xlat6.xyz = log2(float3(u_xlat16_3.xyz));
    u_xlat6.xyz = u_xlat6.xyz * float3(0.416666657, 0.416666657, 0.416666657);
    u_xlat6.xyz = exp2(u_xlat6.xyz);
    u_xlat6.xyz = u_xlat6.xyz * float3(1.05499995, 1.05499995, 1.05499995) + float3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat6.xyz = max(u_xlat6.xyz, float3(0.0, 0.0, 0.0));
    u_xlat3 = (-u_xlat0.yyyy) + Globals.unity_4LightPosY0;
    u_xlat4 = u_xlat1.yyyy * u_xlat3;
    u_xlat3 = u_xlat3 * u_xlat3;
    u_xlat5 = (-u_xlat0.xxxx) + Globals.unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + Globals.unity_4LightPosZ0;
    u_xlat1 = u_xlat5 * u_xlat1.xxxx + u_xlat4;
    u_xlat1 = u_xlat0 * u_xlat2.wwzw + u_xlat1;
    u_xlat2 = u_xlat5 * u_xlat5 + u_xlat3;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
    u_xlat0 = max(u_xlat0, float4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat2 = rsqrt(u_xlat0);
    u_xlat0 = u_xlat0 * float4(Globals.unity_4LightAtten0) + float4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = float4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, float4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * float3(Globals.unity_LightColor[1].xyz);
    u_xlat1.xyz = float3(Globals.unity_LightColor[0].xyz) * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = float3(Globals.unity_LightColor[2].xyz) * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = float3(Globals.unity_LightColor[3].xyz) * u_xlat0.www + u_xlat0.xyz;
    output.TEXCOORD5.xyz = half3(u_xlat6.xyz + u_xlat0.xyz);
    output.TEXCOORD5.w = half(0.0);
    output.TEXCOORD6.xy = float2(0.0, 0.0);
    return output;
}


-- Fragment shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 3
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"
Uses vertex data channel "TexCoord0"

Constant Buffer "Globals" (418 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 192
  Matrix4x4 unity_WorldToObject at 256
  Matrix4x4 unity_MatrixVP at 320
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 unity_4LightPosX0 at 16
  Vector4 unity_4LightPosY0 at 32
  Vector4 unity_4LightPosZ0 at 48
  VectorHalf4 unity_4LightAtten0 at 64
  VectorHalf4 unity_LightColor[8] at 72
  VectorHalf4 unity_SHAr at 136
  VectorHalf4 unity_SHAg at 144
  VectorHalf4 unity_SHAb at 152
  VectorHalf4 unity_SHBr at 160
  VectorHalf4 unity_SHBg at 168
  VectorHalf4 unity_SHBb at 176
  VectorHalf4 unity_SHC at 184
  Vector4 _MainTex_ST at 384
  Vector4 _DetailAlbedoMap_ST at 400
  ScalarHalf _UVSec at 416
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 unity_4LightPosX0;
    float4 unity_4LightPosY0;
    float4 unity_4LightPosZ0;
    half4 unity_4LightAtten0;
    half4 unity_LightColor[8];
    half4 unity_SHAr;
    half4 unity_SHAg;
    half4 unity_SHAb;
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    float4 _DetailAlbedoMap_ST;
    half _UVSec;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    half3 NORMAL0 [[ attribute(1) ]] ;
    float2 TEXCOORD0 [[ attribute(2) ]] ;
    float2 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    half4 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float2 TEXCOORD6 [[ user(TEXCOORD6) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool u_xlatb0;
    float4 u_xlat1;
    float4 u_xlat2;
    float4 u_xlat3;
    half3 u_xlat16_3;
    float4 u_xlat4;
    half4 u_xlat16_4;
    float4 u_xlat5;
    half3 u_xlat16_5;
    float3 u_xlat6;
    float u_xlat21;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0] * input.POSITION0.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2] * input.POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    output.mtl_Position = Globals.hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlatb0 = Globals._UVSec==half(0.0);
    u_xlat0.xy = (bool(u_xlatb0)) ? input.TEXCOORD0.xy : input.TEXCOORD1.xy;
    output.TEXCOORD0.zw = u_xlat0.xy * Globals._DetailAlbedoMap_ST.xy + Globals._DetailAlbedoMap_ST.zw;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy * Globals._MainTex_ST.xy + Globals._MainTex_ST.zw;
    u_xlat0.xyz = input.POSITION0.yyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * input.POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * input.POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * input.POSITION0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-Globals._WorldSpaceCameraPos.xyzx.xyz);
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = rsqrt(u_xlat21);
    u_xlat1.xyz = float3(u_xlat21) * u_xlat1.xyz;
    output.TEXCOORD1.xyz = half3(u_xlat1.xyz);
    output.TEXCOORD2.xyz = half3(0.0, 0.0, 0.0);
    output.TEXCOORD2.w = half(u_xlat0.x);
    output.TEXCOORD3.xyz = half3(0.0, 0.0, 0.0);
    output.TEXCOORD3.w = half(u_xlat0.y);
    u_xlat1.w = u_xlat0.z;
    u_xlat2.x = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = rsqrt(u_xlat21);
    u_xlat2 = float4(u_xlat21) * u_xlat2.xyzz;
    u_xlat1.xyz = u_xlat2.xyw;
    output.TEXCOORD4 = half4(u_xlat1);
    u_xlat16_3.x = half(u_xlat1.y * u_xlat1.y);
    u_xlat16_3.x = half(u_xlat1.x * u_xlat1.x + (-float(u_xlat16_3.x)));
    u_xlat16_4 = half4(u_xlat2.ywzx * u_xlat2);
    u_xlat16_5.x = dot(Globals.unity_SHBr, u_xlat16_4);
    u_xlat16_5.y = dot(Globals.unity_SHBg, u_xlat16_4);
    u_xlat16_5.z = dot(Globals.unity_SHBb, u_xlat16_4);
    u_xlat16_3.xyz = Globals.unity_SHC.xyz * u_xlat16_3.xxx + u_xlat16_5.xyz;
    u_xlat1.w = 1.0;
    u_xlat16_4.x = half(dot(float4(Globals.unity_SHAr), u_xlat1));
    u_xlat16_4.y = half(dot(float4(Globals.unity_SHAg), u_xlat1));
    u_xlat16_4.z = half(dot(float4(Globals.unity_SHAb), u_xlat1));
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, half3(0.0, 0.0, 0.0));
    u_xlat6.xyz = log2(float3(u_xlat16_3.xyz));
    u_xlat6.xyz = u_xlat6.xyz * float3(0.416666657, 0.416666657, 0.416666657);
    u_xlat6.xyz = exp2(u_xlat6.xyz);
    u_xlat6.xyz = u_xlat6.xyz * float3(1.05499995, 1.05499995, 1.05499995) + float3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat6.xyz = max(u_xlat6.xyz, float3(0.0, 0.0, 0.0));
    u_xlat3 = (-u_xlat0.yyyy) + Globals.unity_4LightPosY0;
    u_xlat4 = u_xlat1.yyyy * u_xlat3;
    u_xlat3 = u_xlat3 * u_xlat3;
    u_xlat5 = (-u_xlat0.xxxx) + Globals.unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + Globals.unity_4LightPosZ0;
    u_xlat1 = u_xlat5 * u_xlat1.xxxx + u_xlat4;
    u_xlat1 = u_xlat0 * u_xlat2.wwzw + u_xlat1;
    u_xlat2 = u_xlat5 * u_xlat5 + u_xlat3;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
    u_xlat0 = max(u_xlat0, float4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat2 = rsqrt(u_xlat0);
    u_xlat0 = u_xlat0 * float4(Globals.unity_4LightAtten0) + float4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = float4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, float4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * float3(Globals.unity_LightColor[1].xyz);
    u_xlat1.xyz = float3(Globals.unity_LightColor[0].xyz) * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = float3(Globals.unity_LightColor[2].xyz) * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = float3(Globals.unity_LightColor[3].xyz) * u_xlat0.www + u_xlat0.xyz;
    output.TEXCOORD5.xyz = half3(u_xlat6.xyz + u_xlat0.xyz);
    output.TEXCOORD5.w = half(0.0);
    output.TEXCOORD6.xy = float2(0.0, 0.0);
    return output;
}


-- Fragment shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

//////////////////////////////////////////////////////
Keywords set in this variant: DIRECTIONAL SHADOWS_SCREEN _EMISSION VERTEXLIGHT_ON 
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"
Uses vertex data channel "TexCoord0"

Constant Buffer "Globals" (402 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 176
  Matrix4x4 unity_WorldToObject at 240
  Matrix4x4 unity_MatrixVP at 304
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 unity_4LightPosX0 at 16
  Vector4 unity_4LightPosY0 at 32
  Vector4 unity_4LightPosZ0 at 48
  VectorHalf4 unity_4LightAtten0 at 64
  VectorHalf4 unity_LightColor[8] at 72
  VectorHalf4 unity_SHBr at 136
  VectorHalf4 unity_SHBg at 144
  VectorHalf4 unity_SHBb at 152
  VectorHalf4 unity_SHC at 160
  Vector4 _MainTex_ST at 368
  Vector4 _DetailAlbedoMap_ST at 384
  ScalarHalf _UVSec at 400
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 unity_4LightPosX0;
    float4 unity_4LightPosY0;
    float4 unity_4LightPosZ0;
    half4 unity_4LightAtten0;
    half4 unity_LightColor[8];
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    float4 _DetailAlbedoMap_ST;
    half _UVSec;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    half3 NORMAL0 [[ attribute(1) ]] ;
    float2 TEXCOORD0 [[ attribute(2) ]] ;
    float2 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    half4 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float2 TEXCOORD6 [[ user(TEXCOORD6) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool u_xlatb0;
    float4 u_xlat1;
    half4 u_xlat16_1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    half3 u_xlat16_5;
    half3 u_xlat16_6;
    float u_xlat21;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0] * input.POSITION0.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2] * input.POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    output.mtl_Position = Globals.hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlatb0 = Globals._UVSec==half(0.0);
    u_xlat0.xy = (bool(u_xlatb0)) ? input.TEXCOORD0.xy : input.TEXCOORD1.xy;
    output.TEXCOORD0.zw = u_xlat0.xy * Globals._DetailAlbedoMap_ST.xy + Globals._DetailAlbedoMap_ST.zw;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy * Globals._MainTex_ST.xy + Globals._MainTex_ST.zw;
    u_xlat0.xyz = input.POSITION0.yyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * input.POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * input.POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * input.POSITION0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-Globals._WorldSpaceCameraPos.xyzx.xyz);
    output.TEXCOORD1.xyz = half3(u_xlat1.xyz);
    output.TEXCOORD2.xyz = half3(0.0, 0.0, 0.0);
    output.TEXCOORD2.w = half(u_xlat0.x);
    output.TEXCOORD3.xyz = half3(0.0, 0.0, 0.0);
    output.TEXCOORD3.w = half(u_xlat0.y);
    u_xlat1.w = u_xlat0.z;
    u_xlat2.x = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = rsqrt(u_xlat21);
    u_xlat1.xyz = float3(u_xlat21) * u_xlat2.xyz;
    output.TEXCOORD4 = half4(u_xlat1);
    u_xlat2 = (-u_xlat0.xxxx) + Globals.unity_4LightPosX0;
    u_xlat3 = (-u_xlat0.yyyy) + Globals.unity_4LightPosY0;
    u_xlat0 = (-u_xlat0.zzzz) + Globals.unity_4LightPosZ0;
    u_xlat4 = u_xlat1.yyyy * u_xlat3;
    u_xlat3 = u_xlat3 * u_xlat3;
    u_xlat3 = u_xlat2 * u_xlat2 + u_xlat3;
    u_xlat2 = u_xlat2 * u_xlat1.xxxx + u_xlat4;
    u_xlat2 = u_xlat0 * u_xlat1.zzzz + u_xlat2;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
    u_xlat0 = max(u_xlat0, float4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat3 = rsqrt(u_xlat0);
    u_xlat0 = u_xlat0 * float4(Globals.unity_4LightAtten0) + float4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = float4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat2 = u_xlat2 * u_xlat3;
    u_xlat2 = max(u_xlat2, float4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat2;
    u_xlat2.xyz = u_xlat0.yyy * float3(Globals.unity_LightColor[1].xyz);
    u_xlat2.xyz = float3(Globals.unity_LightColor[0].xyz) * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = float3(Globals.unity_LightColor[2].xyz) * u_xlat0.zzz + u_xlat2.xyz;
    u_xlat0.xyz = float3(Globals.unity_LightColor[3].xyz) * u_xlat0.www + u_xlat0.xyz;
    u_xlat2.xyz = u_xlat0.xyz * float3(0.305306017, 0.305306017, 0.305306017) + float3(0.682171106, 0.682171106, 0.682171106);
    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + float3(0.0125228781, 0.0125228781, 0.0125228781);
    u_xlat16_5.x = half(u_xlat1.y * u_xlat1.y);
    u_xlat16_5.x = half(u_xlat1.x * u_xlat1.x + (-float(u_xlat16_5.x)));
    u_xlat16_1 = half4(u_xlat1.yzzx * u_xlat1.xyzz);
    u_xlat16_6.x = dot(Globals.unity_SHBr, u_xlat16_1);
    u_xlat16_6.y = dot(Globals.unity_SHBg, u_xlat16_1);
    u_xlat16_6.z = dot(Globals.unity_SHBb, u_xlat16_1);
    u_xlat16_5.xyz = Globals.unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
    output.TEXCOORD5.xyz = half3(u_xlat0.xyz * u_xlat2.xyz + float3(u_xlat16_5.xyz));
    output.TEXCOORD5.w = half(0.0);
    output.TEXCOORD6.xy = float2(0.0, 0.0);
    return output;
}


-- Fragment shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 2
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"
Uses vertex data channel "TexCoord0"

Constant Buffer "Globals" (402 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 176
  Matrix4x4 unity_WorldToObject at 240
  Matrix4x4 unity_MatrixVP at 304
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 unity_4LightPosX0 at 16
  Vector4 unity_4LightPosY0 at 32
  Vector4 unity_4LightPosZ0 at 48
  VectorHalf4 unity_4LightAtten0 at 64
  VectorHalf4 unity_LightColor[8] at 72
  VectorHalf4 unity_SHBr at 136
  VectorHalf4 unity_SHBg at 144
  VectorHalf4 unity_SHBb at 152
  VectorHalf4 unity_SHC at 160
  Vector4 _MainTex_ST at 368
  Vector4 _DetailAlbedoMap_ST at 384
  ScalarHalf _UVSec at 400
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 unity_4LightPosX0;
    float4 unity_4LightPosY0;
    float4 unity_4LightPosZ0;
    half4 unity_4LightAtten0;
    half4 unity_LightColor[8];
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    float4 _DetailAlbedoMap_ST;
    half _UVSec;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    half3 NORMAL0 [[ attribute(1) ]] ;
    float2 TEXCOORD0 [[ attribute(2) ]] ;
    float2 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    half4 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float2 TEXCOORD6 [[ user(TEXCOORD6) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool u_xlatb0;
    float4 u_xlat1;
    half4 u_xlat16_1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    half3 u_xlat16_5;
    half3 u_xlat16_6;
    float u_xlat21;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0] * input.POSITION0.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2] * input.POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    output.mtl_Position = Globals.hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlatb0 = Globals._UVSec==half(0.0);
    u_xlat0.xy = (bool(u_xlatb0)) ? input.TEXCOORD0.xy : input.TEXCOORD1.xy;
    output.TEXCOORD0.zw = u_xlat0.xy * Globals._DetailAlbedoMap_ST.xy + Globals._DetailAlbedoMap_ST.zw;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy * Globals._MainTex_ST.xy + Globals._MainTex_ST.zw;
    u_xlat0.xyz = input.POSITION0.yyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * input.POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * input.POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * input.POSITION0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-Globals._WorldSpaceCameraPos.xyzx.xyz);
    output.TEXCOORD1.xyz = half3(u_xlat1.xyz);
    output.TEXCOORD2.xyz = half3(0.0, 0.0, 0.0);
    output.TEXCOORD2.w = half(u_xlat0.x);
    output.TEXCOORD3.xyz = half3(0.0, 0.0, 0.0);
    output.TEXCOORD3.w = half(u_xlat0.y);
    u_xlat1.w = u_xlat0.z;
    u_xlat2.x = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = rsqrt(u_xlat21);
    u_xlat1.xyz = float3(u_xlat21) * u_xlat2.xyz;
    output.TEXCOORD4 = half4(u_xlat1);
    u_xlat2 = (-u_xlat0.xxxx) + Globals.unity_4LightPosX0;
    u_xlat3 = (-u_xlat0.yyyy) + Globals.unity_4LightPosY0;
    u_xlat0 = (-u_xlat0.zzzz) + Globals.unity_4LightPosZ0;
    u_xlat4 = u_xlat1.yyyy * u_xlat3;
    u_xlat3 = u_xlat3 * u_xlat3;
    u_xlat3 = u_xlat2 * u_xlat2 + u_xlat3;
    u_xlat2 = u_xlat2 * u_xlat1.xxxx + u_xlat4;
    u_xlat2 = u_xlat0 * u_xlat1.zzzz + u_xlat2;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
    u_xlat0 = max(u_xlat0, float4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat3 = rsqrt(u_xlat0);
    u_xlat0 = u_xlat0 * float4(Globals.unity_4LightAtten0) + float4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = float4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat2 = u_xlat2 * u_xlat3;
    u_xlat2 = max(u_xlat2, float4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat2;
    u_xlat2.xyz = u_xlat0.yyy * float3(Globals.unity_LightColor[1].xyz);
    u_xlat2.xyz = float3(Globals.unity_LightColor[0].xyz) * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = float3(Globals.unity_LightColor[2].xyz) * u_xlat0.zzz + u_xlat2.xyz;
    u_xlat0.xyz = float3(Globals.unity_LightColor[3].xyz) * u_xlat0.www + u_xlat0.xyz;
    u_xlat2.xyz = u_xlat0.xyz * float3(0.305306017, 0.305306017, 0.305306017) + float3(0.682171106, 0.682171106, 0.682171106);
    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + float3(0.0125228781, 0.0125228781, 0.0125228781);
    u_xlat16_5.x = half(u_xlat1.y * u_xlat1.y);
    u_xlat16_5.x = half(u_xlat1.x * u_xlat1.x + (-float(u_xlat16_5.x)));
    u_xlat16_1 = half4(u_xlat1.yzzx * u_xlat1.xyzz);
    u_xlat16_6.x = dot(Globals.unity_SHBr, u_xlat16_1);
    u_xlat16_6.y = dot(Globals.unity_SHBg, u_xlat16_1);
    u_xlat16_6.z = dot(Globals.unity_SHBb, u_xlat16_1);
    u_xlat16_5.xyz = Globals.unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
    output.TEXCOORD5.xyz = half3(u_xlat0.xyz * u_xlat2.xyz + float3(u_xlat16_5.xyz));
    output.TEXCOORD5.w = half(0.0);
    output.TEXCOORD6.xy = float2(0.0, 0.0);
    return output;
}


-- Fragment shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 3
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"
Uses vertex data channel "TexCoord0"

Constant Buffer "Globals" (402 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 176
  Matrix4x4 unity_WorldToObject at 240
  Matrix4x4 unity_MatrixVP at 304
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 unity_4LightPosX0 at 16
  Vector4 unity_4LightPosY0 at 32
  Vector4 unity_4LightPosZ0 at 48
  VectorHalf4 unity_4LightAtten0 at 64
  VectorHalf4 unity_LightColor[8] at 72
  VectorHalf4 unity_SHBr at 136
  VectorHalf4 unity_SHBg at 144
  VectorHalf4 unity_SHBb at 152
  VectorHalf4 unity_SHC at 160
  Vector4 _MainTex_ST at 368
  Vector4 _DetailAlbedoMap_ST at 384
  ScalarHalf _UVSec at 400
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 unity_4LightPosX0;
    float4 unity_4LightPosY0;
    float4 unity_4LightPosZ0;
    half4 unity_4LightAtten0;
    half4 unity_LightColor[8];
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    float4 _DetailAlbedoMap_ST;
    half _UVSec;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    half3 NORMAL0 [[ attribute(1) ]] ;
    float2 TEXCOORD0 [[ attribute(2) ]] ;
    float2 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    half4 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float2 TEXCOORD6 [[ user(TEXCOORD6) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool u_xlatb0;
    float4 u_xlat1;
    half4 u_xlat16_1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    half3 u_xlat16_5;
    half3 u_xlat16_6;
    float u_xlat21;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0] * input.POSITION0.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2] * input.POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    output.mtl_Position = Globals.hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlatb0 = Globals._UVSec==half(0.0);
    u_xlat0.xy = (bool(u_xlatb0)) ? input.TEXCOORD0.xy : input.TEXCOORD1.xy;
    output.TEXCOORD0.zw = u_xlat0.xy * Globals._DetailAlbedoMap_ST.xy + Globals._DetailAlbedoMap_ST.zw;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy * Globals._MainTex_ST.xy + Globals._MainTex_ST.zw;
    u_xlat0.xyz = input.POSITION0.yyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * input.POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * input.POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * input.POSITION0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-Globals._WorldSpaceCameraPos.xyzx.xyz);
    output.TEXCOORD1.xyz = half3(u_xlat1.xyz);
    output.TEXCOORD2.xyz = half3(0.0, 0.0, 0.0);
    output.TEXCOORD2.w = half(u_xlat0.x);
    output.TEXCOORD3.xyz = half3(0.0, 0.0, 0.0);
    output.TEXCOORD3.w = half(u_xlat0.y);
    u_xlat1.w = u_xlat0.z;
    u_xlat2.x = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = rsqrt(u_xlat21);
    u_xlat1.xyz = float3(u_xlat21) * u_xlat2.xyz;
    output.TEXCOORD4 = half4(u_xlat1);
    u_xlat2 = (-u_xlat0.xxxx) + Globals.unity_4LightPosX0;
    u_xlat3 = (-u_xlat0.yyyy) + Globals.unity_4LightPosY0;
    u_xlat0 = (-u_xlat0.zzzz) + Globals.unity_4LightPosZ0;
    u_xlat4 = u_xlat1.yyyy * u_xlat3;
    u_xlat3 = u_xlat3 * u_xlat3;
    u_xlat3 = u_xlat2 * u_xlat2 + u_xlat3;
    u_xlat2 = u_xlat2 * u_xlat1.xxxx + u_xlat4;
    u_xlat2 = u_xlat0 * u_xlat1.zzzz + u_xlat2;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
    u_xlat0 = max(u_xlat0, float4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat3 = rsqrt(u_xlat0);
    u_xlat0 = u_xlat0 * float4(Globals.unity_4LightAtten0) + float4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = float4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat2 = u_xlat2 * u_xlat3;
    u_xlat2 = max(u_xlat2, float4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat2;
    u_xlat2.xyz = u_xlat0.yyy * float3(Globals.unity_LightColor[1].xyz);
    u_xlat2.xyz = float3(Globals.unity_LightColor[0].xyz) * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = float3(Globals.unity_LightColor[2].xyz) * u_xlat0.zzz + u_xlat2.xyz;
    u_xlat0.xyz = float3(Globals.unity_LightColor[3].xyz) * u_xlat0.www + u_xlat0.xyz;
    u_xlat2.xyz = u_xlat0.xyz * float3(0.305306017, 0.305306017, 0.305306017) + float3(0.682171106, 0.682171106, 0.682171106);
    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + float3(0.0125228781, 0.0125228781, 0.0125228781);
    u_xlat16_5.x = half(u_xlat1.y * u_xlat1.y);
    u_xlat16_5.x = half(u_xlat1.x * u_xlat1.x + (-float(u_xlat16_5.x)));
    u_xlat16_1 = half4(u_xlat1.yzzx * u_xlat1.xyzz);
    u_xlat16_6.x = dot(Globals.unity_SHBr, u_xlat16_1);
    u_xlat16_6.y = dot(Globals.unity_SHBg, u_xlat16_1);
    u_xlat16_6.z = dot(Globals.unity_SHBb, u_xlat16_1);
    u_xlat16_5.xyz = Globals.unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
    output.TEXCOORD5.xyz = half3(u_xlat0.xyz * u_xlat2.xyz + float3(u_xlat16_5.xyz));
    output.TEXCOORD5.w = half(0.0);
    output.TEXCOORD6.xy = float2(0.0, 0.0);
    return output;
}


-- Fragment shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"
Uses vertex data channel "TexCoord0"

Constant Buffer "Globals" (402 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 176
  Matrix4x4 unity_WorldToObject at 240
  Matrix4x4 unity_MatrixVP at 304
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 unity_4LightPosX0 at 16
  Vector4 unity_4LightPosY0 at 32
  Vector4 unity_4LightPosZ0 at 48
  VectorHalf4 unity_4LightAtten0 at 64
  VectorHalf4 unity_LightColor[8] at 72
  VectorHalf4 unity_SHBr at 136
  VectorHalf4 unity_SHBg at 144
  VectorHalf4 unity_SHBb at 152
  VectorHalf4 unity_SHC at 160
  Vector4 _MainTex_ST at 368
  Vector4 _DetailAlbedoMap_ST at 384
  ScalarHalf _UVSec at 400
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 unity_4LightPosX0;
    float4 unity_4LightPosY0;
    float4 unity_4LightPosZ0;
    half4 unity_4LightAtten0;
    half4 unity_LightColor[8];
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    float4 _DetailAlbedoMap_ST;
    half _UVSec;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    half3 NORMAL0 [[ attribute(1) ]] ;
    float2 TEXCOORD0 [[ attribute(2) ]] ;
    float2 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    half4 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float2 TEXCOORD6 [[ user(TEXCOORD6) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool u_xlatb0;
    float4 u_xlat1;
    half4 u_xlat16_1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    half3 u_xlat16_5;
    half3 u_xlat16_6;
    float u_xlat21;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0] * input.POSITION0.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2] * input.POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    output.mtl_Position = Globals.hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlatb0 = Globals._UVSec==half(0.0);
    u_xlat0.xy = (bool(u_xlatb0)) ? input.TEXCOORD0.xy : input.TEXCOORD1.xy;
    output.TEXCOORD0.zw = u_xlat0.xy * Globals._DetailAlbedoMap_ST.xy + Globals._DetailAlbedoMap_ST.zw;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy * Globals._MainTex_ST.xy + Globals._MainTex_ST.zw;
    u_xlat0.xyz = input.POSITION0.yyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * input.POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * input.POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * input.POSITION0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-Globals._WorldSpaceCameraPos.xyzx.xyz);
    output.TEXCOORD1.xyz = half3(u_xlat1.xyz);
    output.TEXCOORD2.xyz = half3(0.0, 0.0, 0.0);
    output.TEXCOORD2.w = half(u_xlat0.x);
    output.TEXCOORD3.xyz = half3(0.0, 0.0, 0.0);
    output.TEXCOORD3.w = half(u_xlat0.y);
    u_xlat1.w = u_xlat0.z;
    u_xlat2.x = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = rsqrt(u_xlat21);
    u_xlat1.xyz = float3(u_xlat21) * u_xlat2.xyz;
    output.TEXCOORD4 = half4(u_xlat1);
    u_xlat2 = (-u_xlat0.xxxx) + Globals.unity_4LightPosX0;
    u_xlat3 = (-u_xlat0.yyyy) + Globals.unity_4LightPosY0;
    u_xlat0 = (-u_xlat0.zzzz) + Globals.unity_4LightPosZ0;
    u_xlat4 = u_xlat1.yyyy * u_xlat3;
    u_xlat3 = u_xlat3 * u_xlat3;
    u_xlat3 = u_xlat2 * u_xlat2 + u_xlat3;
    u_xlat2 = u_xlat2 * u_xlat1.xxxx + u_xlat4;
    u_xlat2 = u_xlat0 * u_xlat1.zzzz + u_xlat2;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
    u_xlat0 = max(u_xlat0, float4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat3 = rsqrt(u_xlat0);
    u_xlat0 = u_xlat0 * float4(Globals.unity_4LightAtten0) + float4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = float4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat2 = u_xlat2 * u_xlat3;
    u_xlat2 = max(u_xlat2, float4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat2;
    u_xlat2.xyz = u_xlat0.yyy * float3(Globals.unity_LightColor[1].xyz);
    u_xlat2.xyz = float3(Globals.unity_LightColor[0].xyz) * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = float3(Globals.unity_LightColor[2].xyz) * u_xlat0.zzz + u_xlat2.xyz;
    u_xlat0.xyz = float3(Globals.unity_LightColor[3].xyz) * u_xlat0.www + u_xlat0.xyz;
    u_xlat2.xyz = u_xlat0.xyz * float3(0.305306017, 0.305306017, 0.305306017) + float3(0.682171106, 0.682171106, 0.682171106);
    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + float3(0.0125228781, 0.0125228781, 0.0125228781);
    u_xlat16_5.x = half(u_xlat1.y * u_xlat1.y);
    u_xlat16_5.x = half(u_xlat1.x * u_xlat1.x + (-float(u_xlat16_5.x)));
    u_xlat16_1 = half4(u_xlat1.yzzx * u_xlat1.xyzz);
    u_xlat16_6.x = dot(Globals.unity_SHBr, u_xlat16_1);
    u_xlat16_6.y = dot(Globals.unity_SHBg, u_xlat16_1);
    u_xlat16_6.z = dot(Globals.unity_SHBb, u_xlat16_1);
    u_xlat16_5.xyz = Globals.unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
    output.TEXCOORD5.xyz = half3(u_xlat0.xyz * u_xlat2.xyz + float3(u_xlat16_5.xyz));
    output.TEXCOORD5.w = half(0.0);
    output.TEXCOORD6.xy = float2(0.0, 0.0);
    return output;
}


-- Fragment shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 2
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"
Uses vertex data channel "TexCoord0"

Constant Buffer "Globals" (402 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 176
  Matrix4x4 unity_WorldToObject at 240
  Matrix4x4 unity_MatrixVP at 304
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 unity_4LightPosX0 at 16
  Vector4 unity_4LightPosY0 at 32
  Vector4 unity_4LightPosZ0 at 48
  VectorHalf4 unity_4LightAtten0 at 64
  VectorHalf4 unity_LightColor[8] at 72
  VectorHalf4 unity_SHBr at 136
  VectorHalf4 unity_SHBg at 144
  VectorHalf4 unity_SHBb at 152
  VectorHalf4 unity_SHC at 160
  Vector4 _MainTex_ST at 368
  Vector4 _DetailAlbedoMap_ST at 384
  ScalarHalf _UVSec at 400
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 unity_4LightPosX0;
    float4 unity_4LightPosY0;
    float4 unity_4LightPosZ0;
    half4 unity_4LightAtten0;
    half4 unity_LightColor[8];
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    float4 _DetailAlbedoMap_ST;
    half _UVSec;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    half3 NORMAL0 [[ attribute(1) ]] ;
    float2 TEXCOORD0 [[ attribute(2) ]] ;
    float2 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    half4 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float2 TEXCOORD6 [[ user(TEXCOORD6) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool u_xlatb0;
    float4 u_xlat1;
    half4 u_xlat16_1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    half3 u_xlat16_5;
    half3 u_xlat16_6;
    float u_xlat21;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0] * input.POSITION0.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2] * input.POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    output.mtl_Position = Globals.hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlatb0 = Globals._UVSec==half(0.0);
    u_xlat0.xy = (bool(u_xlatb0)) ? input.TEXCOORD0.xy : input.TEXCOORD1.xy;
    output.TEXCOORD0.zw = u_xlat0.xy * Globals._DetailAlbedoMap_ST.xy + Globals._DetailAlbedoMap_ST.zw;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy * Globals._MainTex_ST.xy + Globals._MainTex_ST.zw;
    u_xlat0.xyz = input.POSITION0.yyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * input.POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * input.POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * input.POSITION0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-Globals._WorldSpaceCameraPos.xyzx.xyz);
    output.TEXCOORD1.xyz = half3(u_xlat1.xyz);
    output.TEXCOORD2.xyz = half3(0.0, 0.0, 0.0);
    output.TEXCOORD2.w = half(u_xlat0.x);
    output.TEXCOORD3.xyz = half3(0.0, 0.0, 0.0);
    output.TEXCOORD3.w = half(u_xlat0.y);
    u_xlat1.w = u_xlat0.z;
    u_xlat2.x = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = rsqrt(u_xlat21);
    u_xlat1.xyz = float3(u_xlat21) * u_xlat2.xyz;
    output.TEXCOORD4 = half4(u_xlat1);
    u_xlat2 = (-u_xlat0.xxxx) + Globals.unity_4LightPosX0;
    u_xlat3 = (-u_xlat0.yyyy) + Globals.unity_4LightPosY0;
    u_xlat0 = (-u_xlat0.zzzz) + Globals.unity_4LightPosZ0;
    u_xlat4 = u_xlat1.yyyy * u_xlat3;
    u_xlat3 = u_xlat3 * u_xlat3;
    u_xlat3 = u_xlat2 * u_xlat2 + u_xlat3;
    u_xlat2 = u_xlat2 * u_xlat1.xxxx + u_xlat4;
    u_xlat2 = u_xlat0 * u_xlat1.zzzz + u_xlat2;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
    u_xlat0 = max(u_xlat0, float4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat3 = rsqrt(u_xlat0);
    u_xlat0 = u_xlat0 * float4(Globals.unity_4LightAtten0) + float4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = float4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat2 = u_xlat2 * u_xlat3;
    u_xlat2 = max(u_xlat2, float4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat2;
    u_xlat2.xyz = u_xlat0.yyy * float3(Globals.unity_LightColor[1].xyz);
    u_xlat2.xyz = float3(Globals.unity_LightColor[0].xyz) * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = float3(Globals.unity_LightColor[2].xyz) * u_xlat0.zzz + u_xlat2.xyz;
    u_xlat0.xyz = float3(Globals.unity_LightColor[3].xyz) * u_xlat0.www + u_xlat0.xyz;
    u_xlat2.xyz = u_xlat0.xyz * float3(0.305306017, 0.305306017, 0.305306017) + float3(0.682171106, 0.682171106, 0.682171106);
    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + float3(0.0125228781, 0.0125228781, 0.0125228781);
    u_xlat16_5.x = half(u_xlat1.y * u_xlat1.y);
    u_xlat16_5.x = half(u_xlat1.x * u_xlat1.x + (-float(u_xlat16_5.x)));
    u_xlat16_1 = half4(u_xlat1.yzzx * u_xlat1.xyzz);
    u_xlat16_6.x = dot(Globals.unity_SHBr, u_xlat16_1);
    u_xlat16_6.y = dot(Globals.unity_SHBg, u_xlat16_1);
    u_xlat16_6.z = dot(Globals.unity_SHBb, u_xlat16_1);
    u_xlat16_5.xyz = Globals.unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
    output.TEXCOORD5.xyz = half3(u_xlat0.xyz * u_xlat2.xyz + float3(u_xlat16_5.xyz));
    output.TEXCOORD5.w = half(0.0);
    output.TEXCOORD6.xy = float2(0.0, 0.0);
    return output;
}


-- Fragment shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 3
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"
Uses vertex data channel "TexCoord0"

Constant Buffer "Globals" (402 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 176
  Matrix4x4 unity_WorldToObject at 240
  Matrix4x4 unity_MatrixVP at 304
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 unity_4LightPosX0 at 16
  Vector4 unity_4LightPosY0 at 32
  Vector4 unity_4LightPosZ0 at 48
  VectorHalf4 unity_4LightAtten0 at 64
  VectorHalf4 unity_LightColor[8] at 72
  VectorHalf4 unity_SHBr at 136
  VectorHalf4 unity_SHBg at 144
  VectorHalf4 unity_SHBb at 152
  VectorHalf4 unity_SHC at 160
  Vector4 _MainTex_ST at 368
  Vector4 _DetailAlbedoMap_ST at 384
  ScalarHalf _UVSec at 400
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 unity_4LightPosX0;
    float4 unity_4LightPosY0;
    float4 unity_4LightPosZ0;
    half4 unity_4LightAtten0;
    half4 unity_LightColor[8];
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    float4 _DetailAlbedoMap_ST;
    half _UVSec;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    half3 NORMAL0 [[ attribute(1) ]] ;
    float2 TEXCOORD0 [[ attribute(2) ]] ;
    float2 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    half4 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float2 TEXCOORD6 [[ user(TEXCOORD6) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool u_xlatb0;
    float4 u_xlat1;
    half4 u_xlat16_1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    half3 u_xlat16_5;
    half3 u_xlat16_6;
    float u_xlat21;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0] * input.POSITION0.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2] * input.POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    output.mtl_Position = Globals.hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlatb0 = Globals._UVSec==half(0.0);
    u_xlat0.xy = (bool(u_xlatb0)) ? input.TEXCOORD0.xy : input.TEXCOORD1.xy;
    output.TEXCOORD0.zw = u_xlat0.xy * Globals._DetailAlbedoMap_ST.xy + Globals._DetailAlbedoMap_ST.zw;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy * Globals._MainTex_ST.xy + Globals._MainTex_ST.zw;
    u_xlat0.xyz = input.POSITION0.yyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * input.POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * input.POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * input.POSITION0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-Globals._WorldSpaceCameraPos.xyzx.xyz);
    output.TEXCOORD1.xyz = half3(u_xlat1.xyz);
    output.TEXCOORD2.xyz = half3(0.0, 0.0, 0.0);
    output.TEXCOORD2.w = half(u_xlat0.x);
    output.TEXCOORD3.xyz = half3(0.0, 0.0, 0.0);
    output.TEXCOORD3.w = half(u_xlat0.y);
    u_xlat1.w = u_xlat0.z;
    u_xlat2.x = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = rsqrt(u_xlat21);
    u_xlat1.xyz = float3(u_xlat21) * u_xlat2.xyz;
    output.TEXCOORD4 = half4(u_xlat1);
    u_xlat2 = (-u_xlat0.xxxx) + Globals.unity_4LightPosX0;
    u_xlat3 = (-u_xlat0.yyyy) + Globals.unity_4LightPosY0;
    u_xlat0 = (-u_xlat0.zzzz) + Globals.unity_4LightPosZ0;
    u_xlat4 = u_xlat1.yyyy * u_xlat3;
    u_xlat3 = u_xlat3 * u_xlat3;
    u_xlat3 = u_xlat2 * u_xlat2 + u_xlat3;
    u_xlat2 = u_xlat2 * u_xlat1.xxxx + u_xlat4;
    u_xlat2 = u_xlat0 * u_xlat1.zzzz + u_xlat2;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
    u_xlat0 = max(u_xlat0, float4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat3 = rsqrt(u_xlat0);
    u_xlat0 = u_xlat0 * float4(Globals.unity_4LightAtten0) + float4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = float4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat2 = u_xlat2 * u_xlat3;
    u_xlat2 = max(u_xlat2, float4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat2;
    u_xlat2.xyz = u_xlat0.yyy * float3(Globals.unity_LightColor[1].xyz);
    u_xlat2.xyz = float3(Globals.unity_LightColor[0].xyz) * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = float3(Globals.unity_LightColor[2].xyz) * u_xlat0.zzz + u_xlat2.xyz;
    u_xlat0.xyz = float3(Globals.unity_LightColor[3].xyz) * u_xlat0.www + u_xlat0.xyz;
    u_xlat2.xyz = u_xlat0.xyz * float3(0.305306017, 0.305306017, 0.305306017) + float3(0.682171106, 0.682171106, 0.682171106);
    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + float3(0.0125228781, 0.0125228781, 0.0125228781);
    u_xlat16_5.x = half(u_xlat1.y * u_xlat1.y);
    u_xlat16_5.x = half(u_xlat1.x * u_xlat1.x + (-float(u_xlat16_5.x)));
    u_xlat16_1 = half4(u_xlat1.yzzx * u_xlat1.xyzz);
    u_xlat16_6.x = dot(Globals.unity_SHBr, u_xlat16_1);
    u_xlat16_6.y = dot(Globals.unity_SHBg, u_xlat16_1);
    u_xlat16_6.z = dot(Globals.unity_SHBb, u_xlat16_1);
    u_xlat16_5.xyz = Globals.unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
    output.TEXCOORD5.xyz = half3(u_xlat0.xyz * u_xlat2.xyz + float3(u_xlat16_5.xyz));
    output.TEXCOORD5.w = half(0.0);
    output.TEXCOORD6.xy = float2(0.0, 0.0);
    return output;
}


-- Fragment shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"
Uses vertex data channel "TexCoord0"

Constant Buffer "Globals" (306 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 80
  Matrix4x4 unity_WorldToObject at 144
  Matrix4x4 unity_MatrixVP at 208
  Vector3 _WorldSpaceCameraPos at 0
  VectorHalf4 unity_SHAr at 16
  VectorHalf4 unity_SHAg at 24
  VectorHalf4 unity_SHAb at 32
  VectorHalf4 unity_SHBr at 40
  VectorHalf4 unity_SHBg at 48
  VectorHalf4 unity_SHBb at 56
  VectorHalf4 unity_SHC at 64
  Vector4 _MainTex_ST at 272
  Vector4 _DetailAlbedoMap_ST at 288
  ScalarHalf _UVSec at 304
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    half4 unity_SHAr;
    half4 unity_SHAg;
    half4 unity_SHAb;
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    float4 _DetailAlbedoMap_ST;
    half _UVSec;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    half3 NORMAL0 [[ attribute(1) ]] ;
    float2 TEXCOORD0 [[ attribute(2) ]] ;
    float2 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    half4 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float2 TEXCOORD6 [[ user(TEXCOORD6) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool u_xlatb0;
    float4 u_xlat1;
    half4 u_xlat16_1;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    float u_xlat13;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0] * input.POSITION0.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2] * input.POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    output.mtl_Position = Globals.hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlatb0 = Globals._UVSec==half(0.0);
    u_xlat0.xy = (bool(u_xlatb0)) ? input.TEXCOORD0.xy : input.TEXCOORD1.xy;
    output.TEXCOORD0.zw = u_xlat0.xy * Globals._DetailAlbedoMap_ST.xy + Globals._DetailAlbedoMap_ST.zw;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy * Globals._MainTex_ST.xy + Globals._MainTex_ST.zw;
    u_xlat0.xyz = input.POSITION0.yyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * input.POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * input.POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyw = Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * input.POSITION0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyw + (-Globals._WorldSpaceCameraPos.xyzx.xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = rsqrt(u_xlat13);
    u_xlat1.xyz = float3(u_xlat13) * u_xlat1.xyz;
    output.TEXCOORD1.xyz = half3(u_xlat1.xyz);
    output.TEXCOORD2.w = half(u_xlat0.x);
    output.TEXCOORD2.xyz = half3(0.0, 0.0, 0.0);
    output.TEXCOORD3.w = half(u_xlat0.y);
    output.TEXCOORD3.xyz = half3(0.0, 0.0, 0.0);
    u_xlat1.x = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = rsqrt(u_xlat13);
    u_xlat1 = float4(u_xlat13) * u_xlat1.xyzz;
    u_xlat0.xyz = u_xlat1.xyw;
    output.TEXCOORD4 = half4(u_xlat0);
    u_xlat16_2.x = half(u_xlat0.y * u_xlat0.y);
    u_xlat16_2.x = half(u_xlat0.x * u_xlat0.x + (-float(u_xlat16_2.x)));
    u_xlat16_1 = half4(u_xlat1.ywzx * u_xlat1);
    u_xlat16_3.x = dot(Globals.unity_SHBr, u_xlat16_1);
    u_xlat16_3.y = dot(Globals.unity_SHBg, u_xlat16_1);
    u_xlat16_3.z = dot(Globals.unity_SHBb, u_xlat16_1);
    u_xlat16_2.xyz = Globals.unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;
    u_xlat0.w = 1.0;
    u_xlat16_3.x = half(dot(float4(Globals.unity_SHAr), u_xlat0));
    u_xlat16_3.y = half(dot(float4(Globals.unity_SHAg), u_xlat0));
    u_xlat16_3.z = half(dot(float4(Globals.unity_SHAb), u_xlat0));
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, half3(0.0, 0.0, 0.0));
    u_xlat0.xyz = log2(float3(u_xlat16_2.xyz));
    u_xlat0.xyz = u_xlat0.xyz * float3(0.416666657, 0.416666657, 0.416666657);
    u_xlat0.xyz = exp2(u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xyz * float3(1.05499995, 1.05499995, 1.05499995) + float3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat0.xyz = max(u_xlat0.xyz, float3(0.0, 0.0, 0.0));
    output.TEXCOORD5.xyz = half3(u_xlat0.xyz);
    output.TEXCOORD5.w = half(0.0);
    output.TEXCOORD6.xy = float2(0.0, 0.0);
    return output;
}


-- Fragment shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 2
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"
Uses vertex data channel "TexCoord0"

Constant Buffer "Globals" (306 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 80
  Matrix4x4 unity_WorldToObject at 144
  Matrix4x4 unity_MatrixVP at 208
  Vector3 _WorldSpaceCameraPos at 0
  VectorHalf4 unity_SHAr at 16
  VectorHalf4 unity_SHAg at 24
  VectorHalf4 unity_SHAb at 32
  VectorHalf4 unity_SHBr at 40
  VectorHalf4 unity_SHBg at 48
  VectorHalf4 unity_SHBb at 56
  VectorHalf4 unity_SHC at 64
  Vector4 _MainTex_ST at 272
  Vector4 _DetailAlbedoMap_ST at 288
  ScalarHalf _UVSec at 304
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    half4 unity_SHAr;
    half4 unity_SHAg;
    half4 unity_SHAb;
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    float4 _DetailAlbedoMap_ST;
    half _UVSec;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    half3 NORMAL0 [[ attribute(1) ]] ;
    float2 TEXCOORD0 [[ attribute(2) ]] ;
    float2 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    half4 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float2 TEXCOORD6 [[ user(TEXCOORD6) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool u_xlatb0;
    float4 u_xlat1;
    half4 u_xlat16_1;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    float u_xlat13;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0] * input.POSITION0.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2] * input.POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    output.mtl_Position = Globals.hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlatb0 = Globals._UVSec==half(0.0);
    u_xlat0.xy = (bool(u_xlatb0)) ? input.TEXCOORD0.xy : input.TEXCOORD1.xy;
    output.TEXCOORD0.zw = u_xlat0.xy * Globals._DetailAlbedoMap_ST.xy + Globals._DetailAlbedoMap_ST.zw;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy * Globals._MainTex_ST.xy + Globals._MainTex_ST.zw;
    u_xlat0.xyz = input.POSITION0.yyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * input.POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * input.POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyw = Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * input.POSITION0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyw + (-Globals._WorldSpaceCameraPos.xyzx.xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = rsqrt(u_xlat13);
    u_xlat1.xyz = float3(u_xlat13) * u_xlat1.xyz;
    output.TEXCOORD1.xyz = half3(u_xlat1.xyz);
    output.TEXCOORD2.w = half(u_xlat0.x);
    output.TEXCOORD2.xyz = half3(0.0, 0.0, 0.0);
    output.TEXCOORD3.w = half(u_xlat0.y);
    output.TEXCOORD3.xyz = half3(0.0, 0.0, 0.0);
    u_xlat1.x = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = rsqrt(u_xlat13);
    u_xlat1 = float4(u_xlat13) * u_xlat1.xyzz;
    u_xlat0.xyz = u_xlat1.xyw;
    output.TEXCOORD4 = half4(u_xlat0);
    u_xlat16_2.x = half(u_xlat0.y * u_xlat0.y);
    u_xlat16_2.x = half(u_xlat0.x * u_xlat0.x + (-float(u_xlat16_2.x)));
    u_xlat16_1 = half4(u_xlat1.ywzx * u_xlat1);
    u_xlat16_3.x = dot(Globals.unity_SHBr, u_xlat16_1);
    u_xlat16_3.y = dot(Globals.unity_SHBg, u_xlat16_1);
    u_xlat16_3.z = dot(Globals.unity_SHBb, u_xlat16_1);
    u_xlat16_2.xyz = Globals.unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;
    u_xlat0.w = 1.0;
    u_xlat16_3.x = half(dot(float4(Globals.unity_SHAr), u_xlat0));
    u_xlat16_3.y = half(dot(float4(Globals.unity_SHAg), u_xlat0));
    u_xlat16_3.z = half(dot(float4(Globals.unity_SHAb), u_xlat0));
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, half3(0.0, 0.0, 0.0));
    u_xlat0.xyz = log2(float3(u_xlat16_2.xyz));
    u_xlat0.xyz = u_xlat0.xyz * float3(0.416666657, 0.416666657, 0.416666657);
    u_xlat0.xyz = exp2(u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xyz * float3(1.05499995, 1.05499995, 1.05499995) + float3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat0.xyz = max(u_xlat0.xyz, float3(0.0, 0.0, 0.0));
    output.TEXCOORD5.xyz = half3(u_xlat0.xyz);
    output.TEXCOORD5.w = half(0.0);
    output.TEXCOORD6.xy = float2(0.0, 0.0);
    return output;
}


-- Fragment shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 3
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"
Uses vertex data channel "TexCoord0"

Constant Buffer "Globals" (306 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 80
  Matrix4x4 unity_WorldToObject at 144
  Matrix4x4 unity_MatrixVP at 208
  Vector3 _WorldSpaceCameraPos at 0
  VectorHalf4 unity_SHAr at 16
  VectorHalf4 unity_SHAg at 24
  VectorHalf4 unity_SHAb at 32
  VectorHalf4 unity_SHBr at 40
  VectorHalf4 unity_SHBg at 48
  VectorHalf4 unity_SHBb at 56
  VectorHalf4 unity_SHC at 64
  Vector4 _MainTex_ST at 272
  Vector4 _DetailAlbedoMap_ST at 288
  ScalarHalf _UVSec at 304
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    half4 unity_SHAr;
    half4 unity_SHAg;
    half4 unity_SHAb;
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    float4 _DetailAlbedoMap_ST;
    half _UVSec;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    half3 NORMAL0 [[ attribute(1) ]] ;
    float2 TEXCOORD0 [[ attribute(2) ]] ;
    float2 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    half4 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float2 TEXCOORD6 [[ user(TEXCOORD6) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool u_xlatb0;
    float4 u_xlat1;
    half4 u_xlat16_1;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    float u_xlat13;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0] * input.POSITION0.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2] * input.POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    output.mtl_Position = Globals.hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlatb0 = Globals._UVSec==half(0.0);
    u_xlat0.xy = (bool(u_xlatb0)) ? input.TEXCOORD0.xy : input.TEXCOORD1.xy;
    output.TEXCOORD0.zw = u_xlat0.xy * Globals._DetailAlbedoMap_ST.xy + Globals._DetailAlbedoMap_ST.zw;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy * Globals._MainTex_ST.xy + Globals._MainTex_ST.zw;
    u_xlat0.xyz = input.POSITION0.yyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * input.POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * input.POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyw = Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * input.POSITION0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyw + (-Globals._WorldSpaceCameraPos.xyzx.xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = rsqrt(u_xlat13);
    u_xlat1.xyz = float3(u_xlat13) * u_xlat1.xyz;
    output.TEXCOORD1.xyz = half3(u_xlat1.xyz);
    output.TEXCOORD2.w = half(u_xlat0.x);
    output.TEXCOORD2.xyz = half3(0.0, 0.0, 0.0);
    output.TEXCOORD3.w = half(u_xlat0.y);
    output.TEXCOORD3.xyz = half3(0.0, 0.0, 0.0);
    u_xlat1.x = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = rsqrt(u_xlat13);
    u_xlat1 = float4(u_xlat13) * u_xlat1.xyzz;
    u_xlat0.xyz = u_xlat1.xyw;
    output.TEXCOORD4 = half4(u_xlat0);
    u_xlat16_2.x = half(u_xlat0.y * u_xlat0.y);
    u_xlat16_2.x = half(u_xlat0.x * u_xlat0.x + (-float(u_xlat16_2.x)));
    u_xlat16_1 = half4(u_xlat1.ywzx * u_xlat1);
    u_xlat16_3.x = dot(Globals.unity_SHBr, u_xlat16_1);
    u_xlat16_3.y = dot(Globals.unity_SHBg, u_xlat16_1);
    u_xlat16_3.z = dot(Globals.unity_SHBb, u_xlat16_1);
    u_xlat16_2.xyz = Globals.unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;
    u_xlat0.w = 1.0;
    u_xlat16_3.x = half(dot(float4(Globals.unity_SHAr), u_xlat0));
    u_xlat16_3.y = half(dot(float4(Globals.unity_SHAg), u_xlat0));
    u_xlat16_3.z = half(dot(float4(Globals.unity_SHAb), u_xlat0));
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, half3(0.0, 0.0, 0.0));
    u_xlat0.xyz = log2(float3(u_xlat16_2.xyz));
    u_xlat0.xyz = u_xlat0.xyz * float3(0.416666657, 0.416666657, 0.416666657);
    u_xlat0.xyz = exp2(u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xyz * float3(1.05499995, 1.05499995, 1.05499995) + float3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat0.xyz = max(u_xlat0.xyz, float3(0.0, 0.0, 0.0));
    output.TEXCOORD5.xyz = half3(u_xlat0.xyz);
    output.TEXCOORD5.w = half(0.0);
    output.TEXCOORD6.xy = float2(0.0, 0.0);
    return output;
}


-- Fragment shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

 }
 Pass {
  Name "FORWARD_DELTA"
  Tags { "LIGHTMODE"="FORWARDADD" "SHADOWSUPPORT"="true" "RenderType"="Opaque" "PerformanceChecks"="False" }
  ZWrite Off
  Blend [_SrcBlend] One
  //////////////////////////////////
  //                              //
  //      Compiled programs       //
  //                              //
  //////////////////////////////////
//////////////////////////////////////////////////////
Keywords set in this variant: POINT 
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"
Uses vertex data channel "TexCoord0"

Constant Buffer "Globals" (258 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 32
  Matrix4x4 unity_WorldToObject at 96
  Matrix4x4 unity_MatrixVP at 160
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 _MainTex_ST at 224
  Vector4 _DetailAlbedoMap_ST at 240
  ScalarHalf _UVSec at 256
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    float4 _DetailAlbedoMap_ST;
    half _UVSec;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    half3 NORMAL0 [[ attribute(1) ]] ;
    float2 TEXCOORD0 [[ attribute(2) ]] ;
    float2 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float2 TEXCOORD6 [[ user(TEXCOORD6) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool u_xlatb0;
    float4 u_xlat1;
    float u_xlat6;
    float u_xlat7;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0] * input.POSITION0.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2] * input.POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    output.mtl_Position = Globals.hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlatb0 = Globals._UVSec==half(0.0);
    u_xlat0.xy = (bool(u_xlatb0)) ? input.TEXCOORD0.xy : input.TEXCOORD1.xy;
    output.TEXCOORD0.zw = u_xlat0.xy * Globals._DetailAlbedoMap_ST.xy + Globals._DetailAlbedoMap_ST.zw;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy * Globals._MainTex_ST.xy + Globals._MainTex_ST.zw;
    u_xlat0.xyz = input.POSITION0.yyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * input.POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * input.POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * input.POSITION0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-Globals._WorldSpaceCameraPos.xyzx.xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = rsqrt(u_xlat6);
    u_xlat1.xyz = float3(u_xlat6) * u_xlat1.xyz;
    output.TEXCOORD1.xyz = half3(u_xlat1.xyz);
    u_xlat1.xyz = (-u_xlat0.xyz) * Globals._WorldSpaceLightPos0.www + Globals._WorldSpaceLightPos0.xyz;
    output.TEXCOORD5.xyz = u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = rsqrt(u_xlat0.x);
    u_xlat0.xyw = u_xlat0.xxx * u_xlat1.xyz;
    output.TEXCOORD2.w = half(u_xlat0.x);
    output.TEXCOORD2.xyz = half3(0.0, 0.0, 0.0);
    output.TEXCOORD3.w = half(u_xlat0.y);
    output.TEXCOORD3.xyz = half3(0.0, 0.0, 0.0);
    u_xlat1.x = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat7 = rsqrt(u_xlat7);
    u_xlat0.xyz = float3(u_xlat7) * u_xlat1.xyz;
    output.TEXCOORD4 = half4(u_xlat0);
    output.TEXCOORD6.xy = float2(0.0, 0.0);
    return output;
}


-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0 sampler slot 1
Set 2D Texture "_LightTexture0" to slot 1 sampler slot 2
Set 2D Texture "unity_NHxRoughness" to slot 2 sampler slot 0

Constant Buffer "Globals" (96 bytes) on slot 0 {
  Matrix4x4 unity_WorldToLight at 32
  VectorHalf4 _LightColor0 at 0
  VectorHalf4 _Color at 8
  ScalarHalf _Metallic at 16
  ScalarHalf _Glossiness at 18
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    half4 _LightColor0;
    half4 _Color;
    half _Metallic;
    half _Glossiness;
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(0) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    sampler samplerunity_NHxRoughness [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_LightTexture0 [[ sampler (2) ]],
    texture2d<half, access::sample > _MainTex [[ texture (0) ]] ,
    texture2d<half, access::sample > _LightTexture0 [[ texture (1) ]] ,
    texture2d<half, access::sample > unity_NHxRoughness [[ texture (2) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    half3 u_xlat16_2;
    float3 u_xlat3;
    half u_xlat16_3;
    half3 u_xlat16_4;
    half3 u_xlat16_7;
    half u_xlat16_12;
    u_xlat16_0.x = dot(input.TEXCOORD4.xyz, input.TEXCOORD4.xyz);
    u_xlat16_0.x = rsqrt(u_xlat16_0.x);
    u_xlat16_0.xyz = u_xlat16_0.xxx * input.TEXCOORD4.xyz;
    u_xlat16_12 = dot((-input.TEXCOORD1.xyz), u_xlat16_0.xyz);
    u_xlat16_12 = u_xlat16_12 + u_xlat16_12;
    u_xlat16_1.xyz = u_xlat16_0.xyz * (-half3(u_xlat16_12)) + (-input.TEXCOORD1.xyz);
    u_xlat16_2.x = input.TEXCOORD2.w;
    u_xlat16_2.y = input.TEXCOORD3.w;
    u_xlat16_2.z = input.TEXCOORD4.w;
    u_xlat16_12 = dot(u_xlat16_1.xyz, u_xlat16_2.xyz);
    u_xlat16_0.x = dot(u_xlat16_0.xyz, u_xlat16_2.xyz);
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0h, 1.0h);
    u_xlat16_4.x = u_xlat16_12 * u_xlat16_12;
    u_xlat16_1.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_1.y = (-Globals._Glossiness) + half(1.0);
    u_xlat16_3 = unity_NHxRoughness.sample(samplerunity_NHxRoughness, float2(u_xlat16_1.xy)).w;
    u_xlat16_3 = u_xlat16_3 * half(16.0);
    u_xlat16_7.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_4.xyz = Globals._Color.xyz * u_xlat16_7.xyz + half3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat16_7.xyz = u_xlat16_7.xyz * Globals._Color.xyz;
    u_xlat16_4.xyz = half3(Globals._Metallic) * u_xlat16_4.xyz + half3(0.220916301, 0.220916301, 0.220916301);
    u_xlat16_4.xyz = u_xlat16_4.xyz * half3(u_xlat16_3);
    u_xlat16_1.x = (-Globals._Metallic) * half(0.779083729) + half(0.779083729);
    u_xlat16_4.xyz = u_xlat16_7.xyz * u_xlat16_1.xxx + u_xlat16_4.xyz;
    u_xlat3.xyz = input.TEXCOORD5.yyy * Globals.hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat3.xyz = Globals.hlslcc_mtx4x4unity_WorldToLight[0].xyz * input.TEXCOORD5.xxx + u_xlat3.xyz;
    u_xlat3.xyz = Globals.hlslcc_mtx4x4unity_WorldToLight[2].xyz * input.TEXCOORD5.zzz + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + Globals.hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat3.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat16_3 = _LightTexture0.sample(sampler_LightTexture0, u_xlat3.xx).w;
    u_xlat16_1.xyz = half3(u_xlat16_3) * Globals._LightColor0.xyz;
    u_xlat16_1.xyz = u_xlat16_0.xxx * u_xlat16_1.xyz;
    output.SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_1.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}


-- Hardware tier variant: Tier 2
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"
Uses vertex data channel "TexCoord0"

Constant Buffer "Globals" (258 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 32
  Matrix4x4 unity_WorldToObject at 96
  Matrix4x4 unity_MatrixVP at 160
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 _MainTex_ST at 224
  Vector4 _DetailAlbedoMap_ST at 240
  ScalarHalf _UVSec at 256
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    float4 _DetailAlbedoMap_ST;
    half _UVSec;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    half3 NORMAL0 [[ attribute(1) ]] ;
    float2 TEXCOORD0 [[ attribute(2) ]] ;
    float2 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float2 TEXCOORD6 [[ user(TEXCOORD6) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool u_xlatb0;
    float4 u_xlat1;
    float u_xlat6;
    float u_xlat7;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0] * input.POSITION0.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2] * input.POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    output.mtl_Position = Globals.hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlatb0 = Globals._UVSec==half(0.0);
    u_xlat0.xy = (bool(u_xlatb0)) ? input.TEXCOORD0.xy : input.TEXCOORD1.xy;
    output.TEXCOORD0.zw = u_xlat0.xy * Globals._DetailAlbedoMap_ST.xy + Globals._DetailAlbedoMap_ST.zw;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy * Globals._MainTex_ST.xy + Globals._MainTex_ST.zw;
    u_xlat0.xyz = input.POSITION0.yyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * input.POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * input.POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * input.POSITION0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-Globals._WorldSpaceCameraPos.xyzx.xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = rsqrt(u_xlat6);
    u_xlat1.xyz = float3(u_xlat6) * u_xlat1.xyz;
    output.TEXCOORD1.xyz = half3(u_xlat1.xyz);
    u_xlat1.xyz = (-u_xlat0.xyz) * Globals._WorldSpaceLightPos0.www + Globals._WorldSpaceLightPos0.xyz;
    output.TEXCOORD5.xyz = u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = rsqrt(u_xlat0.x);
    u_xlat0.xyw = u_xlat0.xxx * u_xlat1.xyz;
    output.TEXCOORD2.w = half(u_xlat0.x);
    output.TEXCOORD2.xyz = half3(0.0, 0.0, 0.0);
    output.TEXCOORD3.w = half(u_xlat0.y);
    output.TEXCOORD3.xyz = half3(0.0, 0.0, 0.0);
    u_xlat1.x = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat7 = rsqrt(u_xlat7);
    u_xlat0.xyz = float3(u_xlat7) * u_xlat1.xyz;
    output.TEXCOORD4 = half4(u_xlat0);
    output.TEXCOORD6.xy = float2(0.0, 0.0);
    return output;
}


-- Hardware tier variant: Tier 2
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0 sampler slot 1
Set 2D Texture "_LightTexture0" to slot 1 sampler slot 2
Set 2D Texture "unity_NHxRoughness" to slot 2 sampler slot 0

Constant Buffer "Globals" (96 bytes) on slot 0 {
  Matrix4x4 unity_WorldToLight at 32
  VectorHalf4 _LightColor0 at 0
  VectorHalf4 _Color at 8
  ScalarHalf _Metallic at 16
  ScalarHalf _Glossiness at 18
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    half4 _LightColor0;
    half4 _Color;
    half _Metallic;
    half _Glossiness;
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(0) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    sampler samplerunity_NHxRoughness [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_LightTexture0 [[ sampler (2) ]],
    texture2d<half, access::sample > _MainTex [[ texture (0) ]] ,
    texture2d<half, access::sample > _LightTexture0 [[ texture (1) ]] ,
    texture2d<half, access::sample > unity_NHxRoughness [[ texture (2) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    half3 u_xlat16_2;
    float3 u_xlat3;
    half u_xlat16_3;
    half3 u_xlat16_4;
    half3 u_xlat16_7;
    half u_xlat16_12;
    u_xlat16_0.x = dot(input.TEXCOORD4.xyz, input.TEXCOORD4.xyz);
    u_xlat16_0.x = rsqrt(u_xlat16_0.x);
    u_xlat16_0.xyz = u_xlat16_0.xxx * input.TEXCOORD4.xyz;
    u_xlat16_12 = dot((-input.TEXCOORD1.xyz), u_xlat16_0.xyz);
    u_xlat16_12 = u_xlat16_12 + u_xlat16_12;
    u_xlat16_1.xyz = u_xlat16_0.xyz * (-half3(u_xlat16_12)) + (-input.TEXCOORD1.xyz);
    u_xlat16_2.x = input.TEXCOORD2.w;
    u_xlat16_2.y = input.TEXCOORD3.w;
    u_xlat16_2.z = input.TEXCOORD4.w;
    u_xlat16_12 = dot(u_xlat16_1.xyz, u_xlat16_2.xyz);
    u_xlat16_0.x = dot(u_xlat16_0.xyz, u_xlat16_2.xyz);
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0h, 1.0h);
    u_xlat16_4.x = u_xlat16_12 * u_xlat16_12;
    u_xlat16_1.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_1.y = (-Globals._Glossiness) + half(1.0);
    u_xlat16_3 = unity_NHxRoughness.sample(samplerunity_NHxRoughness, float2(u_xlat16_1.xy)).w;
    u_xlat16_3 = u_xlat16_3 * half(16.0);
    u_xlat16_7.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_4.xyz = Globals._Color.xyz * u_xlat16_7.xyz + half3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat16_7.xyz = u_xlat16_7.xyz * Globals._Color.xyz;
    u_xlat16_4.xyz = half3(Globals._Metallic) * u_xlat16_4.xyz + half3(0.220916301, 0.220916301, 0.220916301);
    u_xlat16_4.xyz = u_xlat16_4.xyz * half3(u_xlat16_3);
    u_xlat16_1.x = (-Globals._Metallic) * half(0.779083729) + half(0.779083729);
    u_xlat16_4.xyz = u_xlat16_7.xyz * u_xlat16_1.xxx + u_xlat16_4.xyz;
    u_xlat3.xyz = input.TEXCOORD5.yyy * Globals.hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat3.xyz = Globals.hlslcc_mtx4x4unity_WorldToLight[0].xyz * input.TEXCOORD5.xxx + u_xlat3.xyz;
    u_xlat3.xyz = Globals.hlslcc_mtx4x4unity_WorldToLight[2].xyz * input.TEXCOORD5.zzz + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + Globals.hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat3.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat16_3 = _LightTexture0.sample(sampler_LightTexture0, u_xlat3.xx).w;
    u_xlat16_1.xyz = half3(u_xlat16_3) * Globals._LightColor0.xyz;
    u_xlat16_1.xyz = u_xlat16_0.xxx * u_xlat16_1.xyz;
    output.SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_1.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}


-- Hardware tier variant: Tier 3
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"
Uses vertex data channel "TexCoord0"

Constant Buffer "Globals" (258 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 32
  Matrix4x4 unity_WorldToObject at 96
  Matrix4x4 unity_MatrixVP at 160
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 _MainTex_ST at 224
  Vector4 _DetailAlbedoMap_ST at 240
  ScalarHalf _UVSec at 256
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    float4 _DetailAlbedoMap_ST;
    half _UVSec;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    half3 NORMAL0 [[ attribute(1) ]] ;
    float2 TEXCOORD0 [[ attribute(2) ]] ;
    float2 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float2 TEXCOORD6 [[ user(TEXCOORD6) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool u_xlatb0;
    float4 u_xlat1;
    float u_xlat6;
    float u_xlat7;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0] * input.POSITION0.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2] * input.POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    output.mtl_Position = Globals.hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlatb0 = Globals._UVSec==half(0.0);
    u_xlat0.xy = (bool(u_xlatb0)) ? input.TEXCOORD0.xy : input.TEXCOORD1.xy;
    output.TEXCOORD0.zw = u_xlat0.xy * Globals._DetailAlbedoMap_ST.xy + Globals._DetailAlbedoMap_ST.zw;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy * Globals._MainTex_ST.xy + Globals._MainTex_ST.zw;
    u_xlat0.xyz = input.POSITION0.yyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * input.POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * input.POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * input.POSITION0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-Globals._WorldSpaceCameraPos.xyzx.xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = rsqrt(u_xlat6);
    u_xlat1.xyz = float3(u_xlat6) * u_xlat1.xyz;
    output.TEXCOORD1.xyz = half3(u_xlat1.xyz);
    u_xlat1.xyz = (-u_xlat0.xyz) * Globals._WorldSpaceLightPos0.www + Globals._WorldSpaceLightPos0.xyz;
    output.TEXCOORD5.xyz = u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = rsqrt(u_xlat0.x);
    u_xlat0.xyw = u_xlat0.xxx * u_xlat1.xyz;
    output.TEXCOORD2.w = half(u_xlat0.x);
    output.TEXCOORD2.xyz = half3(0.0, 0.0, 0.0);
    output.TEXCOORD3.w = half(u_xlat0.y);
    output.TEXCOORD3.xyz = half3(0.0, 0.0, 0.0);
    u_xlat1.x = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat7 = rsqrt(u_xlat7);
    u_xlat0.xyz = float3(u_xlat7) * u_xlat1.xyz;
    output.TEXCOORD4 = half4(u_xlat0);
    output.TEXCOORD6.xy = float2(0.0, 0.0);
    return output;
}


-- Hardware tier variant: Tier 3
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0 sampler slot 1
Set 2D Texture "_LightTexture0" to slot 1 sampler slot 2
Set 2D Texture "unity_NHxRoughness" to slot 2 sampler slot 0

Constant Buffer "Globals" (96 bytes) on slot 0 {
  Matrix4x4 unity_WorldToLight at 32
  VectorHalf4 _LightColor0 at 0
  VectorHalf4 _Color at 8
  ScalarHalf _Metallic at 16
  ScalarHalf _Glossiness at 18
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    half4 _LightColor0;
    half4 _Color;
    half _Metallic;
    half _Glossiness;
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(0) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    sampler samplerunity_NHxRoughness [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_LightTexture0 [[ sampler (2) ]],
    texture2d<half, access::sample > _MainTex [[ texture (0) ]] ,
    texture2d<half, access::sample > _LightTexture0 [[ texture (1) ]] ,
    texture2d<half, access::sample > unity_NHxRoughness [[ texture (2) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    half3 u_xlat16_2;
    float3 u_xlat3;
    half u_xlat16_3;
    half3 u_xlat16_4;
    half3 u_xlat16_7;
    half u_xlat16_12;
    u_xlat16_0.x = dot(input.TEXCOORD4.xyz, input.TEXCOORD4.xyz);
    u_xlat16_0.x = rsqrt(u_xlat16_0.x);
    u_xlat16_0.xyz = u_xlat16_0.xxx * input.TEXCOORD4.xyz;
    u_xlat16_12 = dot((-input.TEXCOORD1.xyz), u_xlat16_0.xyz);
    u_xlat16_12 = u_xlat16_12 + u_xlat16_12;
    u_xlat16_1.xyz = u_xlat16_0.xyz * (-half3(u_xlat16_12)) + (-input.TEXCOORD1.xyz);
    u_xlat16_2.x = input.TEXCOORD2.w;
    u_xlat16_2.y = input.TEXCOORD3.w;
    u_xlat16_2.z = input.TEXCOORD4.w;
    u_xlat16_12 = dot(u_xlat16_1.xyz, u_xlat16_2.xyz);
    u_xlat16_0.x = dot(u_xlat16_0.xyz, u_xlat16_2.xyz);
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0h, 1.0h);
    u_xlat16_4.x = u_xlat16_12 * u_xlat16_12;
    u_xlat16_1.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_1.y = (-Globals._Glossiness) + half(1.0);
    u_xlat16_3 = unity_NHxRoughness.sample(samplerunity_NHxRoughness, float2(u_xlat16_1.xy)).w;
    u_xlat16_3 = u_xlat16_3 * half(16.0);
    u_xlat16_7.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_4.xyz = Globals._Color.xyz * u_xlat16_7.xyz + half3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat16_7.xyz = u_xlat16_7.xyz * Globals._Color.xyz;
    u_xlat16_4.xyz = half3(Globals._Metallic) * u_xlat16_4.xyz + half3(0.220916301, 0.220916301, 0.220916301);
    u_xlat16_4.xyz = u_xlat16_4.xyz * half3(u_xlat16_3);
    u_xlat16_1.x = (-Globals._Metallic) * half(0.779083729) + half(0.779083729);
    u_xlat16_4.xyz = u_xlat16_7.xyz * u_xlat16_1.xxx + u_xlat16_4.xyz;
    u_xlat3.xyz = input.TEXCOORD5.yyy * Globals.hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat3.xyz = Globals.hlslcc_mtx4x4unity_WorldToLight[0].xyz * input.TEXCOORD5.xxx + u_xlat3.xyz;
    u_xlat3.xyz = Globals.hlslcc_mtx4x4unity_WorldToLight[2].xyz * input.TEXCOORD5.zzz + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + Globals.hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat3.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat16_3 = _LightTexture0.sample(sampler_LightTexture0, u_xlat3.xx).w;
    u_xlat16_1.xyz = half3(u_xlat16_3) * Globals._LightColor0.xyz;
    u_xlat16_1.xyz = u_xlat16_0.xxx * u_xlat16_1.xyz;
    output.SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_1.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}


-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"
Uses vertex data channel "TexCoord0"

Constant Buffer "Globals" (258 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 32
  Matrix4x4 unity_WorldToObject at 96
  Matrix4x4 unity_MatrixVP at 160
  Vector3 _WorldSpaceCameraPos at 0
  VectorHalf4 _WorldSpaceLightPos0 at 16
  Vector4 _MainTex_ST at 224
  Vector4 _DetailAlbedoMap_ST at 240
  ScalarHalf _UVSec at 256
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    half4 _WorldSpaceLightPos0;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    float4 _DetailAlbedoMap_ST;
    half _UVSec;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    half3 NORMAL0 [[ attribute(1) ]] ;
    float2 TEXCOORD0 [[ attribute(2) ]] ;
    float2 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float2 TEXCOORD6 [[ user(TEXCOORD6) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool u_xlatb0;
    float4 u_xlat1;
    float u_xlat6;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0] * input.POSITION0.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2] * input.POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    output.mtl_Position = Globals.hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlatb0 = Globals._UVSec==half(0.0);
    u_xlat0.xy = (bool(u_xlatb0)) ? input.TEXCOORD0.xy : input.TEXCOORD1.xy;
    output.TEXCOORD0.zw = u_xlat0.xy * Globals._DetailAlbedoMap_ST.xy + Globals._DetailAlbedoMap_ST.zw;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy * Globals._MainTex_ST.xy + Globals._MainTex_ST.zw;
    u_xlat0.xyz = input.POSITION0.yyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * input.POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * input.POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * input.POSITION0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-Globals._WorldSpaceCameraPos.xyzx.xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = rsqrt(u_xlat6);
    u_xlat1.xyz = float3(u_xlat6) * u_xlat1.xyz;
    output.TEXCOORD1.xyz = half3(u_xlat1.xyz);
    u_xlat1.xyw = (-u_xlat0.xyz) * float3(Globals._WorldSpaceLightPos0.www) + float3(Globals._WorldSpaceLightPos0.xyz);
    output.TEXCOORD5.xyz = u_xlat0.xyz;
    output.TEXCOORD2.w = half(u_xlat1.x);
    output.TEXCOORD2.xyz = half3(0.0, 0.0, 0.0);
    output.TEXCOORD3.w = half(u_xlat1.y);
    output.TEXCOORD3.xyz = half3(0.0, 0.0, 0.0);
    u_xlat0.x = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = rsqrt(u_xlat6);
    u_xlat1.xyz = float3(u_xlat6) * u_xlat0.xyz;
    output.TEXCOORD4 = half4(u_xlat1);
    output.TEXCOORD6.xy = float2(0.0, 0.0);
    return output;
}


-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0 sampler slot 1
Set 2D Texture "unity_NHxRoughness" to slot 1 sampler slot 0

Constant Buffer "Globals" (20 bytes) on slot 0 {
  VectorHalf4 _LightColor0 at 0
  VectorHalf4 _Color at 8
  ScalarHalf _Metallic at 16
  ScalarHalf _Glossiness at 18
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    half4 _LightColor0;
    half4 _Color;
    half _Metallic;
    half _Glossiness;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(0) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    sampler samplerunity_NHxRoughness [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture (0) ]] ,
    texture2d<half, access::sample > unity_NHxRoughness [[ texture (1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    half3 u_xlat16_2;
    half u_xlat16_3;
    half3 u_xlat16_7;
    half u_xlat16_12;
    u_xlat16_0.x = dot(input.TEXCOORD4.xyz, input.TEXCOORD4.xyz);
    u_xlat16_0.x = rsqrt(u_xlat16_0.x);
    u_xlat16_0.xyz = u_xlat16_0.xxx * input.TEXCOORD4.xyz;
    u_xlat16_12 = dot((-input.TEXCOORD1.xyz), u_xlat16_0.xyz);
    u_xlat16_12 = u_xlat16_12 + u_xlat16_12;
    u_xlat16_1.xyz = u_xlat16_0.xyz * (-half3(u_xlat16_12)) + (-input.TEXCOORD1.xyz);
    u_xlat16_2.x = input.TEXCOORD2.w;
    u_xlat16_2.y = input.TEXCOORD3.w;
    u_xlat16_2.z = input.TEXCOORD4.w;
    u_xlat16_12 = dot(u_xlat16_1.xyz, u_xlat16_2.xyz);
    u_xlat16_0.x = dot(u_xlat16_0.xyz, u_xlat16_2.xyz);
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0h, 1.0h);
    u_xlat16_0.xyz = u_xlat16_0.xxx * Globals._LightColor0.xyz;
    u_xlat16_12 = u_xlat16_12 * u_xlat16_12;
    u_xlat16_1.x = u_xlat16_12 * u_xlat16_12;
    u_xlat16_1.y = (-Globals._Glossiness) + half(1.0);
    u_xlat16_3 = unity_NHxRoughness.sample(samplerunity_NHxRoughness, float2(u_xlat16_1.xy)).w;
    u_xlat16_3 = u_xlat16_3 * half(16.0);
    u_xlat16_7.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = Globals._Color.xyz * u_xlat16_7.xyz + half3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat16_7.xyz = u_xlat16_7.xyz * Globals._Color.xyz;
    u_xlat16_1.xyz = half3(Globals._Metallic) * u_xlat16_1.xyz + half3(0.220916301, 0.220916301, 0.220916301);
    u_xlat16_1.xyz = u_xlat16_1.xyz * half3(u_xlat16_3);
    u_xlat16_12 = (-Globals._Metallic) * half(0.779083729) + half(0.779083729);
    u_xlat16_1.xyz = u_xlat16_7.xyz * half3(u_xlat16_12) + u_xlat16_1.xyz;
    output.SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}


-- Hardware tier variant: Tier 2
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"
Uses vertex data channel "TexCoord0"

Constant Buffer "Globals" (258 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 32
  Matrix4x4 unity_WorldToObject at 96
  Matrix4x4 unity_MatrixVP at 160
  Vector3 _WorldSpaceCameraPos at 0
  VectorHalf4 _WorldSpaceLightPos0 at 16
  Vector4 _MainTex_ST at 224
  Vector4 _DetailAlbedoMap_ST at 240
  ScalarHalf _UVSec at 256
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    half4 _WorldSpaceLightPos0;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    float4 _DetailAlbedoMap_ST;
    half _UVSec;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    half3 NORMAL0 [[ attribute(1) ]] ;
    float2 TEXCOORD0 [[ attribute(2) ]] ;
    float2 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float2 TEXCOORD6 [[ user(TEXCOORD6) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool u_xlatb0;
    float4 u_xlat1;
    float u_xlat6;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0] * input.POSITION0.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2] * input.POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    output.mtl_Position = Globals.hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlatb0 = Globals._UVSec==half(0.0);
    u_xlat0.xy = (bool(u_xlatb0)) ? input.TEXCOORD0.xy : input.TEXCOORD1.xy;
    output.TEXCOORD0.zw = u_xlat0.xy * Globals._DetailAlbedoMap_ST.xy + Globals._DetailAlbedoMap_ST.zw;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy * Globals._MainTex_ST.xy + Globals._MainTex_ST.zw;
    u_xlat0.xyz = input.POSITION0.yyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * input.POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * input.POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * input.POSITION0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-Globals._WorldSpaceCameraPos.xyzx.xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = rsqrt(u_xlat6);
    u_xlat1.xyz = float3(u_xlat6) * u_xlat1.xyz;
    output.TEXCOORD1.xyz = half3(u_xlat1.xyz);
    u_xlat1.xyw = (-u_xlat0.xyz) * float3(Globals._WorldSpaceLightPos0.www) + float3(Globals._WorldSpaceLightPos0.xyz);
    output.TEXCOORD5.xyz = u_xlat0.xyz;
    output.TEXCOORD2.w = half(u_xlat1.x);
    output.TEXCOORD2.xyz = half3(0.0, 0.0, 0.0);
    output.TEXCOORD3.w = half(u_xlat1.y);
    output.TEXCOORD3.xyz = half3(0.0, 0.0, 0.0);
    u_xlat0.x = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = rsqrt(u_xlat6);
    u_xlat1.xyz = float3(u_xlat6) * u_xlat0.xyz;
    output.TEXCOORD4 = half4(u_xlat1);
    output.TEXCOORD6.xy = float2(0.0, 0.0);
    return output;
}


-- Hardware tier variant: Tier 2
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0 sampler slot 1
Set 2D Texture "unity_NHxRoughness" to slot 1 sampler slot 0

Constant Buffer "Globals" (20 bytes) on slot 0 {
  VectorHalf4 _LightColor0 at 0
  VectorHalf4 _Color at 8
  ScalarHalf _Metallic at 16
  ScalarHalf _Glossiness at 18
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    half4 _LightColor0;
    half4 _Color;
    half _Metallic;
    half _Glossiness;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(0) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    sampler samplerunity_NHxRoughness [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture (0) ]] ,
    texture2d<half, access::sample > unity_NHxRoughness [[ texture (1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    half3 u_xlat16_2;
    half u_xlat16_3;
    half3 u_xlat16_7;
    half u_xlat16_12;
    u_xlat16_0.x = dot(input.TEXCOORD4.xyz, input.TEXCOORD4.xyz);
    u_xlat16_0.x = rsqrt(u_xlat16_0.x);
    u_xlat16_0.xyz = u_xlat16_0.xxx * input.TEXCOORD4.xyz;
    u_xlat16_12 = dot((-input.TEXCOORD1.xyz), u_xlat16_0.xyz);
    u_xlat16_12 = u_xlat16_12 + u_xlat16_12;
    u_xlat16_1.xyz = u_xlat16_0.xyz * (-half3(u_xlat16_12)) + (-input.TEXCOORD1.xyz);
    u_xlat16_2.x = input.TEXCOORD2.w;
    u_xlat16_2.y = input.TEXCOORD3.w;
    u_xlat16_2.z = input.TEXCOORD4.w;
    u_xlat16_12 = dot(u_xlat16_1.xyz, u_xlat16_2.xyz);
    u_xlat16_0.x = dot(u_xlat16_0.xyz, u_xlat16_2.xyz);
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0h, 1.0h);
    u_xlat16_0.xyz = u_xlat16_0.xxx * Globals._LightColor0.xyz;
    u_xlat16_12 = u_xlat16_12 * u_xlat16_12;
    u_xlat16_1.x = u_xlat16_12 * u_xlat16_12;
    u_xlat16_1.y = (-Globals._Glossiness) + half(1.0);
    u_xlat16_3 = unity_NHxRoughness.sample(samplerunity_NHxRoughness, float2(u_xlat16_1.xy)).w;
    u_xlat16_3 = u_xlat16_3 * half(16.0);
    u_xlat16_7.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = Globals._Color.xyz * u_xlat16_7.xyz + half3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat16_7.xyz = u_xlat16_7.xyz * Globals._Color.xyz;
    u_xlat16_1.xyz = half3(Globals._Metallic) * u_xlat16_1.xyz + half3(0.220916301, 0.220916301, 0.220916301);
    u_xlat16_1.xyz = u_xlat16_1.xyz * half3(u_xlat16_3);
    u_xlat16_12 = (-Globals._Metallic) * half(0.779083729) + half(0.779083729);
    u_xlat16_1.xyz = u_xlat16_7.xyz * half3(u_xlat16_12) + u_xlat16_1.xyz;
    output.SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}


-- Hardware tier variant: Tier 3
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"
Uses vertex data channel "TexCoord0"

Constant Buffer "Globals" (258 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 32
  Matrix4x4 unity_WorldToObject at 96
  Matrix4x4 unity_MatrixVP at 160
  Vector3 _WorldSpaceCameraPos at 0
  VectorHalf4 _WorldSpaceLightPos0 at 16
  Vector4 _MainTex_ST at 224
  Vector4 _DetailAlbedoMap_ST at 240
  ScalarHalf _UVSec at 256
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    half4 _WorldSpaceLightPos0;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    float4 _DetailAlbedoMap_ST;
    half _UVSec;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    half3 NORMAL0 [[ attribute(1) ]] ;
    float2 TEXCOORD0 [[ attribute(2) ]] ;
    float2 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float2 TEXCOORD6 [[ user(TEXCOORD6) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool u_xlatb0;
    float4 u_xlat1;
    float u_xlat6;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0] * input.POSITION0.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2] * input.POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    output.mtl_Position = Globals.hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlatb0 = Globals._UVSec==half(0.0);
    u_xlat0.xy = (bool(u_xlatb0)) ? input.TEXCOORD0.xy : input.TEXCOORD1.xy;
    output.TEXCOORD0.zw = u_xlat0.xy * Globals._DetailAlbedoMap_ST.xy + Globals._DetailAlbedoMap_ST.zw;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy * Globals._MainTex_ST.xy + Globals._MainTex_ST.zw;
    u_xlat0.xyz = input.POSITION0.yyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * input.POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * input.POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * input.POSITION0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-Globals._WorldSpaceCameraPos.xyzx.xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = rsqrt(u_xlat6);
    u_xlat1.xyz = float3(u_xlat6) * u_xlat1.xyz;
    output.TEXCOORD1.xyz = half3(u_xlat1.xyz);
    u_xlat1.xyw = (-u_xlat0.xyz) * float3(Globals._WorldSpaceLightPos0.www) + float3(Globals._WorldSpaceLightPos0.xyz);
    output.TEXCOORD5.xyz = u_xlat0.xyz;
    output.TEXCOORD2.w = half(u_xlat1.x);
    output.TEXCOORD2.xyz = half3(0.0, 0.0, 0.0);
    output.TEXCOORD3.w = half(u_xlat1.y);
    output.TEXCOORD3.xyz = half3(0.0, 0.0, 0.0);
    u_xlat0.x = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = rsqrt(u_xlat6);
    u_xlat1.xyz = float3(u_xlat6) * u_xlat0.xyz;
    output.TEXCOORD4 = half4(u_xlat1);
    output.TEXCOORD6.xy = float2(0.0, 0.0);
    return output;
}


-- Hardware tier variant: Tier 3
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0 sampler slot 1
Set 2D Texture "unity_NHxRoughness" to slot 1 sampler slot 0

Constant Buffer "Globals" (20 bytes) on slot 0 {
  VectorHalf4 _LightColor0 at 0
  VectorHalf4 _Color at 8
  ScalarHalf _Metallic at 16
  ScalarHalf _Glossiness at 18
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    half4 _LightColor0;
    half4 _Color;
    half _Metallic;
    half _Glossiness;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(0) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    sampler samplerunity_NHxRoughness [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture (0) ]] ,
    texture2d<half, access::sample > unity_NHxRoughness [[ texture (1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    half3 u_xlat16_2;
    half u_xlat16_3;
    half3 u_xlat16_7;
    half u_xlat16_12;
    u_xlat16_0.x = dot(input.TEXCOORD4.xyz, input.TEXCOORD4.xyz);
    u_xlat16_0.x = rsqrt(u_xlat16_0.x);
    u_xlat16_0.xyz = u_xlat16_0.xxx * input.TEXCOORD4.xyz;
    u_xlat16_12 = dot((-input.TEXCOORD1.xyz), u_xlat16_0.xyz);
    u_xlat16_12 = u_xlat16_12 + u_xlat16_12;
    u_xlat16_1.xyz = u_xlat16_0.xyz * (-half3(u_xlat16_12)) + (-input.TEXCOORD1.xyz);
    u_xlat16_2.x = input.TEXCOORD2.w;
    u_xlat16_2.y = input.TEXCOORD3.w;
    u_xlat16_2.z = input.TEXCOORD4.w;
    u_xlat16_12 = dot(u_xlat16_1.xyz, u_xlat16_2.xyz);
    u_xlat16_0.x = dot(u_xlat16_0.xyz, u_xlat16_2.xyz);
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0h, 1.0h);
    u_xlat16_0.xyz = u_xlat16_0.xxx * Globals._LightColor0.xyz;
    u_xlat16_12 = u_xlat16_12 * u_xlat16_12;
    u_xlat16_1.x = u_xlat16_12 * u_xlat16_12;
    u_xlat16_1.y = (-Globals._Glossiness) + half(1.0);
    u_xlat16_3 = unity_NHxRoughness.sample(samplerunity_NHxRoughness, float2(u_xlat16_1.xy)).w;
    u_xlat16_3 = u_xlat16_3 * half(16.0);
    u_xlat16_7.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = Globals._Color.xyz * u_xlat16_7.xyz + half3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat16_7.xyz = u_xlat16_7.xyz * Globals._Color.xyz;
    u_xlat16_1.xyz = half3(Globals._Metallic) * u_xlat16_1.xyz + half3(0.220916301, 0.220916301, 0.220916301);
    u_xlat16_1.xyz = u_xlat16_1.xyz * half3(u_xlat16_3);
    u_xlat16_12 = (-Globals._Metallic) * half(0.779083729) + half(0.779083729);
    u_xlat16_1.xyz = u_xlat16_7.xyz * half3(u_xlat16_12) + u_xlat16_1.xyz;
    output.SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}


-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"
Uses vertex data channel "TexCoord0"

Constant Buffer "Globals" (258 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 32
  Matrix4x4 unity_WorldToObject at 96
  Matrix4x4 unity_MatrixVP at 160
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 _MainTex_ST at 224
  Vector4 _DetailAlbedoMap_ST at 240
  ScalarHalf _UVSec at 256
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    float4 _DetailAlbedoMap_ST;
    half _UVSec;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    half3 NORMAL0 [[ attribute(1) ]] ;
    float2 TEXCOORD0 [[ attribute(2) ]] ;
    float2 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float2 TEXCOORD6 [[ user(TEXCOORD6) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool u_xlatb0;
    float4 u_xlat1;
    float u_xlat6;
    float u_xlat7;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0] * input.POSITION0.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2] * input.POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    output.mtl_Position = Globals.hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlatb0 = Globals._UVSec==half(0.0);
    u_xlat0.xy = (bool(u_xlatb0)) ? input.TEXCOORD0.xy : input.TEXCOORD1.xy;
    output.TEXCOORD0.zw = u_xlat0.xy * Globals._DetailAlbedoMap_ST.xy + Globals._DetailAlbedoMap_ST.zw;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy * Globals._MainTex_ST.xy + Globals._MainTex_ST.zw;
    u_xlat0.xyz = input.POSITION0.yyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * input.POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * input.POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * input.POSITION0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-Globals._WorldSpaceCameraPos.xyzx.xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = rsqrt(u_xlat6);
    u_xlat1.xyz = float3(u_xlat6) * u_xlat1.xyz;
    output.TEXCOORD1.xyz = half3(u_xlat1.xyz);
    u_xlat1.xyz = (-u_xlat0.xyz) * Globals._WorldSpaceLightPos0.www + Globals._WorldSpaceLightPos0.xyz;
    output.TEXCOORD5.xyz = u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = rsqrt(u_xlat0.x);
    u_xlat0.xyw = u_xlat0.xxx * u_xlat1.xyz;
    output.TEXCOORD2.w = half(u_xlat0.x);
    output.TEXCOORD2.xyz = half3(0.0, 0.0, 0.0);
    output.TEXCOORD3.w = half(u_xlat0.y);
    output.TEXCOORD3.xyz = half3(0.0, 0.0, 0.0);
    u_xlat1.x = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat7 = rsqrt(u_xlat7);
    u_xlat0.xyz = float3(u_xlat7) * u_xlat1.xyz;
    output.TEXCOORD4 = half4(u_xlat0);
    output.TEXCOORD6.xy = float2(0.0, 0.0);
    return output;
}


-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0 sampler slot 1
Set 2D Texture "_LightTexture0" to slot 1 sampler slot 2
Set 2D Texture "_LightTextureB0" to slot 2 sampler slot 3
Set 2D Texture "unity_NHxRoughness" to slot 3 sampler slot 0

Constant Buffer "Globals" (96 bytes) on slot 0 {
  Matrix4x4 unity_WorldToLight at 32
  VectorHalf4 _LightColor0 at 0
  VectorHalf4 _Color at 8
  ScalarHalf _Metallic at 16
  ScalarHalf _Glossiness at 18
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    half4 _LightColor0;
    half4 _Color;
    half _Metallic;
    half _Glossiness;
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(0) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    sampler samplerunity_NHxRoughness [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_LightTexture0 [[ sampler (2) ]],
    sampler sampler_LightTextureB0 [[ sampler (3) ]],
    texture2d<half, access::sample > _MainTex [[ texture (0) ]] ,
    texture2d<half, access::sample > _LightTexture0 [[ texture (1) ]] ,
    texture2d<half, access::sample > _LightTextureB0 [[ texture (2) ]] ,
    texture2d<half, access::sample > unity_NHxRoughness [[ texture (3) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    half3 u_xlat16_2;
    float2 u_xlat3;
    half u_xlat16_3;
    half3 u_xlat16_4;
    half3 u_xlat16_7;
    bool u_xlatb7;
    float u_xlat11;
    half u_xlat16_11;
    half u_xlat16_12;
    u_xlat16_0.x = dot(input.TEXCOORD4.xyz, input.TEXCOORD4.xyz);
    u_xlat16_0.x = rsqrt(u_xlat16_0.x);
    u_xlat16_0.xyz = u_xlat16_0.xxx * input.TEXCOORD4.xyz;
    u_xlat16_12 = dot((-input.TEXCOORD1.xyz), u_xlat16_0.xyz);
    u_xlat16_12 = u_xlat16_12 + u_xlat16_12;
    u_xlat16_1.xyz = u_xlat16_0.xyz * (-half3(u_xlat16_12)) + (-input.TEXCOORD1.xyz);
    u_xlat16_2.x = input.TEXCOORD2.w;
    u_xlat16_2.y = input.TEXCOORD3.w;
    u_xlat16_2.z = input.TEXCOORD4.w;
    u_xlat16_12 = dot(u_xlat16_1.xyz, u_xlat16_2.xyz);
    u_xlat16_0.x = dot(u_xlat16_0.xyz, u_xlat16_2.xyz);
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0h, 1.0h);
    u_xlat16_4.x = u_xlat16_12 * u_xlat16_12;
    u_xlat16_1.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_1.y = (-Globals._Glossiness) + half(1.0);
    u_xlat16_3 = unity_NHxRoughness.sample(samplerunity_NHxRoughness, float2(u_xlat16_1.xy)).w;
    u_xlat16_3 = u_xlat16_3 * half(16.0);
    u_xlat16_7.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_4.xyz = Globals._Color.xyz * u_xlat16_7.xyz + half3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat16_7.xyz = u_xlat16_7.xyz * Globals._Color.xyz;
    u_xlat16_4.xyz = half3(Globals._Metallic) * u_xlat16_4.xyz + half3(0.220916301, 0.220916301, 0.220916301);
    u_xlat16_4.xyz = u_xlat16_4.xyz * half3(u_xlat16_3);
    u_xlat16_1.x = (-Globals._Metallic) * half(0.779083729) + half(0.779083729);
    u_xlat16_4.xyz = u_xlat16_7.xyz * u_xlat16_1.xxx + u_xlat16_4.xyz;
    u_xlat1 = input.TEXCOORD5.yyyy * Globals.hlslcc_mtx4x4unity_WorldToLight[1];
    u_xlat1 = Globals.hlslcc_mtx4x4unity_WorldToLight[0] * input.TEXCOORD5.xxxx + u_xlat1;
    u_xlat1 = Globals.hlslcc_mtx4x4unity_WorldToLight[2] * input.TEXCOORD5.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + Globals.hlslcc_mtx4x4unity_WorldToLight[3];
    u_xlat3.xy = u_xlat1.xy / u_xlat1.ww;
    u_xlat3.xy = u_xlat3.xy + float2(0.5, 0.5);
    u_xlat16_3 = _LightTexture0.sample(sampler_LightTexture0, u_xlat3.xy).w;
    u_xlatb7 = 0.0<u_xlat1.z;
    u_xlat11 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat16_11 = _LightTextureB0.sample(sampler_LightTextureB0, float2(u_xlat11)).w;
    u_xlat16_2.x = (u_xlatb7) ? half(1.0) : half(0.0);
    u_xlat16_2.x = u_xlat16_3 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_11 * u_xlat16_2.x;
    u_xlat16_2.xyz = u_xlat16_2.xxx * Globals._LightColor0.xyz;
    u_xlat16_2.xyz = u_xlat16_0.xxx * u_xlat16_2.xyz;
    output.SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}


-- Hardware tier variant: Tier 2
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"
Uses vertex data channel "TexCoord0"

Constant Buffer "Globals" (258 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 32
  Matrix4x4 unity_WorldToObject at 96
  Matrix4x4 unity_MatrixVP at 160
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 _MainTex_ST at 224
  Vector4 _DetailAlbedoMap_ST at 240
  ScalarHalf _UVSec at 256
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    float4 _DetailAlbedoMap_ST;
    half _UVSec;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    half3 NORMAL0 [[ attribute(1) ]] ;
    float2 TEXCOORD0 [[ attribute(2) ]] ;
    float2 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float2 TEXCOORD6 [[ user(TEXCOORD6) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool u_xlatb0;
    float4 u_xlat1;
    float u_xlat6;
    float u_xlat7;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0] * input.POSITION0.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2] * input.POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    output.mtl_Position = Globals.hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlatb0 = Globals._UVSec==half(0.0);
    u_xlat0.xy = (bool(u_xlatb0)) ? input.TEXCOORD0.xy : input.TEXCOORD1.xy;
    output.TEXCOORD0.zw = u_xlat0.xy * Globals._DetailAlbedoMap_ST.xy + Globals._DetailAlbedoMap_ST.zw;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy * Globals._MainTex_ST.xy + Globals._MainTex_ST.zw;
    u_xlat0.xyz = input.POSITION0.yyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * input.POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * input.POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * input.POSITION0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-Globals._WorldSpaceCameraPos.xyzx.xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = rsqrt(u_xlat6);
    u_xlat1.xyz = float3(u_xlat6) * u_xlat1.xyz;
    output.TEXCOORD1.xyz = half3(u_xlat1.xyz);
    u_xlat1.xyz = (-u_xlat0.xyz) * Globals._WorldSpaceLightPos0.www + Globals._WorldSpaceLightPos0.xyz;
    output.TEXCOORD5.xyz = u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = rsqrt(u_xlat0.x);
    u_xlat0.xyw = u_xlat0.xxx * u_xlat1.xyz;
    output.TEXCOORD2.w = half(u_xlat0.x);
    output.TEXCOORD2.xyz = half3(0.0, 0.0, 0.0);
    output.TEXCOORD3.w = half(u_xlat0.y);
    output.TEXCOORD3.xyz = half3(0.0, 0.0, 0.0);
    u_xlat1.x = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat7 = rsqrt(u_xlat7);
    u_xlat0.xyz = float3(u_xlat7) * u_xlat1.xyz;
    output.TEXCOORD4 = half4(u_xlat0);
    output.TEXCOORD6.xy = float2(0.0, 0.0);
    return output;
}


-- Hardware tier variant: Tier 2
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0 sampler slot 1
Set 2D Texture "_LightTexture0" to slot 1 sampler slot 2
Set 2D Texture "_LightTextureB0" to slot 2 sampler slot 3
Set 2D Texture "unity_NHxRoughness" to slot 3 sampler slot 0

Constant Buffer "Globals" (96 bytes) on slot 0 {
  Matrix4x4 unity_WorldToLight at 32
  VectorHalf4 _LightColor0 at 0
  VectorHalf4 _Color at 8
  ScalarHalf _Metallic at 16
  ScalarHalf _Glossiness at 18
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    half4 _LightColor0;
    half4 _Color;
    half _Metallic;
    half _Glossiness;
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(0) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    sampler samplerunity_NHxRoughness [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_LightTexture0 [[ sampler (2) ]],
    sampler sampler_LightTextureB0 [[ sampler (3) ]],
    texture2d<half, access::sample > _MainTex [[ texture (0) ]] ,
    texture2d<half, access::sample > _LightTexture0 [[ texture (1) ]] ,
    texture2d<half, access::sample > _LightTextureB0 [[ texture (2) ]] ,
    texture2d<half, access::sample > unity_NHxRoughness [[ texture (3) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    half3 u_xlat16_2;
    float2 u_xlat3;
    half u_xlat16_3;
    half3 u_xlat16_4;
    half3 u_xlat16_7;
    bool u_xlatb7;
    float u_xlat11;
    half u_xlat16_11;
    half u_xlat16_12;
    u_xlat16_0.x = dot(input.TEXCOORD4.xyz, input.TEXCOORD4.xyz);
    u_xlat16_0.x = rsqrt(u_xlat16_0.x);
    u_xlat16_0.xyz = u_xlat16_0.xxx * input.TEXCOORD4.xyz;
    u_xlat16_12 = dot((-input.TEXCOORD1.xyz), u_xlat16_0.xyz);
    u_xlat16_12 = u_xlat16_12 + u_xlat16_12;
    u_xlat16_1.xyz = u_xlat16_0.xyz * (-half3(u_xlat16_12)) + (-input.TEXCOORD1.xyz);
    u_xlat16_2.x = input.TEXCOORD2.w;
    u_xlat16_2.y = input.TEXCOORD3.w;
    u_xlat16_2.z = input.TEXCOORD4.w;
    u_xlat16_12 = dot(u_xlat16_1.xyz, u_xlat16_2.xyz);
    u_xlat16_0.x = dot(u_xlat16_0.xyz, u_xlat16_2.xyz);
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0h, 1.0h);
    u_xlat16_4.x = u_xlat16_12 * u_xlat16_12;
    u_xlat16_1.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_1.y = (-Globals._Glossiness) + half(1.0);
    u_xlat16_3 = unity_NHxRoughness.sample(samplerunity_NHxRoughness, float2(u_xlat16_1.xy)).w;
    u_xlat16_3 = u_xlat16_3 * half(16.0);
    u_xlat16_7.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_4.xyz = Globals._Color.xyz * u_xlat16_7.xyz + half3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat16_7.xyz = u_xlat16_7.xyz * Globals._Color.xyz;
    u_xlat16_4.xyz = half3(Globals._Metallic) * u_xlat16_4.xyz + half3(0.220916301, 0.220916301, 0.220916301);
    u_xlat16_4.xyz = u_xlat16_4.xyz * half3(u_xlat16_3);
    u_xlat16_1.x = (-Globals._Metallic) * half(0.779083729) + half(0.779083729);
    u_xlat16_4.xyz = u_xlat16_7.xyz * u_xlat16_1.xxx + u_xlat16_4.xyz;
    u_xlat1 = input.TEXCOORD5.yyyy * Globals.hlslcc_mtx4x4unity_WorldToLight[1];
    u_xlat1 = Globals.hlslcc_mtx4x4unity_WorldToLight[0] * input.TEXCOORD5.xxxx + u_xlat1;
    u_xlat1 = Globals.hlslcc_mtx4x4unity_WorldToLight[2] * input.TEXCOORD5.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + Globals.hlslcc_mtx4x4unity_WorldToLight[3];
    u_xlat3.xy = u_xlat1.xy / u_xlat1.ww;
    u_xlat3.xy = u_xlat3.xy + float2(0.5, 0.5);
    u_xlat16_3 = _LightTexture0.sample(sampler_LightTexture0, u_xlat3.xy).w;
    u_xlatb7 = 0.0<u_xlat1.z;
    u_xlat11 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat16_11 = _LightTextureB0.sample(sampler_LightTextureB0, float2(u_xlat11)).w;
    u_xlat16_2.x = (u_xlatb7) ? half(1.0) : half(0.0);
    u_xlat16_2.x = u_xlat16_3 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_11 * u_xlat16_2.x;
    u_xlat16_2.xyz = u_xlat16_2.xxx * Globals._LightColor0.xyz;
    u_xlat16_2.xyz = u_xlat16_0.xxx * u_xlat16_2.xyz;
    output.SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}


-- Hardware tier variant: Tier 3
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"
Uses vertex data channel "TexCoord0"

Constant Buffer "Globals" (258 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 32
  Matrix4x4 unity_WorldToObject at 96
  Matrix4x4 unity_MatrixVP at 160
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 _MainTex_ST at 224
  Vector4 _DetailAlbedoMap_ST at 240
  ScalarHalf _UVSec at 256
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    float4 _DetailAlbedoMap_ST;
    half _UVSec;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    half3 NORMAL0 [[ attribute(1) ]] ;
    float2 TEXCOORD0 [[ attribute(2) ]] ;
    float2 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float2 TEXCOORD6 [[ user(TEXCOORD6) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool u_xlatb0;
    float4 u_xlat1;
    float u_xlat6;
    float u_xlat7;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0] * input.POSITION0.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2] * input.POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    output.mtl_Position = Globals.hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlatb0 = Globals._UVSec==half(0.0);
    u_xlat0.xy = (bool(u_xlatb0)) ? input.TEXCOORD0.xy : input.TEXCOORD1.xy;
    output.TEXCOORD0.zw = u_xlat0.xy * Globals._DetailAlbedoMap_ST.xy + Globals._DetailAlbedoMap_ST.zw;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy * Globals._MainTex_ST.xy + Globals._MainTex_ST.zw;
    u_xlat0.xyz = input.POSITION0.yyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * input.POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * input.POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * input.POSITION0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-Globals._WorldSpaceCameraPos.xyzx.xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = rsqrt(u_xlat6);
    u_xlat1.xyz = float3(u_xlat6) * u_xlat1.xyz;
    output.TEXCOORD1.xyz = half3(u_xlat1.xyz);
    u_xlat1.xyz = (-u_xlat0.xyz) * Globals._WorldSpaceLightPos0.www + Globals._WorldSpaceLightPos0.xyz;
    output.TEXCOORD5.xyz = u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = rsqrt(u_xlat0.x);
    u_xlat0.xyw = u_xlat0.xxx * u_xlat1.xyz;
    output.TEXCOORD2.w = half(u_xlat0.x);
    output.TEXCOORD2.xyz = half3(0.0, 0.0, 0.0);
    output.TEXCOORD3.w = half(u_xlat0.y);
    output.TEXCOORD3.xyz = half3(0.0, 0.0, 0.0);
    u_xlat1.x = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat7 = rsqrt(u_xlat7);
    u_xlat0.xyz = float3(u_xlat7) * u_xlat1.xyz;
    output.TEXCOORD4 = half4(u_xlat0);
    output.TEXCOORD6.xy = float2(0.0, 0.0);
    return output;
}


-- Hardware tier variant: Tier 3
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0 sampler slot 1
Set 2D Texture "_LightTexture0" to slot 1 sampler slot 2
Set 2D Texture "_LightTextureB0" to slot 2 sampler slot 3
Set 2D Texture "unity_NHxRoughness" to slot 3 sampler slot 0

Constant Buffer "Globals" (96 bytes) on slot 0 {
  Matrix4x4 unity_WorldToLight at 32
  VectorHalf4 _LightColor0 at 0
  VectorHalf4 _Color at 8
  ScalarHalf _Metallic at 16
  ScalarHalf _Glossiness at 18
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    half4 _LightColor0;
    half4 _Color;
    half _Metallic;
    half _Glossiness;
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(0) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    sampler samplerunity_NHxRoughness [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_LightTexture0 [[ sampler (2) ]],
    sampler sampler_LightTextureB0 [[ sampler (3) ]],
    texture2d<half, access::sample > _MainTex [[ texture (0) ]] ,
    texture2d<half, access::sample > _LightTexture0 [[ texture (1) ]] ,
    texture2d<half, access::sample > _LightTextureB0 [[ texture (2) ]] ,
    texture2d<half, access::sample > unity_NHxRoughness [[ texture (3) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    float4 u_xlat1;
    half3 u_xlat16_1;
    half3 u_xlat16_2;
    float2 u_xlat3;
    half u_xlat16_3;
    half3 u_xlat16_4;
    half3 u_xlat16_7;
    bool u_xlatb7;
    float u_xlat11;
    half u_xlat16_11;
    half u_xlat16_12;
    u_xlat16_0.x = dot(input.TEXCOORD4.xyz, input.TEXCOORD4.xyz);
    u_xlat16_0.x = rsqrt(u_xlat16_0.x);
    u_xlat16_0.xyz = u_xlat16_0.xxx * input.TEXCOORD4.xyz;
    u_xlat16_12 = dot((-input.TEXCOORD1.xyz), u_xlat16_0.xyz);
    u_xlat16_12 = u_xlat16_12 + u_xlat16_12;
    u_xlat16_1.xyz = u_xlat16_0.xyz * (-half3(u_xlat16_12)) + (-input.TEXCOORD1.xyz);
    u_xlat16_2.x = input.TEXCOORD2.w;
    u_xlat16_2.y = input.TEXCOORD3.w;
    u_xlat16_2.z = input.TEXCOORD4.w;
    u_xlat16_12 = dot(u_xlat16_1.xyz, u_xlat16_2.xyz);
    u_xlat16_0.x = dot(u_xlat16_0.xyz, u_xlat16_2.xyz);
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0h, 1.0h);
    u_xlat16_4.x = u_xlat16_12 * u_xlat16_12;
    u_xlat16_1.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_1.y = (-Globals._Glossiness) + half(1.0);
    u_xlat16_3 = unity_NHxRoughness.sample(samplerunity_NHxRoughness, float2(u_xlat16_1.xy)).w;
    u_xlat16_3 = u_xlat16_3 * half(16.0);
    u_xlat16_7.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_4.xyz = Globals._Color.xyz * u_xlat16_7.xyz + half3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat16_7.xyz = u_xlat16_7.xyz * Globals._Color.xyz;
    u_xlat16_4.xyz = half3(Globals._Metallic) * u_xlat16_4.xyz + half3(0.220916301, 0.220916301, 0.220916301);
    u_xlat16_4.xyz = u_xlat16_4.xyz * half3(u_xlat16_3);
    u_xlat16_1.x = (-Globals._Metallic) * half(0.779083729) + half(0.779083729);
    u_xlat16_4.xyz = u_xlat16_7.xyz * u_xlat16_1.xxx + u_xlat16_4.xyz;
    u_xlat1 = input.TEXCOORD5.yyyy * Globals.hlslcc_mtx4x4unity_WorldToLight[1];
    u_xlat1 = Globals.hlslcc_mtx4x4unity_WorldToLight[0] * input.TEXCOORD5.xxxx + u_xlat1;
    u_xlat1 = Globals.hlslcc_mtx4x4unity_WorldToLight[2] * input.TEXCOORD5.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + Globals.hlslcc_mtx4x4unity_WorldToLight[3];
    u_xlat3.xy = u_xlat1.xy / u_xlat1.ww;
    u_xlat3.xy = u_xlat3.xy + float2(0.5, 0.5);
    u_xlat16_3 = _LightTexture0.sample(sampler_LightTexture0, u_xlat3.xy).w;
    u_xlatb7 = 0.0<u_xlat1.z;
    u_xlat11 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat16_11 = _LightTextureB0.sample(sampler_LightTextureB0, float2(u_xlat11)).w;
    u_xlat16_2.x = (u_xlatb7) ? half(1.0) : half(0.0);
    u_xlat16_2.x = u_xlat16_3 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_11 * u_xlat16_2.x;
    u_xlat16_2.xyz = u_xlat16_2.xxx * Globals._LightColor0.xyz;
    u_xlat16_2.xyz = u_xlat16_0.xxx * u_xlat16_2.xyz;
    output.SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}


//////////////////////////////////////////////////////
Keywords set in this variant: POINT_COOKIE 
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"
Uses vertex data channel "TexCoord0"

Constant Buffer "Globals" (258 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 32
  Matrix4x4 unity_WorldToObject at 96
  Matrix4x4 unity_MatrixVP at 160
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 _MainTex_ST at 224
  Vector4 _DetailAlbedoMap_ST at 240
  ScalarHalf _UVSec at 256
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    float4 _DetailAlbedoMap_ST;
    half _UVSec;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    half3 NORMAL0 [[ attribute(1) ]] ;
    float2 TEXCOORD0 [[ attribute(2) ]] ;
    float2 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float2 TEXCOORD6 [[ user(TEXCOORD6) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool u_xlatb0;
    float4 u_xlat1;
    float u_xlat6;
    float u_xlat7;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0] * input.POSITION0.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2] * input.POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    output.mtl_Position = Globals.hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlatb0 = Globals._UVSec==half(0.0);
    u_xlat0.xy = (bool(u_xlatb0)) ? input.TEXCOORD0.xy : input.TEXCOORD1.xy;
    output.TEXCOORD0.zw = u_xlat0.xy * Globals._DetailAlbedoMap_ST.xy + Globals._DetailAlbedoMap_ST.zw;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy * Globals._MainTex_ST.xy + Globals._MainTex_ST.zw;
    u_xlat0.xyz = input.POSITION0.yyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * input.POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * input.POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * input.POSITION0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-Globals._WorldSpaceCameraPos.xyzx.xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = rsqrt(u_xlat6);
    u_xlat1.xyz = float3(u_xlat6) * u_xlat1.xyz;
    output.TEXCOORD1.xyz = half3(u_xlat1.xyz);
    u_xlat1.xyz = (-u_xlat0.xyz) * Globals._WorldSpaceLightPos0.www + Globals._WorldSpaceLightPos0.xyz;
    output.TEXCOORD5.xyz = u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = rsqrt(u_xlat0.x);
    u_xlat0.xyw = u_xlat0.xxx * u_xlat1.xyz;
    output.TEXCOORD2.w = half(u_xlat0.x);
    output.TEXCOORD2.xyz = half3(0.0, 0.0, 0.0);
    output.TEXCOORD3.w = half(u_xlat0.y);
    output.TEXCOORD3.xyz = half3(0.0, 0.0, 0.0);
    u_xlat1.x = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat7 = rsqrt(u_xlat7);
    u_xlat0.xyz = float3(u_xlat7) * u_xlat1.xyz;
    output.TEXCOORD4 = half4(u_xlat0);
    output.TEXCOORD6.xy = float2(0.0, 0.0);
    return output;
}


-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0 sampler slot 1
Set 2D Texture "_LightTextureB0" to slot 1 sampler slot 3
Set CUBE Texture "_LightTexture0" to slot 2
Set 2D Texture "unity_NHxRoughness" to slot 3 sampler slot 0

Constant Buffer "Globals" (96 bytes) on slot 0 {
  Matrix4x4 unity_WorldToLight at 32
  VectorHalf4 _LightColor0 at 0
  VectorHalf4 _Color at 8
  ScalarHalf _Metallic at 16
  ScalarHalf _Glossiness at 18
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    half4 _LightColor0;
    half4 _Color;
    half _Metallic;
    half _Glossiness;
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(0) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    sampler samplerunity_NHxRoughness [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_LightTexture0 [[ sampler (2) ]],
    sampler sampler_LightTextureB0 [[ sampler (3) ]],
    texture2d<half, access::sample > _MainTex [[ texture (0) ]] ,
    texture2d<half, access::sample > _LightTextureB0 [[ texture (1) ]] ,
    texturecube<half, access::sample > _LightTexture0 [[ texture (2) ]] ,
    texture2d<half, access::sample > unity_NHxRoughness [[ texture (3) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    half3 u_xlat16_2;
    float3 u_xlat3;
    half u_xlat16_3;
    half3 u_xlat16_4;
    half3 u_xlat16_7;
    half u_xlat16_12;
    float u_xlat15;
    u_xlat16_0.x = dot(input.TEXCOORD4.xyz, input.TEXCOORD4.xyz);
    u_xlat16_0.x = rsqrt(u_xlat16_0.x);
    u_xlat16_0.xyz = u_xlat16_0.xxx * input.TEXCOORD4.xyz;
    u_xlat16_12 = dot((-input.TEXCOORD1.xyz), u_xlat16_0.xyz);
    u_xlat16_12 = u_xlat16_12 + u_xlat16_12;
    u_xlat16_1.xyz = u_xlat16_0.xyz * (-half3(u_xlat16_12)) + (-input.TEXCOORD1.xyz);
    u_xlat16_2.x = input.TEXCOORD2.w;
    u_xlat16_2.y = input.TEXCOORD3.w;
    u_xlat16_2.z = input.TEXCOORD4.w;
    u_xlat16_12 = dot(u_xlat16_1.xyz, u_xlat16_2.xyz);
    u_xlat16_0.x = dot(u_xlat16_0.xyz, u_xlat16_2.xyz);
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0h, 1.0h);
    u_xlat16_4.x = u_xlat16_12 * u_xlat16_12;
    u_xlat16_1.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_1.y = (-Globals._Glossiness) + half(1.0);
    u_xlat16_3 = unity_NHxRoughness.sample(samplerunity_NHxRoughness, float2(u_xlat16_1.xy)).w;
    u_xlat16_3 = u_xlat16_3 * half(16.0);
    u_xlat16_7.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_4.xyz = Globals._Color.xyz * u_xlat16_7.xyz + half3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat16_7.xyz = u_xlat16_7.xyz * Globals._Color.xyz;
    u_xlat16_4.xyz = half3(Globals._Metallic) * u_xlat16_4.xyz + half3(0.220916301, 0.220916301, 0.220916301);
    u_xlat16_4.xyz = u_xlat16_4.xyz * half3(u_xlat16_3);
    u_xlat16_1.x = (-Globals._Metallic) * half(0.779083729) + half(0.779083729);
    u_xlat16_4.xyz = u_xlat16_7.xyz * u_xlat16_1.xxx + u_xlat16_4.xyz;
    u_xlat3.xyz = input.TEXCOORD5.yyy * Globals.hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat3.xyz = Globals.hlslcc_mtx4x4unity_WorldToLight[0].xyz * input.TEXCOORD5.xxx + u_xlat3.xyz;
    u_xlat3.xyz = Globals.hlslcc_mtx4x4unity_WorldToLight[2].xyz * input.TEXCOORD5.zzz + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + Globals.hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat15 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat16_3 = _LightTexture0.sample(sampler_LightTexture0, u_xlat3.xyz).w;
    u_xlat16_7.x = _LightTextureB0.sample(sampler_LightTextureB0, float2(u_xlat15)).w;
    u_xlat16_3 = u_xlat16_3 * u_xlat16_7.x;
    u_xlat16_1.xyz = half3(u_xlat16_3) * Globals._LightColor0.xyz;
    u_xlat16_1.xyz = u_xlat16_0.xxx * u_xlat16_1.xyz;
    output.SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_1.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}


-- Hardware tier variant: Tier 2
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"
Uses vertex data channel "TexCoord0"

Constant Buffer "Globals" (258 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 32
  Matrix4x4 unity_WorldToObject at 96
  Matrix4x4 unity_MatrixVP at 160
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 _MainTex_ST at 224
  Vector4 _DetailAlbedoMap_ST at 240
  ScalarHalf _UVSec at 256
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    float4 _DetailAlbedoMap_ST;
    half _UVSec;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    half3 NORMAL0 [[ attribute(1) ]] ;
    float2 TEXCOORD0 [[ attribute(2) ]] ;
    float2 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float2 TEXCOORD6 [[ user(TEXCOORD6) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool u_xlatb0;
    float4 u_xlat1;
    float u_xlat6;
    float u_xlat7;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0] * input.POSITION0.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2] * input.POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    output.mtl_Position = Globals.hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlatb0 = Globals._UVSec==half(0.0);
    u_xlat0.xy = (bool(u_xlatb0)) ? input.TEXCOORD0.xy : input.TEXCOORD1.xy;
    output.TEXCOORD0.zw = u_xlat0.xy * Globals._DetailAlbedoMap_ST.xy + Globals._DetailAlbedoMap_ST.zw;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy * Globals._MainTex_ST.xy + Globals._MainTex_ST.zw;
    u_xlat0.xyz = input.POSITION0.yyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * input.POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * input.POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * input.POSITION0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-Globals._WorldSpaceCameraPos.xyzx.xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = rsqrt(u_xlat6);
    u_xlat1.xyz = float3(u_xlat6) * u_xlat1.xyz;
    output.TEXCOORD1.xyz = half3(u_xlat1.xyz);
    u_xlat1.xyz = (-u_xlat0.xyz) * Globals._WorldSpaceLightPos0.www + Globals._WorldSpaceLightPos0.xyz;
    output.TEXCOORD5.xyz = u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = rsqrt(u_xlat0.x);
    u_xlat0.xyw = u_xlat0.xxx * u_xlat1.xyz;
    output.TEXCOORD2.w = half(u_xlat0.x);
    output.TEXCOORD2.xyz = half3(0.0, 0.0, 0.0);
    output.TEXCOORD3.w = half(u_xlat0.y);
    output.TEXCOORD3.xyz = half3(0.0, 0.0, 0.0);
    u_xlat1.x = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat7 = rsqrt(u_xlat7);
    u_xlat0.xyz = float3(u_xlat7) * u_xlat1.xyz;
    output.TEXCOORD4 = half4(u_xlat0);
    output.TEXCOORD6.xy = float2(0.0, 0.0);
    return output;
}


-- Hardware tier variant: Tier 2
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0 sampler slot 1
Set 2D Texture "_LightTextureB0" to slot 1 sampler slot 3
Set CUBE Texture "_LightTexture0" to slot 2
Set 2D Texture "unity_NHxRoughness" to slot 3 sampler slot 0

Constant Buffer "Globals" (96 bytes) on slot 0 {
  Matrix4x4 unity_WorldToLight at 32
  VectorHalf4 _LightColor0 at 0
  VectorHalf4 _Color at 8
  ScalarHalf _Metallic at 16
  ScalarHalf _Glossiness at 18
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    half4 _LightColor0;
    half4 _Color;
    half _Metallic;
    half _Glossiness;
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(0) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    sampler samplerunity_NHxRoughness [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_LightTexture0 [[ sampler (2) ]],
    sampler sampler_LightTextureB0 [[ sampler (3) ]],
    texture2d<half, access::sample > _MainTex [[ texture (0) ]] ,
    texture2d<half, access::sample > _LightTextureB0 [[ texture (1) ]] ,
    texturecube<half, access::sample > _LightTexture0 [[ texture (2) ]] ,
    texture2d<half, access::sample > unity_NHxRoughness [[ texture (3) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    half3 u_xlat16_2;
    float3 u_xlat3;
    half u_xlat16_3;
    half3 u_xlat16_4;
    half3 u_xlat16_7;
    half u_xlat16_12;
    float u_xlat15;
    u_xlat16_0.x = dot(input.TEXCOORD4.xyz, input.TEXCOORD4.xyz);
    u_xlat16_0.x = rsqrt(u_xlat16_0.x);
    u_xlat16_0.xyz = u_xlat16_0.xxx * input.TEXCOORD4.xyz;
    u_xlat16_12 = dot((-input.TEXCOORD1.xyz), u_xlat16_0.xyz);
    u_xlat16_12 = u_xlat16_12 + u_xlat16_12;
    u_xlat16_1.xyz = u_xlat16_0.xyz * (-half3(u_xlat16_12)) + (-input.TEXCOORD1.xyz);
    u_xlat16_2.x = input.TEXCOORD2.w;
    u_xlat16_2.y = input.TEXCOORD3.w;
    u_xlat16_2.z = input.TEXCOORD4.w;
    u_xlat16_12 = dot(u_xlat16_1.xyz, u_xlat16_2.xyz);
    u_xlat16_0.x = dot(u_xlat16_0.xyz, u_xlat16_2.xyz);
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0h, 1.0h);
    u_xlat16_4.x = u_xlat16_12 * u_xlat16_12;
    u_xlat16_1.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_1.y = (-Globals._Glossiness) + half(1.0);
    u_xlat16_3 = unity_NHxRoughness.sample(samplerunity_NHxRoughness, float2(u_xlat16_1.xy)).w;
    u_xlat16_3 = u_xlat16_3 * half(16.0);
    u_xlat16_7.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_4.xyz = Globals._Color.xyz * u_xlat16_7.xyz + half3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat16_7.xyz = u_xlat16_7.xyz * Globals._Color.xyz;
    u_xlat16_4.xyz = half3(Globals._Metallic) * u_xlat16_4.xyz + half3(0.220916301, 0.220916301, 0.220916301);
    u_xlat16_4.xyz = u_xlat16_4.xyz * half3(u_xlat16_3);
    u_xlat16_1.x = (-Globals._Metallic) * half(0.779083729) + half(0.779083729);
    u_xlat16_4.xyz = u_xlat16_7.xyz * u_xlat16_1.xxx + u_xlat16_4.xyz;
    u_xlat3.xyz = input.TEXCOORD5.yyy * Globals.hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat3.xyz = Globals.hlslcc_mtx4x4unity_WorldToLight[0].xyz * input.TEXCOORD5.xxx + u_xlat3.xyz;
    u_xlat3.xyz = Globals.hlslcc_mtx4x4unity_WorldToLight[2].xyz * input.TEXCOORD5.zzz + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + Globals.hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat15 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat16_3 = _LightTexture0.sample(sampler_LightTexture0, u_xlat3.xyz).w;
    u_xlat16_7.x = _LightTextureB0.sample(sampler_LightTextureB0, float2(u_xlat15)).w;
    u_xlat16_3 = u_xlat16_3 * u_xlat16_7.x;
    u_xlat16_1.xyz = half3(u_xlat16_3) * Globals._LightColor0.xyz;
    u_xlat16_1.xyz = u_xlat16_0.xxx * u_xlat16_1.xyz;
    output.SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_1.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}


-- Hardware tier variant: Tier 3
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"
Uses vertex data channel "TexCoord0"

Constant Buffer "Globals" (258 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 32
  Matrix4x4 unity_WorldToObject at 96
  Matrix4x4 unity_MatrixVP at 160
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 _MainTex_ST at 224
  Vector4 _DetailAlbedoMap_ST at 240
  ScalarHalf _UVSec at 256
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    float4 _DetailAlbedoMap_ST;
    half _UVSec;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    half3 NORMAL0 [[ attribute(1) ]] ;
    float2 TEXCOORD0 [[ attribute(2) ]] ;
    float2 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float2 TEXCOORD6 [[ user(TEXCOORD6) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool u_xlatb0;
    float4 u_xlat1;
    float u_xlat6;
    float u_xlat7;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0] * input.POSITION0.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2] * input.POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    output.mtl_Position = Globals.hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlatb0 = Globals._UVSec==half(0.0);
    u_xlat0.xy = (bool(u_xlatb0)) ? input.TEXCOORD0.xy : input.TEXCOORD1.xy;
    output.TEXCOORD0.zw = u_xlat0.xy * Globals._DetailAlbedoMap_ST.xy + Globals._DetailAlbedoMap_ST.zw;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy * Globals._MainTex_ST.xy + Globals._MainTex_ST.zw;
    u_xlat0.xyz = input.POSITION0.yyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * input.POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * input.POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * input.POSITION0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-Globals._WorldSpaceCameraPos.xyzx.xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = rsqrt(u_xlat6);
    u_xlat1.xyz = float3(u_xlat6) * u_xlat1.xyz;
    output.TEXCOORD1.xyz = half3(u_xlat1.xyz);
    u_xlat1.xyz = (-u_xlat0.xyz) * Globals._WorldSpaceLightPos0.www + Globals._WorldSpaceLightPos0.xyz;
    output.TEXCOORD5.xyz = u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = rsqrt(u_xlat0.x);
    u_xlat0.xyw = u_xlat0.xxx * u_xlat1.xyz;
    output.TEXCOORD2.w = half(u_xlat0.x);
    output.TEXCOORD2.xyz = half3(0.0, 0.0, 0.0);
    output.TEXCOORD3.w = half(u_xlat0.y);
    output.TEXCOORD3.xyz = half3(0.0, 0.0, 0.0);
    u_xlat1.x = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat7 = rsqrt(u_xlat7);
    u_xlat0.xyz = float3(u_xlat7) * u_xlat1.xyz;
    output.TEXCOORD4 = half4(u_xlat0);
    output.TEXCOORD6.xy = float2(0.0, 0.0);
    return output;
}


-- Hardware tier variant: Tier 3
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0 sampler slot 1
Set 2D Texture "_LightTextureB0" to slot 1 sampler slot 3
Set CUBE Texture "_LightTexture0" to slot 2
Set 2D Texture "unity_NHxRoughness" to slot 3 sampler slot 0

Constant Buffer "Globals" (96 bytes) on slot 0 {
  Matrix4x4 unity_WorldToLight at 32
  VectorHalf4 _LightColor0 at 0
  VectorHalf4 _Color at 8
  ScalarHalf _Metallic at 16
  ScalarHalf _Glossiness at 18
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    half4 _LightColor0;
    half4 _Color;
    half _Metallic;
    half _Glossiness;
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(0) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    sampler samplerunity_NHxRoughness [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_LightTexture0 [[ sampler (2) ]],
    sampler sampler_LightTextureB0 [[ sampler (3) ]],
    texture2d<half, access::sample > _MainTex [[ texture (0) ]] ,
    texture2d<half, access::sample > _LightTextureB0 [[ texture (1) ]] ,
    texturecube<half, access::sample > _LightTexture0 [[ texture (2) ]] ,
    texture2d<half, access::sample > unity_NHxRoughness [[ texture (3) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    half3 u_xlat16_2;
    float3 u_xlat3;
    half u_xlat16_3;
    half3 u_xlat16_4;
    half3 u_xlat16_7;
    half u_xlat16_12;
    float u_xlat15;
    u_xlat16_0.x = dot(input.TEXCOORD4.xyz, input.TEXCOORD4.xyz);
    u_xlat16_0.x = rsqrt(u_xlat16_0.x);
    u_xlat16_0.xyz = u_xlat16_0.xxx * input.TEXCOORD4.xyz;
    u_xlat16_12 = dot((-input.TEXCOORD1.xyz), u_xlat16_0.xyz);
    u_xlat16_12 = u_xlat16_12 + u_xlat16_12;
    u_xlat16_1.xyz = u_xlat16_0.xyz * (-half3(u_xlat16_12)) + (-input.TEXCOORD1.xyz);
    u_xlat16_2.x = input.TEXCOORD2.w;
    u_xlat16_2.y = input.TEXCOORD3.w;
    u_xlat16_2.z = input.TEXCOORD4.w;
    u_xlat16_12 = dot(u_xlat16_1.xyz, u_xlat16_2.xyz);
    u_xlat16_0.x = dot(u_xlat16_0.xyz, u_xlat16_2.xyz);
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0h, 1.0h);
    u_xlat16_4.x = u_xlat16_12 * u_xlat16_12;
    u_xlat16_1.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_1.y = (-Globals._Glossiness) + half(1.0);
    u_xlat16_3 = unity_NHxRoughness.sample(samplerunity_NHxRoughness, float2(u_xlat16_1.xy)).w;
    u_xlat16_3 = u_xlat16_3 * half(16.0);
    u_xlat16_7.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_4.xyz = Globals._Color.xyz * u_xlat16_7.xyz + half3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat16_7.xyz = u_xlat16_7.xyz * Globals._Color.xyz;
    u_xlat16_4.xyz = half3(Globals._Metallic) * u_xlat16_4.xyz + half3(0.220916301, 0.220916301, 0.220916301);
    u_xlat16_4.xyz = u_xlat16_4.xyz * half3(u_xlat16_3);
    u_xlat16_1.x = (-Globals._Metallic) * half(0.779083729) + half(0.779083729);
    u_xlat16_4.xyz = u_xlat16_7.xyz * u_xlat16_1.xxx + u_xlat16_4.xyz;
    u_xlat3.xyz = input.TEXCOORD5.yyy * Globals.hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat3.xyz = Globals.hlslcc_mtx4x4unity_WorldToLight[0].xyz * input.TEXCOORD5.xxx + u_xlat3.xyz;
    u_xlat3.xyz = Globals.hlslcc_mtx4x4unity_WorldToLight[2].xyz * input.TEXCOORD5.zzz + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + Globals.hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat15 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat16_3 = _LightTexture0.sample(sampler_LightTexture0, u_xlat3.xyz).w;
    u_xlat16_7.x = _LightTextureB0.sample(sampler_LightTextureB0, float2(u_xlat15)).w;
    u_xlat16_3 = u_xlat16_3 * u_xlat16_7.x;
    u_xlat16_1.xyz = half3(u_xlat16_3) * Globals._LightColor0.xyz;
    u_xlat16_1.xyz = u_xlat16_0.xxx * u_xlat16_1.xyz;
    output.SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_1.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}


-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"
Uses vertex data channel "TexCoord0"

Constant Buffer "Globals" (258 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 32
  Matrix4x4 unity_WorldToObject at 96
  Matrix4x4 unity_MatrixVP at 160
  Vector3 _WorldSpaceCameraPos at 0
  VectorHalf4 _WorldSpaceLightPos0 at 16
  Vector4 _MainTex_ST at 224
  Vector4 _DetailAlbedoMap_ST at 240
  ScalarHalf _UVSec at 256
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    half4 _WorldSpaceLightPos0;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    float4 _DetailAlbedoMap_ST;
    half _UVSec;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    half3 NORMAL0 [[ attribute(1) ]] ;
    float2 TEXCOORD0 [[ attribute(2) ]] ;
    float2 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float2 TEXCOORD6 [[ user(TEXCOORD6) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool u_xlatb0;
    float4 u_xlat1;
    float u_xlat6;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0] * input.POSITION0.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2] * input.POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    output.mtl_Position = Globals.hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlatb0 = Globals._UVSec==half(0.0);
    u_xlat0.xy = (bool(u_xlatb0)) ? input.TEXCOORD0.xy : input.TEXCOORD1.xy;
    output.TEXCOORD0.zw = u_xlat0.xy * Globals._DetailAlbedoMap_ST.xy + Globals._DetailAlbedoMap_ST.zw;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy * Globals._MainTex_ST.xy + Globals._MainTex_ST.zw;
    u_xlat0.xyz = input.POSITION0.yyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * input.POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * input.POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * input.POSITION0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-Globals._WorldSpaceCameraPos.xyzx.xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = rsqrt(u_xlat6);
    u_xlat1.xyz = float3(u_xlat6) * u_xlat1.xyz;
    output.TEXCOORD1.xyz = half3(u_xlat1.xyz);
    u_xlat1.xyw = (-u_xlat0.xyz) * float3(Globals._WorldSpaceLightPos0.www) + float3(Globals._WorldSpaceLightPos0.xyz);
    output.TEXCOORD5.xyz = u_xlat0.xyz;
    output.TEXCOORD2.w = half(u_xlat1.x);
    output.TEXCOORD2.xyz = half3(0.0, 0.0, 0.0);
    output.TEXCOORD3.w = half(u_xlat1.y);
    output.TEXCOORD3.xyz = half3(0.0, 0.0, 0.0);
    u_xlat0.x = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = rsqrt(u_xlat6);
    u_xlat1.xyz = float3(u_xlat6) * u_xlat0.xyz;
    output.TEXCOORD4 = half4(u_xlat1);
    output.TEXCOORD6.xy = float2(0.0, 0.0);
    return output;
}


-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0 sampler slot 1
Set 2D Texture "_LightTexture0" to slot 1 sampler slot 2
Set 2D Texture "unity_NHxRoughness" to slot 2 sampler slot 0

Constant Buffer "Globals" (96 bytes) on slot 0 {
  Matrix4x4 unity_WorldToLight at 32
  VectorHalf4 _LightColor0 at 0
  VectorHalf4 _Color at 8
  ScalarHalf _Metallic at 16
  ScalarHalf _Glossiness at 18
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    half4 _LightColor0;
    half4 _Color;
    half _Metallic;
    half _Glossiness;
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(0) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    sampler samplerunity_NHxRoughness [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_LightTexture0 [[ sampler (2) ]],
    texture2d<half, access::sample > _MainTex [[ texture (0) ]] ,
    texture2d<half, access::sample > _LightTexture0 [[ texture (1) ]] ,
    texture2d<half, access::sample > unity_NHxRoughness [[ texture (2) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    half3 u_xlat16_2;
    float2 u_xlat3;
    half u_xlat16_3;
    half3 u_xlat16_4;
    half3 u_xlat16_7;
    half u_xlat16_12;
    u_xlat16_0.x = dot(input.TEXCOORD4.xyz, input.TEXCOORD4.xyz);
    u_xlat16_0.x = rsqrt(u_xlat16_0.x);
    u_xlat16_0.xyz = u_xlat16_0.xxx * input.TEXCOORD4.xyz;
    u_xlat16_12 = dot((-input.TEXCOORD1.xyz), u_xlat16_0.xyz);
    u_xlat16_12 = u_xlat16_12 + u_xlat16_12;
    u_xlat16_1.xyz = u_xlat16_0.xyz * (-half3(u_xlat16_12)) + (-input.TEXCOORD1.xyz);
    u_xlat16_2.x = input.TEXCOORD2.w;
    u_xlat16_2.y = input.TEXCOORD3.w;
    u_xlat16_2.z = input.TEXCOORD4.w;
    u_xlat16_12 = dot(u_xlat16_1.xyz, u_xlat16_2.xyz);
    u_xlat16_0.x = dot(u_xlat16_0.xyz, u_xlat16_2.xyz);
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0h, 1.0h);
    u_xlat16_4.x = u_xlat16_12 * u_xlat16_12;
    u_xlat16_1.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_1.y = (-Globals._Glossiness) + half(1.0);
    u_xlat16_3 = unity_NHxRoughness.sample(samplerunity_NHxRoughness, float2(u_xlat16_1.xy)).w;
    u_xlat16_3 = u_xlat16_3 * half(16.0);
    u_xlat16_7.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_4.xyz = Globals._Color.xyz * u_xlat16_7.xyz + half3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat16_7.xyz = u_xlat16_7.xyz * Globals._Color.xyz;
    u_xlat16_4.xyz = half3(Globals._Metallic) * u_xlat16_4.xyz + half3(0.220916301, 0.220916301, 0.220916301);
    u_xlat16_4.xyz = u_xlat16_4.xyz * half3(u_xlat16_3);
    u_xlat16_1.x = (-Globals._Metallic) * half(0.779083729) + half(0.779083729);
    u_xlat16_4.xyz = u_xlat16_7.xyz * u_xlat16_1.xxx + u_xlat16_4.xyz;
    u_xlat3.xy = input.TEXCOORD5.yy * Globals.hlslcc_mtx4x4unity_WorldToLight[1].xy;
    u_xlat3.xy = Globals.hlslcc_mtx4x4unity_WorldToLight[0].xy * input.TEXCOORD5.xx + u_xlat3.xy;
    u_xlat3.xy = Globals.hlslcc_mtx4x4unity_WorldToLight[2].xy * input.TEXCOORD5.zz + u_xlat3.xy;
    u_xlat3.xy = u_xlat3.xy + Globals.hlslcc_mtx4x4unity_WorldToLight[3].xy;
    u_xlat16_3 = _LightTexture0.sample(sampler_LightTexture0, u_xlat3.xy).w;
    u_xlat16_1.xyz = half3(u_xlat16_3) * Globals._LightColor0.xyz;
    u_xlat16_1.xyz = u_xlat16_0.xxx * u_xlat16_1.xyz;
    output.SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_1.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}


-- Hardware tier variant: Tier 2
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"
Uses vertex data channel "TexCoord0"

Constant Buffer "Globals" (258 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 32
  Matrix4x4 unity_WorldToObject at 96
  Matrix4x4 unity_MatrixVP at 160
  Vector3 _WorldSpaceCameraPos at 0
  VectorHalf4 _WorldSpaceLightPos0 at 16
  Vector4 _MainTex_ST at 224
  Vector4 _DetailAlbedoMap_ST at 240
  ScalarHalf _UVSec at 256
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    half4 _WorldSpaceLightPos0;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    float4 _DetailAlbedoMap_ST;
    half _UVSec;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    half3 NORMAL0 [[ attribute(1) ]] ;
    float2 TEXCOORD0 [[ attribute(2) ]] ;
    float2 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float2 TEXCOORD6 [[ user(TEXCOORD6) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool u_xlatb0;
    float4 u_xlat1;
    float u_xlat6;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0] * input.POSITION0.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2] * input.POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    output.mtl_Position = Globals.hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlatb0 = Globals._UVSec==half(0.0);
    u_xlat0.xy = (bool(u_xlatb0)) ? input.TEXCOORD0.xy : input.TEXCOORD1.xy;
    output.TEXCOORD0.zw = u_xlat0.xy * Globals._DetailAlbedoMap_ST.xy + Globals._DetailAlbedoMap_ST.zw;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy * Globals._MainTex_ST.xy + Globals._MainTex_ST.zw;
    u_xlat0.xyz = input.POSITION0.yyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * input.POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * input.POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * input.POSITION0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-Globals._WorldSpaceCameraPos.xyzx.xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = rsqrt(u_xlat6);
    u_xlat1.xyz = float3(u_xlat6) * u_xlat1.xyz;
    output.TEXCOORD1.xyz = half3(u_xlat1.xyz);
    u_xlat1.xyw = (-u_xlat0.xyz) * float3(Globals._WorldSpaceLightPos0.www) + float3(Globals._WorldSpaceLightPos0.xyz);
    output.TEXCOORD5.xyz = u_xlat0.xyz;
    output.TEXCOORD2.w = half(u_xlat1.x);
    output.TEXCOORD2.xyz = half3(0.0, 0.0, 0.0);
    output.TEXCOORD3.w = half(u_xlat1.y);
    output.TEXCOORD3.xyz = half3(0.0, 0.0, 0.0);
    u_xlat0.x = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = rsqrt(u_xlat6);
    u_xlat1.xyz = float3(u_xlat6) * u_xlat0.xyz;
    output.TEXCOORD4 = half4(u_xlat1);
    output.TEXCOORD6.xy = float2(0.0, 0.0);
    return output;
}


-- Hardware tier variant: Tier 2
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0 sampler slot 1
Set 2D Texture "_LightTexture0" to slot 1 sampler slot 2
Set 2D Texture "unity_NHxRoughness" to slot 2 sampler slot 0

Constant Buffer "Globals" (96 bytes) on slot 0 {
  Matrix4x4 unity_WorldToLight at 32
  VectorHalf4 _LightColor0 at 0
  VectorHalf4 _Color at 8
  ScalarHalf _Metallic at 16
  ScalarHalf _Glossiness at 18
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    half4 _LightColor0;
    half4 _Color;
    half _Metallic;
    half _Glossiness;
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(0) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    sampler samplerunity_NHxRoughness [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_LightTexture0 [[ sampler (2) ]],
    texture2d<half, access::sample > _MainTex [[ texture (0) ]] ,
    texture2d<half, access::sample > _LightTexture0 [[ texture (1) ]] ,
    texture2d<half, access::sample > unity_NHxRoughness [[ texture (2) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    half3 u_xlat16_2;
    float2 u_xlat3;
    half u_xlat16_3;
    half3 u_xlat16_4;
    half3 u_xlat16_7;
    half u_xlat16_12;
    u_xlat16_0.x = dot(input.TEXCOORD4.xyz, input.TEXCOORD4.xyz);
    u_xlat16_0.x = rsqrt(u_xlat16_0.x);
    u_xlat16_0.xyz = u_xlat16_0.xxx * input.TEXCOORD4.xyz;
    u_xlat16_12 = dot((-input.TEXCOORD1.xyz), u_xlat16_0.xyz);
    u_xlat16_12 = u_xlat16_12 + u_xlat16_12;
    u_xlat16_1.xyz = u_xlat16_0.xyz * (-half3(u_xlat16_12)) + (-input.TEXCOORD1.xyz);
    u_xlat16_2.x = input.TEXCOORD2.w;
    u_xlat16_2.y = input.TEXCOORD3.w;
    u_xlat16_2.z = input.TEXCOORD4.w;
    u_xlat16_12 = dot(u_xlat16_1.xyz, u_xlat16_2.xyz);
    u_xlat16_0.x = dot(u_xlat16_0.xyz, u_xlat16_2.xyz);
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0h, 1.0h);
    u_xlat16_4.x = u_xlat16_12 * u_xlat16_12;
    u_xlat16_1.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_1.y = (-Globals._Glossiness) + half(1.0);
    u_xlat16_3 = unity_NHxRoughness.sample(samplerunity_NHxRoughness, float2(u_xlat16_1.xy)).w;
    u_xlat16_3 = u_xlat16_3 * half(16.0);
    u_xlat16_7.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_4.xyz = Globals._Color.xyz * u_xlat16_7.xyz + half3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat16_7.xyz = u_xlat16_7.xyz * Globals._Color.xyz;
    u_xlat16_4.xyz = half3(Globals._Metallic) * u_xlat16_4.xyz + half3(0.220916301, 0.220916301, 0.220916301);
    u_xlat16_4.xyz = u_xlat16_4.xyz * half3(u_xlat16_3);
    u_xlat16_1.x = (-Globals._Metallic) * half(0.779083729) + half(0.779083729);
    u_xlat16_4.xyz = u_xlat16_7.xyz * u_xlat16_1.xxx + u_xlat16_4.xyz;
    u_xlat3.xy = input.TEXCOORD5.yy * Globals.hlslcc_mtx4x4unity_WorldToLight[1].xy;
    u_xlat3.xy = Globals.hlslcc_mtx4x4unity_WorldToLight[0].xy * input.TEXCOORD5.xx + u_xlat3.xy;
    u_xlat3.xy = Globals.hlslcc_mtx4x4unity_WorldToLight[2].xy * input.TEXCOORD5.zz + u_xlat3.xy;
    u_xlat3.xy = u_xlat3.xy + Globals.hlslcc_mtx4x4unity_WorldToLight[3].xy;
    u_xlat16_3 = _LightTexture0.sample(sampler_LightTexture0, u_xlat3.xy).w;
    u_xlat16_1.xyz = half3(u_xlat16_3) * Globals._LightColor0.xyz;
    u_xlat16_1.xyz = u_xlat16_0.xxx * u_xlat16_1.xyz;
    output.SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_1.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}


-- Hardware tier variant: Tier 3
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"
Uses vertex data channel "TexCoord0"

Constant Buffer "Globals" (258 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 32
  Matrix4x4 unity_WorldToObject at 96
  Matrix4x4 unity_MatrixVP at 160
  Vector3 _WorldSpaceCameraPos at 0
  VectorHalf4 _WorldSpaceLightPos0 at 16
  Vector4 _MainTex_ST at 224
  Vector4 _DetailAlbedoMap_ST at 240
  ScalarHalf _UVSec at 256
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    half4 _WorldSpaceLightPos0;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    float4 _DetailAlbedoMap_ST;
    half _UVSec;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    half3 NORMAL0 [[ attribute(1) ]] ;
    float2 TEXCOORD0 [[ attribute(2) ]] ;
    float2 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float2 TEXCOORD6 [[ user(TEXCOORD6) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool u_xlatb0;
    float4 u_xlat1;
    float u_xlat6;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0] * input.POSITION0.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2] * input.POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    output.mtl_Position = Globals.hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlatb0 = Globals._UVSec==half(0.0);
    u_xlat0.xy = (bool(u_xlatb0)) ? input.TEXCOORD0.xy : input.TEXCOORD1.xy;
    output.TEXCOORD0.zw = u_xlat0.xy * Globals._DetailAlbedoMap_ST.xy + Globals._DetailAlbedoMap_ST.zw;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy * Globals._MainTex_ST.xy + Globals._MainTex_ST.zw;
    u_xlat0.xyz = input.POSITION0.yyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * input.POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * input.POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * input.POSITION0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-Globals._WorldSpaceCameraPos.xyzx.xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = rsqrt(u_xlat6);
    u_xlat1.xyz = float3(u_xlat6) * u_xlat1.xyz;
    output.TEXCOORD1.xyz = half3(u_xlat1.xyz);
    u_xlat1.xyw = (-u_xlat0.xyz) * float3(Globals._WorldSpaceLightPos0.www) + float3(Globals._WorldSpaceLightPos0.xyz);
    output.TEXCOORD5.xyz = u_xlat0.xyz;
    output.TEXCOORD2.w = half(u_xlat1.x);
    output.TEXCOORD2.xyz = half3(0.0, 0.0, 0.0);
    output.TEXCOORD3.w = half(u_xlat1.y);
    output.TEXCOORD3.xyz = half3(0.0, 0.0, 0.0);
    u_xlat0.x = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = rsqrt(u_xlat6);
    u_xlat1.xyz = float3(u_xlat6) * u_xlat0.xyz;
    output.TEXCOORD4 = half4(u_xlat1);
    output.TEXCOORD6.xy = float2(0.0, 0.0);
    return output;
}


-- Hardware tier variant: Tier 3
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0 sampler slot 1
Set 2D Texture "_LightTexture0" to slot 1 sampler slot 2
Set 2D Texture "unity_NHxRoughness" to slot 2 sampler slot 0

Constant Buffer "Globals" (96 bytes) on slot 0 {
  Matrix4x4 unity_WorldToLight at 32
  VectorHalf4 _LightColor0 at 0
  VectorHalf4 _Color at 8
  ScalarHalf _Metallic at 16
  ScalarHalf _Glossiness at 18
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    half4 _LightColor0;
    half4 _Color;
    half _Metallic;
    half _Glossiness;
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(0) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    sampler samplerunity_NHxRoughness [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_LightTexture0 [[ sampler (2) ]],
    texture2d<half, access::sample > _MainTex [[ texture (0) ]] ,
    texture2d<half, access::sample > _LightTexture0 [[ texture (1) ]] ,
    texture2d<half, access::sample > unity_NHxRoughness [[ texture (2) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    half3 u_xlat16_2;
    float2 u_xlat3;
    half u_xlat16_3;
    half3 u_xlat16_4;
    half3 u_xlat16_7;
    half u_xlat16_12;
    u_xlat16_0.x = dot(input.TEXCOORD4.xyz, input.TEXCOORD4.xyz);
    u_xlat16_0.x = rsqrt(u_xlat16_0.x);
    u_xlat16_0.xyz = u_xlat16_0.xxx * input.TEXCOORD4.xyz;
    u_xlat16_12 = dot((-input.TEXCOORD1.xyz), u_xlat16_0.xyz);
    u_xlat16_12 = u_xlat16_12 + u_xlat16_12;
    u_xlat16_1.xyz = u_xlat16_0.xyz * (-half3(u_xlat16_12)) + (-input.TEXCOORD1.xyz);
    u_xlat16_2.x = input.TEXCOORD2.w;
    u_xlat16_2.y = input.TEXCOORD3.w;
    u_xlat16_2.z = input.TEXCOORD4.w;
    u_xlat16_12 = dot(u_xlat16_1.xyz, u_xlat16_2.xyz);
    u_xlat16_0.x = dot(u_xlat16_0.xyz, u_xlat16_2.xyz);
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0h, 1.0h);
    u_xlat16_4.x = u_xlat16_12 * u_xlat16_12;
    u_xlat16_1.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_1.y = (-Globals._Glossiness) + half(1.0);
    u_xlat16_3 = unity_NHxRoughness.sample(samplerunity_NHxRoughness, float2(u_xlat16_1.xy)).w;
    u_xlat16_3 = u_xlat16_3 * half(16.0);
    u_xlat16_7.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_4.xyz = Globals._Color.xyz * u_xlat16_7.xyz + half3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat16_7.xyz = u_xlat16_7.xyz * Globals._Color.xyz;
    u_xlat16_4.xyz = half3(Globals._Metallic) * u_xlat16_4.xyz + half3(0.220916301, 0.220916301, 0.220916301);
    u_xlat16_4.xyz = u_xlat16_4.xyz * half3(u_xlat16_3);
    u_xlat16_1.x = (-Globals._Metallic) * half(0.779083729) + half(0.779083729);
    u_xlat16_4.xyz = u_xlat16_7.xyz * u_xlat16_1.xxx + u_xlat16_4.xyz;
    u_xlat3.xy = input.TEXCOORD5.yy * Globals.hlslcc_mtx4x4unity_WorldToLight[1].xy;
    u_xlat3.xy = Globals.hlslcc_mtx4x4unity_WorldToLight[0].xy * input.TEXCOORD5.xx + u_xlat3.xy;
    u_xlat3.xy = Globals.hlslcc_mtx4x4unity_WorldToLight[2].xy * input.TEXCOORD5.zz + u_xlat3.xy;
    u_xlat3.xy = u_xlat3.xy + Globals.hlslcc_mtx4x4unity_WorldToLight[3].xy;
    u_xlat16_3 = _LightTexture0.sample(sampler_LightTexture0, u_xlat3.xy).w;
    u_xlat16_1.xyz = half3(u_xlat16_3) * Globals._LightColor0.xyz;
    u_xlat16_1.xyz = u_xlat16_0.xxx * u_xlat16_1.xyz;
    output.SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_1.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}


//////////////////////////////////////////////////////
Keywords set in this variant: SPOT SHADOWS_DEPTH 
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"
Uses vertex data channel "TexCoord0"

Constant Buffer "Globals" (258 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 32
  Matrix4x4 unity_WorldToObject at 96
  Matrix4x4 unity_MatrixVP at 160
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 _MainTex_ST at 224
  Vector4 _DetailAlbedoMap_ST at 240
  ScalarHalf _UVSec at 256
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    float4 _DetailAlbedoMap_ST;
    half _UVSec;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    half3 NORMAL0 [[ attribute(1) ]] ;
    float2 TEXCOORD0 [[ attribute(2) ]] ;
    float2 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float2 TEXCOORD6 [[ user(TEXCOORD6) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool u_xlatb0;
    float4 u_xlat1;
    float u_xlat6;
    float u_xlat7;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0] * input.POSITION0.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2] * input.POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    output.mtl_Position = Globals.hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlatb0 = Globals._UVSec==half(0.0);
    u_xlat0.xy = (bool(u_xlatb0)) ? input.TEXCOORD0.xy : input.TEXCOORD1.xy;
    output.TEXCOORD0.zw = u_xlat0.xy * Globals._DetailAlbedoMap_ST.xy + Globals._DetailAlbedoMap_ST.zw;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy * Globals._MainTex_ST.xy + Globals._MainTex_ST.zw;
    u_xlat0.xyz = input.POSITION0.yyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * input.POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * input.POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * input.POSITION0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-Globals._WorldSpaceCameraPos.xyzx.xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = rsqrt(u_xlat6);
    u_xlat1.xyz = float3(u_xlat6) * u_xlat1.xyz;
    output.TEXCOORD1.xyz = half3(u_xlat1.xyz);
    u_xlat1.xyz = (-u_xlat0.xyz) * Globals._WorldSpaceLightPos0.www + Globals._WorldSpaceLightPos0.xyz;
    output.TEXCOORD5.xyz = u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = rsqrt(u_xlat0.x);
    u_xlat0.xyw = u_xlat0.xxx * u_xlat1.xyz;
    output.TEXCOORD2.w = half(u_xlat0.x);
    output.TEXCOORD2.xyz = half3(0.0, 0.0, 0.0);
    output.TEXCOORD3.w = half(u_xlat0.y);
    output.TEXCOORD3.xyz = half3(0.0, 0.0, 0.0);
    u_xlat1.x = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat7 = rsqrt(u_xlat7);
    u_xlat0.xyz = float3(u_xlat7) * u_xlat1.xyz;
    output.TEXCOORD4 = half4(u_xlat0);
    output.TEXCOORD6.xy = float2(0.0, 0.0);
    return output;
}


-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0 sampler slot 2
Set 2D Texture "_LightTexture0" to slot 1 sampler slot 3
Set 2D Texture "_LightTextureB0" to slot 2 sampler slot 4
Set 2D Texture "unity_NHxRoughness" to slot 3 sampler slot 0
Set 2D Texture "_ShadowMapTexture" to slot 4 sampler slot 1

Constant Buffer "Globals" (352 bytes) on slot 0 {
  Matrix4x4 unity_WorldToShadow[4] at 0
  Matrix4x4 unity_WorldToLight at 288
  VectorHalf4 _LightShadowData at 256
  VectorHalf4 _LightColor0 at 264
  VectorHalf4 _Color at 272
  ScalarHalf _Metallic at 280
  ScalarHalf _Glossiness at 282
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float4 hlslcc_mtx4x4unity_WorldToShadow[16];
    half4 _LightShadowData;
    half4 _LightColor0;
    half4 _Color;
    half _Metallic;
    half _Glossiness;
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(0) ]];
};

constexpr sampler _mtl_xl_shadow_sampler(address::clamp_to_edge, filter::linear, compare_func::greater_equal);
fragment Mtl_FragmentOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    sampler samplerunity_NHxRoughness [[ sampler (0) ]],
    sampler sampler_ShadowMapTexture [[ sampler (1) ]],
    sampler sampler_MainTex [[ sampler (2) ]],
    sampler sampler_LightTexture0 [[ sampler (3) ]],
    sampler sampler_LightTextureB0 [[ sampler (4) ]],
    texture2d<half, access::sample > _MainTex [[ texture (0) ]] ,
    texture2d<half, access::sample > _LightTexture0 [[ texture (1) ]] ,
    texture2d<half, access::sample > _LightTextureB0 [[ texture (2) ]] ,
    texture2d<half, access::sample > unity_NHxRoughness [[ texture (3) ]] ,
    depth2d<float, access::sample > _ShadowMapTexture [[ texture (4) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    half u_xlat16_0;
    float2 u_xlat1;
    bool u_xlatb1;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    half u_xlat16_15;
    half u_xlat16_17;
    u_xlat0 = input.TEXCOORD5.yyyy * Globals.hlslcc_mtx4x4unity_WorldToLight[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_WorldToLight[0] * input.TEXCOORD5.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_WorldToLight[2] * input.TEXCOORD5.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + Globals.hlslcc_mtx4x4unity_WorldToLight[3];
    u_xlat1.xy = u_xlat0.xy / u_xlat0.ww;
    u_xlat1.xy = u_xlat1.xy + float2(0.5, 0.5);
    u_xlat16_15 = _LightTexture0.sample(sampler_LightTexture0, u_xlat1.xy).w;
    u_xlatb1 = 0.0<u_xlat0.z;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat16_0 = _LightTextureB0.sample(sampler_LightTextureB0, u_xlat0.xx).w;
    u_xlat16_2.x = (u_xlatb1) ? half(1.0) : half(0.0);
    u_xlat16_2.x = u_xlat16_15 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_0 * u_xlat16_2.x;
    u_xlat0 = input.TEXCOORD5.yyyy * Globals.hlslcc_mtx4x4unity_WorldToShadow[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_WorldToShadow[0] * input.TEXCOORD5.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_WorldToShadow[2] * input.TEXCOORD5.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + Globals.hlslcc_mtx4x4unity_WorldToShadow[3];
    u_xlat0.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat16_0 = _ShadowMapTexture.sample_compare(_mtl_xl_shadow_sampler, u_xlat0.xy, saturate(u_xlat0.z), level(0.0));
    u_xlat16_5.x = (-Globals._LightShadowData.x) + half(1.0);
    u_xlat16_0 = u_xlat16_0 * u_xlat16_5.x + Globals._LightShadowData.x;
    u_xlat16_2.x = u_xlat16_0 * u_xlat16_2.x;
    u_xlat16_2.xyz = u_xlat16_2.xxx * Globals._LightColor0.xyz;
    u_xlat16_17 = dot(input.TEXCOORD4.xyz, input.TEXCOORD4.xyz);
    u_xlat16_17 = rsqrt(u_xlat16_17);
    u_xlat16_3.xyz = half3(u_xlat16_17) * input.TEXCOORD4.xyz;
    u_xlat16_4.x = input.TEXCOORD2.w;
    u_xlat16_4.y = input.TEXCOORD3.w;
    u_xlat16_4.z = input.TEXCOORD4.w;
    u_xlat16_17 = dot(u_xlat16_3.xyz, u_xlat16_4.xyz);
    u_xlat16_17 = clamp(u_xlat16_17, 0.0h, 1.0h);
    u_xlat16_2.xyz = half3(u_xlat16_17) * u_xlat16_2.xyz;
    u_xlat16_17 = dot((-input.TEXCOORD1.xyz), u_xlat16_3.xyz);
    u_xlat16_17 = u_xlat16_17 + u_xlat16_17;
    u_xlat16_3.xyz = u_xlat16_3.xyz * (-half3(u_xlat16_17)) + (-input.TEXCOORD1.xyz);
    u_xlat16_17 = dot(u_xlat16_3.xyz, u_xlat16_4.xyz);
    u_xlat16_17 = u_xlat16_17 * u_xlat16_17;
    u_xlat16_3.x = u_xlat16_17 * u_xlat16_17;
    u_xlat16_3.y = (-Globals._Glossiness) + half(1.0);
    u_xlat16_0 = unity_NHxRoughness.sample(samplerunity_NHxRoughness, float2(u_xlat16_3.xy)).w;
    u_xlat16_0 = u_xlat16_0 * half(16.0);
    u_xlat16_5.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_3.xyz = Globals._Color.xyz * u_xlat16_5.xyz + half3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat16_5.xyz = u_xlat16_5.xyz * Globals._Color.xyz;
    u_xlat16_3.xyz = half3(Globals._Metallic) * u_xlat16_3.xyz + half3(0.220916301, 0.220916301, 0.220916301);
    u_xlat16_3.xyz = half3(u_xlat16_0) * u_xlat16_3.xyz;
    u_xlat16_17 = (-Globals._Metallic) * half(0.779083729) + half(0.779083729);
    u_xlat16_3.xyz = u_xlat16_5.xyz * half3(u_xlat16_17) + u_xlat16_3.xyz;
    output.SV_Target0.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}


-- Hardware tier variant: Tier 2
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"
Uses vertex data channel "TexCoord0"

Constant Buffer "Globals" (258 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 32
  Matrix4x4 unity_WorldToObject at 96
  Matrix4x4 unity_MatrixVP at 160
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 _MainTex_ST at 224
  Vector4 _DetailAlbedoMap_ST at 240
  ScalarHalf _UVSec at 256
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    float4 _DetailAlbedoMap_ST;
    half _UVSec;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    half3 NORMAL0 [[ attribute(1) ]] ;
    float2 TEXCOORD0 [[ attribute(2) ]] ;
    float2 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float2 TEXCOORD6 [[ user(TEXCOORD6) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool u_xlatb0;
    float4 u_xlat1;
    float u_xlat6;
    float u_xlat7;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0] * input.POSITION0.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2] * input.POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    output.mtl_Position = Globals.hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlatb0 = Globals._UVSec==half(0.0);
    u_xlat0.xy = (bool(u_xlatb0)) ? input.TEXCOORD0.xy : input.TEXCOORD1.xy;
    output.TEXCOORD0.zw = u_xlat0.xy * Globals._DetailAlbedoMap_ST.xy + Globals._DetailAlbedoMap_ST.zw;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy * Globals._MainTex_ST.xy + Globals._MainTex_ST.zw;
    u_xlat0.xyz = input.POSITION0.yyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * input.POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * input.POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * input.POSITION0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-Globals._WorldSpaceCameraPos.xyzx.xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = rsqrt(u_xlat6);
    u_xlat1.xyz = float3(u_xlat6) * u_xlat1.xyz;
    output.TEXCOORD1.xyz = half3(u_xlat1.xyz);
    u_xlat1.xyz = (-u_xlat0.xyz) * Globals._WorldSpaceLightPos0.www + Globals._WorldSpaceLightPos0.xyz;
    output.TEXCOORD5.xyz = u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = rsqrt(u_xlat0.x);
    u_xlat0.xyw = u_xlat0.xxx * u_xlat1.xyz;
    output.TEXCOORD2.w = half(u_xlat0.x);
    output.TEXCOORD2.xyz = half3(0.0, 0.0, 0.0);
    output.TEXCOORD3.w = half(u_xlat0.y);
    output.TEXCOORD3.xyz = half3(0.0, 0.0, 0.0);
    u_xlat1.x = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat7 = rsqrt(u_xlat7);
    u_xlat0.xyz = float3(u_xlat7) * u_xlat1.xyz;
    output.TEXCOORD4 = half4(u_xlat0);
    output.TEXCOORD6.xy = float2(0.0, 0.0);
    return output;
}


-- Hardware tier variant: Tier 2
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0 sampler slot 2
Set 2D Texture "_LightTexture0" to slot 1 sampler slot 3
Set 2D Texture "_LightTextureB0" to slot 2 sampler slot 4
Set 2D Texture "unity_NHxRoughness" to slot 3 sampler slot 0
Set 2D Texture "_ShadowMapTexture" to slot 4 sampler slot 1

Constant Buffer "Globals" (352 bytes) on slot 0 {
  Matrix4x4 unity_WorldToShadow[4] at 0
  Matrix4x4 unity_WorldToLight at 288
  VectorHalf4 _LightShadowData at 256
  VectorHalf4 _LightColor0 at 264
  VectorHalf4 _Color at 272
  ScalarHalf _Metallic at 280
  ScalarHalf _Glossiness at 282
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float4 hlslcc_mtx4x4unity_WorldToShadow[16];
    half4 _LightShadowData;
    half4 _LightColor0;
    half4 _Color;
    half _Metallic;
    half _Glossiness;
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(0) ]];
};

constexpr sampler _mtl_xl_shadow_sampler(address::clamp_to_edge, filter::linear, compare_func::greater_equal);
fragment Mtl_FragmentOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    sampler samplerunity_NHxRoughness [[ sampler (0) ]],
    sampler sampler_ShadowMapTexture [[ sampler (1) ]],
    sampler sampler_MainTex [[ sampler (2) ]],
    sampler sampler_LightTexture0 [[ sampler (3) ]],
    sampler sampler_LightTextureB0 [[ sampler (4) ]],
    texture2d<half, access::sample > _MainTex [[ texture (0) ]] ,
    texture2d<half, access::sample > _LightTexture0 [[ texture (1) ]] ,
    texture2d<half, access::sample > _LightTextureB0 [[ texture (2) ]] ,
    texture2d<half, access::sample > unity_NHxRoughness [[ texture (3) ]] ,
    depth2d<float, access::sample > _ShadowMapTexture [[ texture (4) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    half u_xlat16_0;
    float2 u_xlat1;
    bool u_xlatb1;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    half u_xlat16_15;
    half u_xlat16_17;
    u_xlat0 = input.TEXCOORD5.yyyy * Globals.hlslcc_mtx4x4unity_WorldToLight[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_WorldToLight[0] * input.TEXCOORD5.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_WorldToLight[2] * input.TEXCOORD5.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + Globals.hlslcc_mtx4x4unity_WorldToLight[3];
    u_xlat1.xy = u_xlat0.xy / u_xlat0.ww;
    u_xlat1.xy = u_xlat1.xy + float2(0.5, 0.5);
    u_xlat16_15 = _LightTexture0.sample(sampler_LightTexture0, u_xlat1.xy).w;
    u_xlatb1 = 0.0<u_xlat0.z;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat16_0 = _LightTextureB0.sample(sampler_LightTextureB0, u_xlat0.xx).w;
    u_xlat16_2.x = (u_xlatb1) ? half(1.0) : half(0.0);
    u_xlat16_2.x = u_xlat16_15 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_0 * u_xlat16_2.x;
    u_xlat0 = input.TEXCOORD5.yyyy * Globals.hlslcc_mtx4x4unity_WorldToShadow[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_WorldToShadow[0] * input.TEXCOORD5.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_WorldToShadow[2] * input.TEXCOORD5.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + Globals.hlslcc_mtx4x4unity_WorldToShadow[3];
    u_xlat0.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat16_0 = _ShadowMapTexture.sample_compare(_mtl_xl_shadow_sampler, u_xlat0.xy, saturate(u_xlat0.z), level(0.0));
    u_xlat16_5.x = (-Globals._LightShadowData.x) + half(1.0);
    u_xlat16_0 = u_xlat16_0 * u_xlat16_5.x + Globals._LightShadowData.x;
    u_xlat16_2.x = u_xlat16_0 * u_xlat16_2.x;
    u_xlat16_2.xyz = u_xlat16_2.xxx * Globals._LightColor0.xyz;
    u_xlat16_17 = dot(input.TEXCOORD4.xyz, input.TEXCOORD4.xyz);
    u_xlat16_17 = rsqrt(u_xlat16_17);
    u_xlat16_3.xyz = half3(u_xlat16_17) * input.TEXCOORD4.xyz;
    u_xlat16_4.x = input.TEXCOORD2.w;
    u_xlat16_4.y = input.TEXCOORD3.w;
    u_xlat16_4.z = input.TEXCOORD4.w;
    u_xlat16_17 = dot(u_xlat16_3.xyz, u_xlat16_4.xyz);
    u_xlat16_17 = clamp(u_xlat16_17, 0.0h, 1.0h);
    u_xlat16_2.xyz = half3(u_xlat16_17) * u_xlat16_2.xyz;
    u_xlat16_17 = dot((-input.TEXCOORD1.xyz), u_xlat16_3.xyz);
    u_xlat16_17 = u_xlat16_17 + u_xlat16_17;
    u_xlat16_3.xyz = u_xlat16_3.xyz * (-half3(u_xlat16_17)) + (-input.TEXCOORD1.xyz);
    u_xlat16_17 = dot(u_xlat16_3.xyz, u_xlat16_4.xyz);
    u_xlat16_17 = u_xlat16_17 * u_xlat16_17;
    u_xlat16_3.x = u_xlat16_17 * u_xlat16_17;
    u_xlat16_3.y = (-Globals._Glossiness) + half(1.0);
    u_xlat16_0 = unity_NHxRoughness.sample(samplerunity_NHxRoughness, float2(u_xlat16_3.xy)).w;
    u_xlat16_0 = u_xlat16_0 * half(16.0);
    u_xlat16_5.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_3.xyz = Globals._Color.xyz * u_xlat16_5.xyz + half3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat16_5.xyz = u_xlat16_5.xyz * Globals._Color.xyz;
    u_xlat16_3.xyz = half3(Globals._Metallic) * u_xlat16_3.xyz + half3(0.220916301, 0.220916301, 0.220916301);
    u_xlat16_3.xyz = half3(u_xlat16_0) * u_xlat16_3.xyz;
    u_xlat16_17 = (-Globals._Metallic) * half(0.779083729) + half(0.779083729);
    u_xlat16_3.xyz = u_xlat16_5.xyz * half3(u_xlat16_17) + u_xlat16_3.xyz;
    output.SV_Target0.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}


-- Hardware tier variant: Tier 3
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"
Uses vertex data channel "TexCoord0"

Constant Buffer "Globals" (258 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 32
  Matrix4x4 unity_WorldToObject at 96
  Matrix4x4 unity_MatrixVP at 160
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 _MainTex_ST at 224
  Vector4 _DetailAlbedoMap_ST at 240
  ScalarHalf _UVSec at 256
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    float4 _DetailAlbedoMap_ST;
    half _UVSec;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    half3 NORMAL0 [[ attribute(1) ]] ;
    float2 TEXCOORD0 [[ attribute(2) ]] ;
    float2 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float2 TEXCOORD6 [[ user(TEXCOORD6) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool u_xlatb0;
    float4 u_xlat1;
    float u_xlat6;
    float u_xlat7;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0] * input.POSITION0.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2] * input.POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    output.mtl_Position = Globals.hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlatb0 = Globals._UVSec==half(0.0);
    u_xlat0.xy = (bool(u_xlatb0)) ? input.TEXCOORD0.xy : input.TEXCOORD1.xy;
    output.TEXCOORD0.zw = u_xlat0.xy * Globals._DetailAlbedoMap_ST.xy + Globals._DetailAlbedoMap_ST.zw;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy * Globals._MainTex_ST.xy + Globals._MainTex_ST.zw;
    u_xlat0.xyz = input.POSITION0.yyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * input.POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * input.POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * input.POSITION0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-Globals._WorldSpaceCameraPos.xyzx.xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = rsqrt(u_xlat6);
    u_xlat1.xyz = float3(u_xlat6) * u_xlat1.xyz;
    output.TEXCOORD1.xyz = half3(u_xlat1.xyz);
    u_xlat1.xyz = (-u_xlat0.xyz) * Globals._WorldSpaceLightPos0.www + Globals._WorldSpaceLightPos0.xyz;
    output.TEXCOORD5.xyz = u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = rsqrt(u_xlat0.x);
    u_xlat0.xyw = u_xlat0.xxx * u_xlat1.xyz;
    output.TEXCOORD2.w = half(u_xlat0.x);
    output.TEXCOORD2.xyz = half3(0.0, 0.0, 0.0);
    output.TEXCOORD3.w = half(u_xlat0.y);
    output.TEXCOORD3.xyz = half3(0.0, 0.0, 0.0);
    u_xlat1.x = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat7 = rsqrt(u_xlat7);
    u_xlat0.xyz = float3(u_xlat7) * u_xlat1.xyz;
    output.TEXCOORD4 = half4(u_xlat0);
    output.TEXCOORD6.xy = float2(0.0, 0.0);
    return output;
}


-- Hardware tier variant: Tier 3
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0 sampler slot 2
Set 2D Texture "_LightTexture0" to slot 1 sampler slot 3
Set 2D Texture "_LightTextureB0" to slot 2 sampler slot 4
Set 2D Texture "unity_NHxRoughness" to slot 3 sampler slot 0
Set 2D Texture "_ShadowMapTexture" to slot 4 sampler slot 1

Constant Buffer "Globals" (352 bytes) on slot 0 {
  Matrix4x4 unity_WorldToShadow[4] at 0
  Matrix4x4 unity_WorldToLight at 288
  VectorHalf4 _LightShadowData at 256
  VectorHalf4 _LightColor0 at 264
  VectorHalf4 _Color at 272
  ScalarHalf _Metallic at 280
  ScalarHalf _Glossiness at 282
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float4 hlslcc_mtx4x4unity_WorldToShadow[16];
    half4 _LightShadowData;
    half4 _LightColor0;
    half4 _Color;
    half _Metallic;
    half _Glossiness;
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(0) ]];
};

constexpr sampler _mtl_xl_shadow_sampler(address::clamp_to_edge, filter::linear, compare_func::greater_equal);
fragment Mtl_FragmentOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    sampler samplerunity_NHxRoughness [[ sampler (0) ]],
    sampler sampler_ShadowMapTexture [[ sampler (1) ]],
    sampler sampler_MainTex [[ sampler (2) ]],
    sampler sampler_LightTexture0 [[ sampler (3) ]],
    sampler sampler_LightTextureB0 [[ sampler (4) ]],
    texture2d<half, access::sample > _MainTex [[ texture (0) ]] ,
    texture2d<half, access::sample > _LightTexture0 [[ texture (1) ]] ,
    texture2d<half, access::sample > _LightTextureB0 [[ texture (2) ]] ,
    texture2d<half, access::sample > unity_NHxRoughness [[ texture (3) ]] ,
    depth2d<float, access::sample > _ShadowMapTexture [[ texture (4) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    half u_xlat16_0;
    float2 u_xlat1;
    bool u_xlatb1;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    half u_xlat16_15;
    half u_xlat16_17;
    u_xlat0 = input.TEXCOORD5.yyyy * Globals.hlslcc_mtx4x4unity_WorldToLight[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_WorldToLight[0] * input.TEXCOORD5.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_WorldToLight[2] * input.TEXCOORD5.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + Globals.hlslcc_mtx4x4unity_WorldToLight[3];
    u_xlat1.xy = u_xlat0.xy / u_xlat0.ww;
    u_xlat1.xy = u_xlat1.xy + float2(0.5, 0.5);
    u_xlat16_15 = _LightTexture0.sample(sampler_LightTexture0, u_xlat1.xy).w;
    u_xlatb1 = 0.0<u_xlat0.z;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat16_0 = _LightTextureB0.sample(sampler_LightTextureB0, u_xlat0.xx).w;
    u_xlat16_2.x = (u_xlatb1) ? half(1.0) : half(0.0);
    u_xlat16_2.x = u_xlat16_15 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_0 * u_xlat16_2.x;
    u_xlat0 = input.TEXCOORD5.yyyy * Globals.hlslcc_mtx4x4unity_WorldToShadow[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_WorldToShadow[0] * input.TEXCOORD5.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_WorldToShadow[2] * input.TEXCOORD5.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + Globals.hlslcc_mtx4x4unity_WorldToShadow[3];
    u_xlat0.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat16_0 = _ShadowMapTexture.sample_compare(_mtl_xl_shadow_sampler, u_xlat0.xy, saturate(u_xlat0.z), level(0.0));
    u_xlat16_5.x = (-Globals._LightShadowData.x) + half(1.0);
    u_xlat16_0 = u_xlat16_0 * u_xlat16_5.x + Globals._LightShadowData.x;
    u_xlat16_2.x = u_xlat16_0 * u_xlat16_2.x;
    u_xlat16_2.xyz = u_xlat16_2.xxx * Globals._LightColor0.xyz;
    u_xlat16_17 = dot(input.TEXCOORD4.xyz, input.TEXCOORD4.xyz);
    u_xlat16_17 = rsqrt(u_xlat16_17);
    u_xlat16_3.xyz = half3(u_xlat16_17) * input.TEXCOORD4.xyz;
    u_xlat16_4.x = input.TEXCOORD2.w;
    u_xlat16_4.y = input.TEXCOORD3.w;
    u_xlat16_4.z = input.TEXCOORD4.w;
    u_xlat16_17 = dot(u_xlat16_3.xyz, u_xlat16_4.xyz);
    u_xlat16_17 = clamp(u_xlat16_17, 0.0h, 1.0h);
    u_xlat16_2.xyz = half3(u_xlat16_17) * u_xlat16_2.xyz;
    u_xlat16_17 = dot((-input.TEXCOORD1.xyz), u_xlat16_3.xyz);
    u_xlat16_17 = u_xlat16_17 + u_xlat16_17;
    u_xlat16_3.xyz = u_xlat16_3.xyz * (-half3(u_xlat16_17)) + (-input.TEXCOORD1.xyz);
    u_xlat16_17 = dot(u_xlat16_3.xyz, u_xlat16_4.xyz);
    u_xlat16_17 = u_xlat16_17 * u_xlat16_17;
    u_xlat16_3.x = u_xlat16_17 * u_xlat16_17;
    u_xlat16_3.y = (-Globals._Glossiness) + half(1.0);
    u_xlat16_0 = unity_NHxRoughness.sample(samplerunity_NHxRoughness, float2(u_xlat16_3.xy)).w;
    u_xlat16_0 = u_xlat16_0 * half(16.0);
    u_xlat16_5.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_3.xyz = Globals._Color.xyz * u_xlat16_5.xyz + half3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat16_5.xyz = u_xlat16_5.xyz * Globals._Color.xyz;
    u_xlat16_3.xyz = half3(Globals._Metallic) * u_xlat16_3.xyz + half3(0.220916301, 0.220916301, 0.220916301);
    u_xlat16_3.xyz = half3(u_xlat16_0) * u_xlat16_3.xyz;
    u_xlat16_17 = (-Globals._Metallic) * half(0.779083729) + half(0.779083729);
    u_xlat16_3.xyz = u_xlat16_5.xyz * half3(u_xlat16_17) + u_xlat16_3.xyz;
    output.SV_Target0.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}


//////////////////////////////////////////////////////
Keywords set in this variant: DIRECTIONAL SHADOWS_SCREEN 
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"
Uses vertex data channel "TexCoord0"

Constant Buffer "Globals" (258 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 32
  Matrix4x4 unity_WorldToObject at 96
  Matrix4x4 unity_MatrixVP at 160
  Vector3 _WorldSpaceCameraPos at 0
  VectorHalf4 _WorldSpaceLightPos0 at 16
  Vector4 _MainTex_ST at 224
  Vector4 _DetailAlbedoMap_ST at 240
  ScalarHalf _UVSec at 256
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    half4 _WorldSpaceLightPos0;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    float4 _DetailAlbedoMap_ST;
    half _UVSec;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    half3 NORMAL0 [[ attribute(1) ]] ;
    float2 TEXCOORD0 [[ attribute(2) ]] ;
    float2 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float2 TEXCOORD6 [[ user(TEXCOORD6) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool u_xlatb0;
    float4 u_xlat1;
    float u_xlat6;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0] * input.POSITION0.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2] * input.POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    output.mtl_Position = Globals.hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlatb0 = Globals._UVSec==half(0.0);
    u_xlat0.xy = (bool(u_xlatb0)) ? input.TEXCOORD0.xy : input.TEXCOORD1.xy;
    output.TEXCOORD0.zw = u_xlat0.xy * Globals._DetailAlbedoMap_ST.xy + Globals._DetailAlbedoMap_ST.zw;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy * Globals._MainTex_ST.xy + Globals._MainTex_ST.zw;
    u_xlat0.xyz = input.POSITION0.yyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * input.POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * input.POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * input.POSITION0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-Globals._WorldSpaceCameraPos.xyzx.xyz);
    output.TEXCOORD1.xyz = half3(u_xlat1.xyz);
    u_xlat1.xyw = (-u_xlat0.xyz) * float3(Globals._WorldSpaceLightPos0.www) + float3(Globals._WorldSpaceLightPos0.xyz);
    output.TEXCOORD5.xyz = u_xlat0.xyz;
    output.TEXCOORD2.w = half(u_xlat1.x);
    output.TEXCOORD2.xyz = half3(0.0, 0.0, 0.0);
    output.TEXCOORD3.w = half(u_xlat1.y);
    output.TEXCOORD3.xyz = half3(0.0, 0.0, 0.0);
    u_xlat0.x = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = rsqrt(u_xlat6);
    u_xlat1.xyz = float3(u_xlat6) * u_xlat0.xyz;
    output.TEXCOORD4 = half4(u_xlat1);
    output.TEXCOORD6.xy = float2(0.0, 0.0);
    return output;
}


-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0 sampler slot 1
Set 2D Texture "unity_NHxRoughness" to slot 1 sampler slot 0
Set 2D Texture "_ShadowMapTexture" to slot 2

Constant Buffer "Globals" (388 bytes) on slot 0 {
  Matrix4x4 unity_WorldToShadow[4] at 16
  Matrix4x4 unity_MatrixV at 304
  Vector3 _WorldSpaceCameraPos at 0
  VectorHalf4 _LightShadowData at 272
  Vector4 unity_ShadowFadeCenterAndType at 288
  VectorHalf4 _LightColor0 at 368
  VectorHalf4 _Color at 376
  ScalarHalf _Metallic at 384
  ScalarHalf _Glossiness at 386
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 hlslcc_mtx4x4unity_WorldToShadow[16];
    half4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    half4 _LightColor0;
    half4 _Color;
    half _Metallic;
    half _Glossiness;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(0) ]];
};

constexpr sampler _mtl_xl_shadow_sampler(address::clamp_to_edge, filter::linear, compare_func::greater_equal);
fragment Mtl_FragmentOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    sampler samplerunity_NHxRoughness [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_ShadowMapTexture [[ sampler (2) ]],
    texture2d<half, access::sample > _MainTex [[ texture (0) ]] ,
    texture2d<half, access::sample > unity_NHxRoughness [[ texture (1) ]] ,
    depth2d<float, access::sample > _ShadowMapTexture [[ texture (2) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half4 u_xlat16_0;
    half3 u_xlat16_1;
    half3 u_xlat16_2;
    float3 u_xlat3;
    half u_xlat16_3;
    float3 u_xlat4;
    half u_xlat16_5;
    float3 u_xlat8;
    half3 u_xlat16_8;
    half u_xlat16_15;
    u_xlat16_0.x = dot(input.TEXCOORD1.xyz, input.TEXCOORD1.xyz);
    u_xlat16_0.x = rsqrt(u_xlat16_0.x);
    u_xlat16_0.xyz = u_xlat16_0.xxx * input.TEXCOORD1.xyz;
    u_xlat16_15 = dot(input.TEXCOORD4.xyz, input.TEXCOORD4.xyz);
    u_xlat16_15 = rsqrt(u_xlat16_15);
    u_xlat16_1.xyz = half3(u_xlat16_15) * input.TEXCOORD4.xyz;
    u_xlat16_15 = dot((-u_xlat16_0.xyz), u_xlat16_1.xyz);
    u_xlat16_15 = u_xlat16_15 + u_xlat16_15;
    u_xlat16_0.xyz = u_xlat16_1.xyz * (-half3(u_xlat16_15)) + (-u_xlat16_0.xyz);
    u_xlat16_2.x = input.TEXCOORD2.w;
    u_xlat16_2.y = input.TEXCOORD3.w;
    u_xlat16_2.z = input.TEXCOORD4.w;
    u_xlat16_0.x = dot(u_xlat16_0.xyz, u_xlat16_2.xyz);
    u_xlat16_5 = dot(u_xlat16_1.xyz, u_xlat16_2.xyz);
    u_xlat16_5 = clamp(u_xlat16_5, 0.0h, 1.0h);
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_1.x = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_1.y = (-Globals._Glossiness) + half(1.0);
    u_xlat16_3 = unity_NHxRoughness.sample(samplerunity_NHxRoughness, float2(u_xlat16_1.xy)).w;
    u_xlat16_3 = u_xlat16_3 * half(16.0);
    u_xlat16_8.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_0.xzw = Globals._Color.xyz * u_xlat16_8.xyz + half3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat16_8.xyz = u_xlat16_8.xyz * Globals._Color.xyz;
    u_xlat16_0.xzw = half3(Globals._Metallic) * u_xlat16_0.xzw + half3(0.220916301, 0.220916301, 0.220916301);
    u_xlat16_0.xzw = u_xlat16_0.xzw * half3(u_xlat16_3);
    u_xlat16_1.x = (-Globals._Metallic) * half(0.779083729) + half(0.779083729);
    u_xlat16_0.xzw = u_xlat16_8.xyz * u_xlat16_1.xxx + u_xlat16_0.xzw;
    u_xlat3.xyz = input.TEXCOORD5.xyz + (-Globals.unity_ShadowFadeCenterAndType.xyz);
    u_xlat3.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat3.x = sqrt(u_xlat3.x);
    u_xlat8.xyz = (-input.TEXCOORD5.xyz) + Globals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat4.x = Globals.hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat4.y = Globals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.z = Globals.hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat8.x = dot(u_xlat8.xyz, u_xlat4.xyz);
    u_xlat3.x = (-u_xlat8.x) + u_xlat3.x;
    u_xlat3.x = Globals.unity_ShadowFadeCenterAndType.w * u_xlat3.x + u_xlat8.x;
    u_xlat3.x = u_xlat3.x * float(Globals._LightShadowData.z) + float(Globals._LightShadowData.w);
    u_xlat3.x = clamp(u_xlat3.x, 0.0f, 1.0f);
    u_xlat8.xyz = input.TEXCOORD5.yyy * Globals.hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
    u_xlat8.xyz = Globals.hlslcc_mtx4x4unity_WorldToShadow[0].xyz * input.TEXCOORD5.xxx + u_xlat8.xyz;
    u_xlat8.xyz = Globals.hlslcc_mtx4x4unity_WorldToShadow[2].xyz * input.TEXCOORD5.zzz + u_xlat8.xyz;
    u_xlat8.xyz = u_xlat8.xyz + Globals.hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
    u_xlat16_8.x = _ShadowMapTexture.sample_compare(_mtl_xl_shadow_sampler, u_xlat8.xy, saturate(u_xlat8.z), level(0.0));
    u_xlat16_1.x = (-Globals._LightShadowData.x) + half(1.0);
    u_xlat16_1.x = u_xlat16_8.x * u_xlat16_1.x + Globals._LightShadowData.x;
    u_xlat16_1.x = half(u_xlat3.x + float(u_xlat16_1.x));
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0h, 1.0h);
    u_xlat16_1.xyz = u_xlat16_1.xxx * Globals._LightColor0.xyz;
    u_xlat16_1.xyz = half3(u_xlat16_5) * u_xlat16_1.xyz;
    output.SV_Target0.xyz = u_xlat16_0.xzw * u_xlat16_1.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}


-- Hardware tier variant: Tier 2
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"
Uses vertex data channel "TexCoord0"

Constant Buffer "Globals" (258 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 32
  Matrix4x4 unity_WorldToObject at 96
  Matrix4x4 unity_MatrixVP at 160
  Vector3 _WorldSpaceCameraPos at 0
  VectorHalf4 _WorldSpaceLightPos0 at 16
  Vector4 _MainTex_ST at 224
  Vector4 _DetailAlbedoMap_ST at 240
  ScalarHalf _UVSec at 256
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    half4 _WorldSpaceLightPos0;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    float4 _DetailAlbedoMap_ST;
    half _UVSec;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    half3 NORMAL0 [[ attribute(1) ]] ;
    float2 TEXCOORD0 [[ attribute(2) ]] ;
    float2 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float2 TEXCOORD6 [[ user(TEXCOORD6) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool u_xlatb0;
    float4 u_xlat1;
    float u_xlat6;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0] * input.POSITION0.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2] * input.POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    output.mtl_Position = Globals.hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlatb0 = Globals._UVSec==half(0.0);
    u_xlat0.xy = (bool(u_xlatb0)) ? input.TEXCOORD0.xy : input.TEXCOORD1.xy;
    output.TEXCOORD0.zw = u_xlat0.xy * Globals._DetailAlbedoMap_ST.xy + Globals._DetailAlbedoMap_ST.zw;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy * Globals._MainTex_ST.xy + Globals._MainTex_ST.zw;
    u_xlat0.xyz = input.POSITION0.yyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * input.POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * input.POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * input.POSITION0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-Globals._WorldSpaceCameraPos.xyzx.xyz);
    output.TEXCOORD1.xyz = half3(u_xlat1.xyz);
    u_xlat1.xyw = (-u_xlat0.xyz) * float3(Globals._WorldSpaceLightPos0.www) + float3(Globals._WorldSpaceLightPos0.xyz);
    output.TEXCOORD5.xyz = u_xlat0.xyz;
    output.TEXCOORD2.w = half(u_xlat1.x);
    output.TEXCOORD2.xyz = half3(0.0, 0.0, 0.0);
    output.TEXCOORD3.w = half(u_xlat1.y);
    output.TEXCOORD3.xyz = half3(0.0, 0.0, 0.0);
    u_xlat0.x = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = rsqrt(u_xlat6);
    u_xlat1.xyz = float3(u_xlat6) * u_xlat0.xyz;
    output.TEXCOORD4 = half4(u_xlat1);
    output.TEXCOORD6.xy = float2(0.0, 0.0);
    return output;
}


-- Hardware tier variant: Tier 2
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0
Set 2D Texture "_ShadowMapTexture" to slot 1

Constant Buffer "Globals" (388 bytes) on slot 0 {
  Matrix4x4 unity_WorldToShadow[4] at 16
  Matrix4x4 unity_MatrixV at 304
  Vector3 _WorldSpaceCameraPos at 0
  VectorHalf4 _LightShadowData at 272
  Vector4 unity_ShadowFadeCenterAndType at 288
  VectorHalf4 _LightColor0 at 368
  VectorHalf4 _Color at 376
  ScalarHalf _Metallic at 384
  ScalarHalf _Glossiness at 386
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 hlslcc_mtx4x4unity_WorldToShadow[16];
    half4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    half4 _LightColor0;
    half4 _Color;
    half _Metallic;
    half _Glossiness;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(0) ]];
};

constexpr sampler _mtl_xl_shadow_sampler(address::clamp_to_edge, filter::linear, compare_func::greater_equal);
fragment Mtl_FragmentOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_ShadowMapTexture [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture (0) ]] ,
    depth2d<float, access::sample > _ShadowMapTexture [[ texture (1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    float3 u_xlat6;
    half u_xlat16_6;
    half3 u_xlat16_9;
    half u_xlat16_20;
    half u_xlat16_21;
    u_xlat0.xyz = input.TEXCOORD5.xyz + (-Globals.unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat6.xyz = (-input.TEXCOORD5.xyz) + Globals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat1.x = Globals.hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = Globals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = Globals.hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat6.x = dot(u_xlat6.xyz, u_xlat1.xyz);
    u_xlat0.x = (-u_xlat6.x) + u_xlat0.x;
    u_xlat0.x = Globals.unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat6.x;
    u_xlat0.x = u_xlat0.x * float(Globals._LightShadowData.z) + float(Globals._LightShadowData.w);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat6.xyz = input.TEXCOORD5.yyy * Globals.hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
    u_xlat6.xyz = Globals.hlslcc_mtx4x4unity_WorldToShadow[0].xyz * input.TEXCOORD5.xxx + u_xlat6.xyz;
    u_xlat6.xyz = Globals.hlslcc_mtx4x4unity_WorldToShadow[2].xyz * input.TEXCOORD5.zzz + u_xlat6.xyz;
    u_xlat6.xyz = u_xlat6.xyz + Globals.hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
    u_xlat16_6 = _ShadowMapTexture.sample_compare(_mtl_xl_shadow_sampler, u_xlat6.xy, saturate(u_xlat6.z), level(0.0));
    u_xlat16_2.x = (-Globals._LightShadowData.x) + half(1.0);
    u_xlat16_2.x = u_xlat16_6 * u_xlat16_2.x + Globals._LightShadowData.x;
    u_xlat16_2.x = half(u_xlat0.x + float(u_xlat16_2.x));
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0h, 1.0h);
    u_xlat16_2.xyz = u_xlat16_2.xxx * Globals._LightColor0.xyz;
    u_xlat16_20 = dot(input.TEXCOORD1.xyz, input.TEXCOORD1.xyz);
    u_xlat16_20 = rsqrt(u_xlat16_20);
    u_xlat16_3.x = input.TEXCOORD2.w;
    u_xlat16_3.y = input.TEXCOORD3.w;
    u_xlat16_3.z = input.TEXCOORD4.w;
    u_xlat16_4.xyz = (-input.TEXCOORD1.xyz) * half3(u_xlat16_20) + u_xlat16_3.xyz;
    u_xlat16_20 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
    u_xlat16_0.x = max(u_xlat16_20, half(0.00100000005));
    u_xlat16_20 = rsqrt(u_xlat16_0.x);
    u_xlat16_4.xyz = half3(u_xlat16_20) * u_xlat16_4.xyz;
    u_xlat16_20 = dot(u_xlat16_3.xyz, u_xlat16_4.xyz);
    u_xlat16_20 = clamp(u_xlat16_20, 0.0h, 1.0h);
    u_xlat16_0.x = max(u_xlat16_20, half(0.319999993));
    u_xlat16_20 = (-Globals._Glossiness) + half(1.0);
    u_xlat16_6 = u_xlat16_20 * u_xlat16_20 + half(1.5);
    u_xlat16_20 = u_xlat16_20 * u_xlat16_20;
    u_xlat16_0.x = u_xlat16_6 * u_xlat16_0.x;
    u_xlat16_21 = dot(input.TEXCOORD4.xyz, input.TEXCOORD4.xyz);
    u_xlat16_21 = rsqrt(u_xlat16_21);
    u_xlat16_5.xyz = half3(u_xlat16_21) * input.TEXCOORD4.xyz;
    u_xlat16_21 = dot(u_xlat16_5.xyz, u_xlat16_4.xyz);
    u_xlat16_21 = clamp(u_xlat16_21, 0.0h, 1.0h);
    u_xlat16_3.x = dot(u_xlat16_5.xyz, u_xlat16_3.xyz);
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0h, 1.0h);
    u_xlat16_9.x = u_xlat16_21 * u_xlat16_21;
    u_xlat16_6 = u_xlat16_20 * u_xlat16_20 + half(-1.0);
    u_xlat16_6 = u_xlat16_9.x * u_xlat16_6 + half(1.00001001);
    u_xlat16_0.x = u_xlat16_6 * u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_20 / u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x + half(-9.99999975e-05);
    u_xlat16_20 = max(u_xlat16_0.x, half(0.0));
    u_xlat16_20 = min(u_xlat16_20, half(100.0));
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_9.xyz = Globals._Color.xyz * u_xlat16_0.xyz + half3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat16_0.xyz = u_xlat16_0.xyz * Globals._Color.xyz;
    u_xlat16_9.xyz = half3(Globals._Metallic) * u_xlat16_9.xyz + half3(0.220916301, 0.220916301, 0.220916301);
    u_xlat16_9.xyz = half3(u_xlat16_20) * u_xlat16_9.xyz;
    u_xlat16_20 = (-Globals._Metallic) * half(0.779083729) + half(0.779083729);
    u_xlat16_9.xyz = u_xlat16_0.xyz * half3(u_xlat16_20) + u_xlat16_9.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_9.xyz;
    output.SV_Target0.xyz = u_xlat16_3.xxx * u_xlat16_2.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}


-- Hardware tier variant: Tier 3
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"
Uses vertex data channel "TexCoord0"

Constant Buffer "Globals" (258 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 32
  Matrix4x4 unity_WorldToObject at 96
  Matrix4x4 unity_MatrixVP at 160
  Vector3 _WorldSpaceCameraPos at 0
  VectorHalf4 _WorldSpaceLightPos0 at 16
  Vector4 _MainTex_ST at 224
  Vector4 _DetailAlbedoMap_ST at 240
  ScalarHalf _UVSec at 256
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    half4 _WorldSpaceLightPos0;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    float4 _DetailAlbedoMap_ST;
    half _UVSec;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    half3 NORMAL0 [[ attribute(1) ]] ;
    float2 TEXCOORD0 [[ attribute(2) ]] ;
    float2 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float2 TEXCOORD6 [[ user(TEXCOORD6) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool u_xlatb0;
    float4 u_xlat1;
    float u_xlat6;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0] * input.POSITION0.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2] * input.POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    output.mtl_Position = Globals.hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlatb0 = Globals._UVSec==half(0.0);
    u_xlat0.xy = (bool(u_xlatb0)) ? input.TEXCOORD0.xy : input.TEXCOORD1.xy;
    output.TEXCOORD0.zw = u_xlat0.xy * Globals._DetailAlbedoMap_ST.xy + Globals._DetailAlbedoMap_ST.zw;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy * Globals._MainTex_ST.xy + Globals._MainTex_ST.zw;
    u_xlat0.xyz = input.POSITION0.yyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * input.POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * input.POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * input.POSITION0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-Globals._WorldSpaceCameraPos.xyzx.xyz);
    output.TEXCOORD1.xyz = half3(u_xlat1.xyz);
    u_xlat1.xyw = (-u_xlat0.xyz) * float3(Globals._WorldSpaceLightPos0.www) + float3(Globals._WorldSpaceLightPos0.xyz);
    output.TEXCOORD5.xyz = u_xlat0.xyz;
    output.TEXCOORD2.w = half(u_xlat1.x);
    output.TEXCOORD2.xyz = half3(0.0, 0.0, 0.0);
    output.TEXCOORD3.w = half(u_xlat1.y);
    output.TEXCOORD3.xyz = half3(0.0, 0.0, 0.0);
    u_xlat0.x = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = rsqrt(u_xlat6);
    u_xlat1.xyz = float3(u_xlat6) * u_xlat0.xyz;
    output.TEXCOORD4 = half4(u_xlat1);
    output.TEXCOORD6.xy = float2(0.0, 0.0);
    return output;
}


-- Hardware tier variant: Tier 3
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0
Set 2D Texture "_ShadowMapTexture" to slot 1

Constant Buffer "Globals" (388 bytes) on slot 0 {
  Matrix4x4 unity_WorldToShadow[4] at 16
  Matrix4x4 unity_MatrixV at 304
  Vector3 _WorldSpaceCameraPos at 0
  VectorHalf4 _LightShadowData at 272
  Vector4 unity_ShadowFadeCenterAndType at 288
  VectorHalf4 _LightColor0 at 368
  VectorHalf4 _Color at 376
  ScalarHalf _Metallic at 384
  ScalarHalf _Glossiness at 386
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 hlslcc_mtx4x4unity_WorldToShadow[16];
    half4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    half4 _LightColor0;
    half4 _Color;
    half _Metallic;
    half _Glossiness;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(0) ]];
};

constexpr sampler _mtl_xl_shadow_sampler(address::clamp_to_edge, filter::linear, compare_func::greater_equal);
fragment Mtl_FragmentOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_ShadowMapTexture [[ sampler (1) ]],
    texture2d<half, access::sample > _MainTex [[ texture (0) ]] ,
    depth2d<float, access::sample > _ShadowMapTexture [[ texture (1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    float3 u_xlat6;
    half u_xlat16_6;
    half3 u_xlat16_9;
    half u_xlat16_20;
    half u_xlat16_21;
    u_xlat0.xyz = input.TEXCOORD5.xyz + (-Globals.unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat6.xyz = (-input.TEXCOORD5.xyz) + Globals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat1.x = Globals.hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = Globals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = Globals.hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat6.x = dot(u_xlat6.xyz, u_xlat1.xyz);
    u_xlat0.x = (-u_xlat6.x) + u_xlat0.x;
    u_xlat0.x = Globals.unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat6.x;
    u_xlat0.x = u_xlat0.x * float(Globals._LightShadowData.z) + float(Globals._LightShadowData.w);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat6.xyz = input.TEXCOORD5.yyy * Globals.hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
    u_xlat6.xyz = Globals.hlslcc_mtx4x4unity_WorldToShadow[0].xyz * input.TEXCOORD5.xxx + u_xlat6.xyz;
    u_xlat6.xyz = Globals.hlslcc_mtx4x4unity_WorldToShadow[2].xyz * input.TEXCOORD5.zzz + u_xlat6.xyz;
    u_xlat6.xyz = u_xlat6.xyz + Globals.hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
    u_xlat16_6 = _ShadowMapTexture.sample_compare(_mtl_xl_shadow_sampler, u_xlat6.xy, saturate(u_xlat6.z), level(0.0));
    u_xlat16_2.x = (-Globals._LightShadowData.x) + half(1.0);
    u_xlat16_2.x = u_xlat16_6 * u_xlat16_2.x + Globals._LightShadowData.x;
    u_xlat16_2.x = half(u_xlat0.x + float(u_xlat16_2.x));
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0h, 1.0h);
    u_xlat16_2.xyz = u_xlat16_2.xxx * Globals._LightColor0.xyz;
    u_xlat16_20 = dot(input.TEXCOORD1.xyz, input.TEXCOORD1.xyz);
    u_xlat16_20 = rsqrt(u_xlat16_20);
    u_xlat16_3.x = input.TEXCOORD2.w;
    u_xlat16_3.y = input.TEXCOORD3.w;
    u_xlat16_3.z = input.TEXCOORD4.w;
    u_xlat16_4.xyz = (-input.TEXCOORD1.xyz) * half3(u_xlat16_20) + u_xlat16_3.xyz;
    u_xlat16_20 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
    u_xlat16_0.x = max(u_xlat16_20, half(0.00100000005));
    u_xlat16_20 = rsqrt(u_xlat16_0.x);
    u_xlat16_4.xyz = half3(u_xlat16_20) * u_xlat16_4.xyz;
    u_xlat16_20 = dot(u_xlat16_3.xyz, u_xlat16_4.xyz);
    u_xlat16_20 = clamp(u_xlat16_20, 0.0h, 1.0h);
    u_xlat16_0.x = max(u_xlat16_20, half(0.319999993));
    u_xlat16_20 = (-Globals._Glossiness) + half(1.0);
    u_xlat16_6 = u_xlat16_20 * u_xlat16_20 + half(1.5);
    u_xlat16_20 = u_xlat16_20 * u_xlat16_20;
    u_xlat16_0.x = u_xlat16_6 * u_xlat16_0.x;
    u_xlat16_21 = dot(input.TEXCOORD4.xyz, input.TEXCOORD4.xyz);
    u_xlat16_21 = rsqrt(u_xlat16_21);
    u_xlat16_5.xyz = half3(u_xlat16_21) * input.TEXCOORD4.xyz;
    u_xlat16_21 = dot(u_xlat16_5.xyz, u_xlat16_4.xyz);
    u_xlat16_21 = clamp(u_xlat16_21, 0.0h, 1.0h);
    u_xlat16_3.x = dot(u_xlat16_5.xyz, u_xlat16_3.xyz);
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0h, 1.0h);
    u_xlat16_9.x = u_xlat16_21 * u_xlat16_21;
    u_xlat16_6 = u_xlat16_20 * u_xlat16_20 + half(-1.0);
    u_xlat16_6 = u_xlat16_9.x * u_xlat16_6 + half(1.00001001);
    u_xlat16_0.x = u_xlat16_6 * u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_20 / u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x + half(-9.99999975e-05);
    u_xlat16_20 = max(u_xlat16_0.x, half(0.0));
    u_xlat16_20 = min(u_xlat16_20, half(100.0));
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_9.xyz = Globals._Color.xyz * u_xlat16_0.xyz + half3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat16_0.xyz = u_xlat16_0.xyz * Globals._Color.xyz;
    u_xlat16_9.xyz = half3(Globals._Metallic) * u_xlat16_9.xyz + half3(0.220916301, 0.220916301, 0.220916301);
    u_xlat16_9.xyz = half3(u_xlat16_20) * u_xlat16_9.xyz;
    u_xlat16_20 = (-Globals._Metallic) * half(0.779083729) + half(0.779083729);
    u_xlat16_9.xyz = u_xlat16_0.xyz * half3(u_xlat16_20) + u_xlat16_9.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_9.xyz;
    output.SV_Target0.xyz = u_xlat16_3.xxx * u_xlat16_2.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}


//////////////////////////////////////////////////////
Keywords set in this variant: DIRECTIONAL_COOKIE SHADOWS_SCREEN 
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"
Uses vertex data channel "TexCoord0"

Constant Buffer "Globals" (258 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 32
  Matrix4x4 unity_WorldToObject at 96
  Matrix4x4 unity_MatrixVP at 160
  Vector3 _WorldSpaceCameraPos at 0
  VectorHalf4 _WorldSpaceLightPos0 at 16
  Vector4 _MainTex_ST at 224
  Vector4 _DetailAlbedoMap_ST at 240
  ScalarHalf _UVSec at 256
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    half4 _WorldSpaceLightPos0;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    float4 _DetailAlbedoMap_ST;
    half _UVSec;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    half3 NORMAL0 [[ attribute(1) ]] ;
    float2 TEXCOORD0 [[ attribute(2) ]] ;
    float2 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float2 TEXCOORD6 [[ user(TEXCOORD6) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool u_xlatb0;
    float4 u_xlat1;
    float u_xlat6;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0] * input.POSITION0.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2] * input.POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    output.mtl_Position = Globals.hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlatb0 = Globals._UVSec==half(0.0);
    u_xlat0.xy = (bool(u_xlatb0)) ? input.TEXCOORD0.xy : input.TEXCOORD1.xy;
    output.TEXCOORD0.zw = u_xlat0.xy * Globals._DetailAlbedoMap_ST.xy + Globals._DetailAlbedoMap_ST.zw;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy * Globals._MainTex_ST.xy + Globals._MainTex_ST.zw;
    u_xlat0.xyz = input.POSITION0.yyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * input.POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * input.POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * input.POSITION0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-Globals._WorldSpaceCameraPos.xyzx.xyz);
    output.TEXCOORD1.xyz = half3(u_xlat1.xyz);
    u_xlat1.xyw = (-u_xlat0.xyz) * float3(Globals._WorldSpaceLightPos0.www) + float3(Globals._WorldSpaceLightPos0.xyz);
    output.TEXCOORD5.xyz = u_xlat0.xyz;
    output.TEXCOORD2.w = half(u_xlat1.x);
    output.TEXCOORD2.xyz = half3(0.0, 0.0, 0.0);
    output.TEXCOORD3.w = half(u_xlat1.y);
    output.TEXCOORD3.xyz = half3(0.0, 0.0, 0.0);
    u_xlat0.x = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = rsqrt(u_xlat6);
    u_xlat1.xyz = float3(u_xlat6) * u_xlat0.xyz;
    output.TEXCOORD4 = half4(u_xlat1);
    output.TEXCOORD6.xy = float2(0.0, 0.0);
    return output;
}


-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0 sampler slot 1
Set 2D Texture "_LightTexture0" to slot 1 sampler slot 3
Set 2D Texture "unity_NHxRoughness" to slot 2 sampler slot 0
Set 2D Texture "_ShadowMapTexture" to slot 3 sampler slot 2

Constant Buffer "Globals" (464 bytes) on slot 0 {
  Matrix4x4 unity_WorldToShadow[4] at 16
  Matrix4x4 unity_MatrixV at 304
  Matrix4x4 unity_WorldToLight at 400
  Vector3 _WorldSpaceCameraPos at 0
  VectorHalf4 _LightShadowData at 272
  Vector4 unity_ShadowFadeCenterAndType at 288
  VectorHalf4 _LightColor0 at 368
  VectorHalf4 _Color at 376
  ScalarHalf _Metallic at 384
  ScalarHalf _Glossiness at 386
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 hlslcc_mtx4x4unity_WorldToShadow[16];
    half4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    half4 _LightColor0;
    half4 _Color;
    half _Metallic;
    half _Glossiness;
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(0) ]];
};

constexpr sampler _mtl_xl_shadow_sampler(address::clamp_to_edge, filter::linear, compare_func::greater_equal);
fragment Mtl_FragmentOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    sampler samplerunity_NHxRoughness [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_ShadowMapTexture [[ sampler (2) ]],
    sampler sampler_LightTexture0 [[ sampler (3) ]],
    texture2d<half, access::sample > _MainTex [[ texture (0) ]] ,
    texture2d<half, access::sample > _LightTexture0 [[ texture (1) ]] ,
    texture2d<half, access::sample > unity_NHxRoughness [[ texture (2) ]] ,
    depth2d<float, access::sample > _ShadowMapTexture [[ texture (3) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    float3 u_xlat6;
    half3 u_xlat16_6;
    half u_xlat16_20;
    u_xlat0.xyz = input.TEXCOORD5.xyz + (-Globals.unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat6.xyz = (-input.TEXCOORD5.xyz) + Globals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat1.x = Globals.hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = Globals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = Globals.hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat6.x = dot(u_xlat6.xyz, u_xlat1.xyz);
    u_xlat0.x = (-u_xlat6.x) + u_xlat0.x;
    u_xlat0.x = Globals.unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat6.x;
    u_xlat0.x = u_xlat0.x * float(Globals._LightShadowData.z) + float(Globals._LightShadowData.w);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat6.xyz = input.TEXCOORD5.yyy * Globals.hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
    u_xlat6.xyz = Globals.hlslcc_mtx4x4unity_WorldToShadow[0].xyz * input.TEXCOORD5.xxx + u_xlat6.xyz;
    u_xlat6.xyz = Globals.hlslcc_mtx4x4unity_WorldToShadow[2].xyz * input.TEXCOORD5.zzz + u_xlat6.xyz;
    u_xlat6.xyz = u_xlat6.xyz + Globals.hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
    u_xlat16_6.x = _ShadowMapTexture.sample_compare(_mtl_xl_shadow_sampler, u_xlat6.xy, saturate(u_xlat6.z), level(0.0));
    u_xlat16_2.x = (-Globals._LightShadowData.x) + half(1.0);
    u_xlat16_2.x = u_xlat16_6.x * u_xlat16_2.x + Globals._LightShadowData.x;
    u_xlat16_2.x = half(u_xlat0.x + float(u_xlat16_2.x));
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0h, 1.0h);
    u_xlat0.xy = input.TEXCOORD5.yy * Globals.hlslcc_mtx4x4unity_WorldToLight[1].xy;
    u_xlat0.xy = Globals.hlslcc_mtx4x4unity_WorldToLight[0].xy * input.TEXCOORD5.xx + u_xlat0.xy;
    u_xlat0.xy = Globals.hlslcc_mtx4x4unity_WorldToLight[2].xy * input.TEXCOORD5.zz + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy + Globals.hlslcc_mtx4x4unity_WorldToLight[3].xy;
    u_xlat16_0 = _LightTexture0.sample(sampler_LightTexture0, u_xlat0.xy).w;
    u_xlat16_0 = u_xlat16_2.x * u_xlat16_0;
    u_xlat16_2.xyz = half3(u_xlat16_0) * Globals._LightColor0.xyz;
    u_xlat16_20 = dot(input.TEXCOORD4.xyz, input.TEXCOORD4.xyz);
    u_xlat16_20 = rsqrt(u_xlat16_20);
    u_xlat16_3.xyz = half3(u_xlat16_20) * input.TEXCOORD4.xyz;
    u_xlat16_4.x = input.TEXCOORD2.w;
    u_xlat16_4.y = input.TEXCOORD3.w;
    u_xlat16_4.z = input.TEXCOORD4.w;
    u_xlat16_20 = dot(u_xlat16_3.xyz, u_xlat16_4.xyz);
    u_xlat16_20 = clamp(u_xlat16_20, 0.0h, 1.0h);
    u_xlat16_2.xyz = half3(u_xlat16_20) * u_xlat16_2.xyz;
    u_xlat16_20 = dot(input.TEXCOORD1.xyz, input.TEXCOORD1.xyz);
    u_xlat16_20 = rsqrt(u_xlat16_20);
    u_xlat16_5.xyz = half3(u_xlat16_20) * input.TEXCOORD1.xyz;
    u_xlat16_20 = dot((-u_xlat16_5.xyz), u_xlat16_3.xyz);
    u_xlat16_20 = u_xlat16_20 + u_xlat16_20;
    u_xlat16_3.xyz = u_xlat16_3.xyz * (-half3(u_xlat16_20)) + (-u_xlat16_5.xyz);
    u_xlat16_20 = dot(u_xlat16_3.xyz, u_xlat16_4.xyz);
    u_xlat16_20 = u_xlat16_20 * u_xlat16_20;
    u_xlat16_3.x = u_xlat16_20 * u_xlat16_20;
    u_xlat16_3.y = (-Globals._Glossiness) + half(1.0);
    u_xlat16_0 = unity_NHxRoughness.sample(samplerunity_NHxRoughness, float2(u_xlat16_3.xy)).w;
    u_xlat16_0 = u_xlat16_0 * half(16.0);
    u_xlat16_6.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_3.xyz = Globals._Color.xyz * u_xlat16_6.xyz + half3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat16_6.xyz = u_xlat16_6.xyz * Globals._Color.xyz;
    u_xlat16_3.xyz = half3(Globals._Metallic) * u_xlat16_3.xyz + half3(0.220916301, 0.220916301, 0.220916301);
    u_xlat16_3.xyz = half3(u_xlat16_0) * u_xlat16_3.xyz;
    u_xlat16_20 = (-Globals._Metallic) * half(0.779083729) + half(0.779083729);
    u_xlat16_3.xyz = u_xlat16_6.xyz * half3(u_xlat16_20) + u_xlat16_3.xyz;
    output.SV_Target0.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}


-- Hardware tier variant: Tier 2
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"
Uses vertex data channel "TexCoord0"

Constant Buffer "Globals" (258 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 32
  Matrix4x4 unity_WorldToObject at 96
  Matrix4x4 unity_MatrixVP at 160
  Vector3 _WorldSpaceCameraPos at 0
  VectorHalf4 _WorldSpaceLightPos0 at 16
  Vector4 _MainTex_ST at 224
  Vector4 _DetailAlbedoMap_ST at 240
  ScalarHalf _UVSec at 256
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    half4 _WorldSpaceLightPos0;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    float4 _DetailAlbedoMap_ST;
    half _UVSec;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    half3 NORMAL0 [[ attribute(1) ]] ;
    float2 TEXCOORD0 [[ attribute(2) ]] ;
    float2 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float2 TEXCOORD6 [[ user(TEXCOORD6) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool u_xlatb0;
    float4 u_xlat1;
    float u_xlat6;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0] * input.POSITION0.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2] * input.POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    output.mtl_Position = Globals.hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlatb0 = Globals._UVSec==half(0.0);
    u_xlat0.xy = (bool(u_xlatb0)) ? input.TEXCOORD0.xy : input.TEXCOORD1.xy;
    output.TEXCOORD0.zw = u_xlat0.xy * Globals._DetailAlbedoMap_ST.xy + Globals._DetailAlbedoMap_ST.zw;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy * Globals._MainTex_ST.xy + Globals._MainTex_ST.zw;
    u_xlat0.xyz = input.POSITION0.yyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * input.POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * input.POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * input.POSITION0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-Globals._WorldSpaceCameraPos.xyzx.xyz);
    output.TEXCOORD1.xyz = half3(u_xlat1.xyz);
    u_xlat1.xyw = (-u_xlat0.xyz) * float3(Globals._WorldSpaceLightPos0.www) + float3(Globals._WorldSpaceLightPos0.xyz);
    output.TEXCOORD5.xyz = u_xlat0.xyz;
    output.TEXCOORD2.w = half(u_xlat1.x);
    output.TEXCOORD2.xyz = half3(0.0, 0.0, 0.0);
    output.TEXCOORD3.w = half(u_xlat1.y);
    output.TEXCOORD3.xyz = half3(0.0, 0.0, 0.0);
    u_xlat0.x = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = rsqrt(u_xlat6);
    u_xlat1.xyz = float3(u_xlat6) * u_xlat0.xyz;
    output.TEXCOORD4 = half4(u_xlat1);
    output.TEXCOORD6.xy = float2(0.0, 0.0);
    return output;
}


-- Hardware tier variant: Tier 2
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0
Set 2D Texture "_LightTexture0" to slot 1 sampler slot 2
Set 2D Texture "_ShadowMapTexture" to slot 2 sampler slot 1

Constant Buffer "Globals" (464 bytes) on slot 0 {
  Matrix4x4 unity_WorldToShadow[4] at 16
  Matrix4x4 unity_MatrixV at 304
  Matrix4x4 unity_WorldToLight at 400
  Vector3 _WorldSpaceCameraPos at 0
  VectorHalf4 _LightShadowData at 272
  Vector4 unity_ShadowFadeCenterAndType at 288
  VectorHalf4 _LightColor0 at 368
  VectorHalf4 _Color at 376
  ScalarHalf _Metallic at 384
  ScalarHalf _Glossiness at 386
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 hlslcc_mtx4x4unity_WorldToShadow[16];
    half4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    half4 _LightColor0;
    half4 _Color;
    half _Metallic;
    half _Glossiness;
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(0) ]];
};

constexpr sampler _mtl_xl_shadow_sampler(address::clamp_to_edge, filter::linear, compare_func::greater_equal);
fragment Mtl_FragmentOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_ShadowMapTexture [[ sampler (1) ]],
    sampler sampler_LightTexture0 [[ sampler (2) ]],
    texture2d<half, access::sample > _MainTex [[ texture (0) ]] ,
    texture2d<half, access::sample > _LightTexture0 [[ texture (1) ]] ,
    depth2d<float, access::sample > _ShadowMapTexture [[ texture (2) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    float3 u_xlat6;
    half u_xlat16_6;
    half3 u_xlat16_9;
    half u_xlat16_20;
    half u_xlat16_21;
    u_xlat0.xyz = input.TEXCOORD5.xyz + (-Globals.unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat6.xyz = (-input.TEXCOORD5.xyz) + Globals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat1.x = Globals.hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = Globals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = Globals.hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat6.x = dot(u_xlat6.xyz, u_xlat1.xyz);
    u_xlat0.x = (-u_xlat6.x) + u_xlat0.x;
    u_xlat0.x = Globals.unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat6.x;
    u_xlat0.x = u_xlat0.x * float(Globals._LightShadowData.z) + float(Globals._LightShadowData.w);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat6.xyz = input.TEXCOORD5.yyy * Globals.hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
    u_xlat6.xyz = Globals.hlslcc_mtx4x4unity_WorldToShadow[0].xyz * input.TEXCOORD5.xxx + u_xlat6.xyz;
    u_xlat6.xyz = Globals.hlslcc_mtx4x4unity_WorldToShadow[2].xyz * input.TEXCOORD5.zzz + u_xlat6.xyz;
    u_xlat6.xyz = u_xlat6.xyz + Globals.hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
    u_xlat16_6 = _ShadowMapTexture.sample_compare(_mtl_xl_shadow_sampler, u_xlat6.xy, saturate(u_xlat6.z), level(0.0));
    u_xlat16_2.x = (-Globals._LightShadowData.x) + half(1.0);
    u_xlat16_2.x = u_xlat16_6 * u_xlat16_2.x + Globals._LightShadowData.x;
    u_xlat16_2.x = half(u_xlat0.x + float(u_xlat16_2.x));
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0h, 1.0h);
    u_xlat0.xy = input.TEXCOORD5.yy * Globals.hlslcc_mtx4x4unity_WorldToLight[1].xy;
    u_xlat0.xy = Globals.hlslcc_mtx4x4unity_WorldToLight[0].xy * input.TEXCOORD5.xx + u_xlat0.xy;
    u_xlat0.xy = Globals.hlslcc_mtx4x4unity_WorldToLight[2].xy * input.TEXCOORD5.zz + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy + Globals.hlslcc_mtx4x4unity_WorldToLight[3].xy;
    u_xlat16_0.x = _LightTexture0.sample(sampler_LightTexture0, u_xlat0.xy).w;
    u_xlat16_0.x = u_xlat16_2.x * u_xlat16_0.x;
    u_xlat16_2.xyz = u_xlat16_0.xxx * Globals._LightColor0.xyz;
    u_xlat16_20 = dot(input.TEXCOORD1.xyz, input.TEXCOORD1.xyz);
    u_xlat16_20 = rsqrt(u_xlat16_20);
    u_xlat16_3.x = input.TEXCOORD2.w;
    u_xlat16_3.y = input.TEXCOORD3.w;
    u_xlat16_3.z = input.TEXCOORD4.w;
    u_xlat16_4.xyz = (-input.TEXCOORD1.xyz) * half3(u_xlat16_20) + u_xlat16_3.xyz;
    u_xlat16_20 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
    u_xlat16_0.x = max(u_xlat16_20, half(0.00100000005));
    u_xlat16_20 = rsqrt(u_xlat16_0.x);
    u_xlat16_4.xyz = half3(u_xlat16_20) * u_xlat16_4.xyz;
    u_xlat16_20 = dot(u_xlat16_3.xyz, u_xlat16_4.xyz);
    u_xlat16_20 = clamp(u_xlat16_20, 0.0h, 1.0h);
    u_xlat16_0.x = max(u_xlat16_20, half(0.319999993));
    u_xlat16_20 = (-Globals._Glossiness) + half(1.0);
    u_xlat16_6 = u_xlat16_20 * u_xlat16_20 + half(1.5);
    u_xlat16_20 = u_xlat16_20 * u_xlat16_20;
    u_xlat16_0.x = u_xlat16_6 * u_xlat16_0.x;
    u_xlat16_21 = dot(input.TEXCOORD4.xyz, input.TEXCOORD4.xyz);
    u_xlat16_21 = rsqrt(u_xlat16_21);
    u_xlat16_5.xyz = half3(u_xlat16_21) * input.TEXCOORD4.xyz;
    u_xlat16_21 = dot(u_xlat16_5.xyz, u_xlat16_4.xyz);
    u_xlat16_21 = clamp(u_xlat16_21, 0.0h, 1.0h);
    u_xlat16_3.x = dot(u_xlat16_5.xyz, u_xlat16_3.xyz);
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0h, 1.0h);
    u_xlat16_9.x = u_xlat16_21 * u_xlat16_21;
    u_xlat16_6 = u_xlat16_20 * u_xlat16_20 + half(-1.0);
    u_xlat16_6 = u_xlat16_9.x * u_xlat16_6 + half(1.00001001);
    u_xlat16_0.x = u_xlat16_6 * u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_20 / u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x + half(-9.99999975e-05);
    u_xlat16_20 = max(u_xlat16_0.x, half(0.0));
    u_xlat16_20 = min(u_xlat16_20, half(100.0));
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_9.xyz = Globals._Color.xyz * u_xlat16_0.xyz + half3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat16_0.xyz = u_xlat16_0.xyz * Globals._Color.xyz;
    u_xlat16_9.xyz = half3(Globals._Metallic) * u_xlat16_9.xyz + half3(0.220916301, 0.220916301, 0.220916301);
    u_xlat16_9.xyz = half3(u_xlat16_20) * u_xlat16_9.xyz;
    u_xlat16_20 = (-Globals._Metallic) * half(0.779083729) + half(0.779083729);
    u_xlat16_9.xyz = u_xlat16_0.xyz * half3(u_xlat16_20) + u_xlat16_9.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_9.xyz;
    output.SV_Target0.xyz = u_xlat16_3.xxx * u_xlat16_2.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}


-- Hardware tier variant: Tier 3
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"
Uses vertex data channel "TexCoord0"

Constant Buffer "Globals" (258 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 32
  Matrix4x4 unity_WorldToObject at 96
  Matrix4x4 unity_MatrixVP at 160
  Vector3 _WorldSpaceCameraPos at 0
  VectorHalf4 _WorldSpaceLightPos0 at 16
  Vector4 _MainTex_ST at 224
  Vector4 _DetailAlbedoMap_ST at 240
  ScalarHalf _UVSec at 256
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    half4 _WorldSpaceLightPos0;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    float4 _DetailAlbedoMap_ST;
    half _UVSec;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    half3 NORMAL0 [[ attribute(1) ]] ;
    float2 TEXCOORD0 [[ attribute(2) ]] ;
    float2 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float2 TEXCOORD6 [[ user(TEXCOORD6) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool u_xlatb0;
    float4 u_xlat1;
    float u_xlat6;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0] * input.POSITION0.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2] * input.POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    output.mtl_Position = Globals.hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlatb0 = Globals._UVSec==half(0.0);
    u_xlat0.xy = (bool(u_xlatb0)) ? input.TEXCOORD0.xy : input.TEXCOORD1.xy;
    output.TEXCOORD0.zw = u_xlat0.xy * Globals._DetailAlbedoMap_ST.xy + Globals._DetailAlbedoMap_ST.zw;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy * Globals._MainTex_ST.xy + Globals._MainTex_ST.zw;
    u_xlat0.xyz = input.POSITION0.yyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * input.POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * input.POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * input.POSITION0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-Globals._WorldSpaceCameraPos.xyzx.xyz);
    output.TEXCOORD1.xyz = half3(u_xlat1.xyz);
    u_xlat1.xyw = (-u_xlat0.xyz) * float3(Globals._WorldSpaceLightPos0.www) + float3(Globals._WorldSpaceLightPos0.xyz);
    output.TEXCOORD5.xyz = u_xlat0.xyz;
    output.TEXCOORD2.w = half(u_xlat1.x);
    output.TEXCOORD2.xyz = half3(0.0, 0.0, 0.0);
    output.TEXCOORD3.w = half(u_xlat1.y);
    output.TEXCOORD3.xyz = half3(0.0, 0.0, 0.0);
    u_xlat0.x = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = rsqrt(u_xlat6);
    u_xlat1.xyz = float3(u_xlat6) * u_xlat0.xyz;
    output.TEXCOORD4 = half4(u_xlat1);
    output.TEXCOORD6.xy = float2(0.0, 0.0);
    return output;
}


-- Hardware tier variant: Tier 3
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0
Set 2D Texture "_LightTexture0" to slot 1 sampler slot 2
Set 2D Texture "_ShadowMapTexture" to slot 2 sampler slot 1

Constant Buffer "Globals" (464 bytes) on slot 0 {
  Matrix4x4 unity_WorldToShadow[4] at 16
  Matrix4x4 unity_MatrixV at 304
  Matrix4x4 unity_WorldToLight at 400
  Vector3 _WorldSpaceCameraPos at 0
  VectorHalf4 _LightShadowData at 272
  Vector4 unity_ShadowFadeCenterAndType at 288
  VectorHalf4 _LightColor0 at 368
  VectorHalf4 _Color at 376
  ScalarHalf _Metallic at 384
  ScalarHalf _Glossiness at 386
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 hlslcc_mtx4x4unity_WorldToShadow[16];
    half4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    half4 _LightColor0;
    half4 _Color;
    half _Metallic;
    half _Glossiness;
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(0) ]];
};

constexpr sampler _mtl_xl_shadow_sampler(address::clamp_to_edge, filter::linear, compare_func::greater_equal);
fragment Mtl_FragmentOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_ShadowMapTexture [[ sampler (1) ]],
    sampler sampler_LightTexture0 [[ sampler (2) ]],
    texture2d<half, access::sample > _MainTex [[ texture (0) ]] ,
    texture2d<half, access::sample > _LightTexture0 [[ texture (1) ]] ,
    depth2d<float, access::sample > _ShadowMapTexture [[ texture (2) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    half3 u_xlat16_0;
    float3 u_xlat1;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    float3 u_xlat6;
    half u_xlat16_6;
    half3 u_xlat16_9;
    half u_xlat16_20;
    half u_xlat16_21;
    u_xlat0.xyz = input.TEXCOORD5.xyz + (-Globals.unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat6.xyz = (-input.TEXCOORD5.xyz) + Globals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat1.x = Globals.hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = Globals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = Globals.hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat6.x = dot(u_xlat6.xyz, u_xlat1.xyz);
    u_xlat0.x = (-u_xlat6.x) + u_xlat0.x;
    u_xlat0.x = Globals.unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat6.x;
    u_xlat0.x = u_xlat0.x * float(Globals._LightShadowData.z) + float(Globals._LightShadowData.w);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat6.xyz = input.TEXCOORD5.yyy * Globals.hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
    u_xlat6.xyz = Globals.hlslcc_mtx4x4unity_WorldToShadow[0].xyz * input.TEXCOORD5.xxx + u_xlat6.xyz;
    u_xlat6.xyz = Globals.hlslcc_mtx4x4unity_WorldToShadow[2].xyz * input.TEXCOORD5.zzz + u_xlat6.xyz;
    u_xlat6.xyz = u_xlat6.xyz + Globals.hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
    u_xlat16_6 = _ShadowMapTexture.sample_compare(_mtl_xl_shadow_sampler, u_xlat6.xy, saturate(u_xlat6.z), level(0.0));
    u_xlat16_2.x = (-Globals._LightShadowData.x) + half(1.0);
    u_xlat16_2.x = u_xlat16_6 * u_xlat16_2.x + Globals._LightShadowData.x;
    u_xlat16_2.x = half(u_xlat0.x + float(u_xlat16_2.x));
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0h, 1.0h);
    u_xlat0.xy = input.TEXCOORD5.yy * Globals.hlslcc_mtx4x4unity_WorldToLight[1].xy;
    u_xlat0.xy = Globals.hlslcc_mtx4x4unity_WorldToLight[0].xy * input.TEXCOORD5.xx + u_xlat0.xy;
    u_xlat0.xy = Globals.hlslcc_mtx4x4unity_WorldToLight[2].xy * input.TEXCOORD5.zz + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy + Globals.hlslcc_mtx4x4unity_WorldToLight[3].xy;
    u_xlat16_0.x = _LightTexture0.sample(sampler_LightTexture0, u_xlat0.xy).w;
    u_xlat16_0.x = u_xlat16_2.x * u_xlat16_0.x;
    u_xlat16_2.xyz = u_xlat16_0.xxx * Globals._LightColor0.xyz;
    u_xlat16_20 = dot(input.TEXCOORD1.xyz, input.TEXCOORD1.xyz);
    u_xlat16_20 = rsqrt(u_xlat16_20);
    u_xlat16_3.x = input.TEXCOORD2.w;
    u_xlat16_3.y = input.TEXCOORD3.w;
    u_xlat16_3.z = input.TEXCOORD4.w;
    u_xlat16_4.xyz = (-input.TEXCOORD1.xyz) * half3(u_xlat16_20) + u_xlat16_3.xyz;
    u_xlat16_20 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
    u_xlat16_0.x = max(u_xlat16_20, half(0.00100000005));
    u_xlat16_20 = rsqrt(u_xlat16_0.x);
    u_xlat16_4.xyz = half3(u_xlat16_20) * u_xlat16_4.xyz;
    u_xlat16_20 = dot(u_xlat16_3.xyz, u_xlat16_4.xyz);
    u_xlat16_20 = clamp(u_xlat16_20, 0.0h, 1.0h);
    u_xlat16_0.x = max(u_xlat16_20, half(0.319999993));
    u_xlat16_20 = (-Globals._Glossiness) + half(1.0);
    u_xlat16_6 = u_xlat16_20 * u_xlat16_20 + half(1.5);
    u_xlat16_20 = u_xlat16_20 * u_xlat16_20;
    u_xlat16_0.x = u_xlat16_6 * u_xlat16_0.x;
    u_xlat16_21 = dot(input.TEXCOORD4.xyz, input.TEXCOORD4.xyz);
    u_xlat16_21 = rsqrt(u_xlat16_21);
    u_xlat16_5.xyz = half3(u_xlat16_21) * input.TEXCOORD4.xyz;
    u_xlat16_21 = dot(u_xlat16_5.xyz, u_xlat16_4.xyz);
    u_xlat16_21 = clamp(u_xlat16_21, 0.0h, 1.0h);
    u_xlat16_3.x = dot(u_xlat16_5.xyz, u_xlat16_3.xyz);
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0h, 1.0h);
    u_xlat16_9.x = u_xlat16_21 * u_xlat16_21;
    u_xlat16_6 = u_xlat16_20 * u_xlat16_20 + half(-1.0);
    u_xlat16_6 = u_xlat16_9.x * u_xlat16_6 + half(1.00001001);
    u_xlat16_0.x = u_xlat16_6 * u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_20 / u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x + half(-9.99999975e-05);
    u_xlat16_20 = max(u_xlat16_0.x, half(0.0));
    u_xlat16_20 = min(u_xlat16_20, half(100.0));
    u_xlat16_0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_9.xyz = Globals._Color.xyz * u_xlat16_0.xyz + half3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat16_0.xyz = u_xlat16_0.xyz * Globals._Color.xyz;
    u_xlat16_9.xyz = half3(Globals._Metallic) * u_xlat16_9.xyz + half3(0.220916301, 0.220916301, 0.220916301);
    u_xlat16_9.xyz = half3(u_xlat16_20) * u_xlat16_9.xyz;
    u_xlat16_20 = (-Globals._Metallic) * half(0.779083729) + half(0.779083729);
    u_xlat16_9.xyz = u_xlat16_0.xyz * half3(u_xlat16_20) + u_xlat16_9.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_9.xyz;
    output.SV_Target0.xyz = u_xlat16_3.xxx * u_xlat16_2.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}


//////////////////////////////////////////////////////
Keywords set in this variant: POINT SHADOWS_CUBE 
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"
Uses vertex data channel "TexCoord0"

Constant Buffer "Globals" (258 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 32
  Matrix4x4 unity_WorldToObject at 96
  Matrix4x4 unity_MatrixVP at 160
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 _MainTex_ST at 224
  Vector4 _DetailAlbedoMap_ST at 240
  ScalarHalf _UVSec at 256
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    float4 _DetailAlbedoMap_ST;
    half _UVSec;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    half3 NORMAL0 [[ attribute(1) ]] ;
    float2 TEXCOORD0 [[ attribute(2) ]] ;
    float2 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float2 TEXCOORD6 [[ user(TEXCOORD6) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool u_xlatb0;
    float4 u_xlat1;
    float u_xlat6;
    float u_xlat7;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0] * input.POSITION0.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2] * input.POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    output.mtl_Position = Globals.hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlatb0 = Globals._UVSec==half(0.0);
    u_xlat0.xy = (bool(u_xlatb0)) ? input.TEXCOORD0.xy : input.TEXCOORD1.xy;
    output.TEXCOORD0.zw = u_xlat0.xy * Globals._DetailAlbedoMap_ST.xy + Globals._DetailAlbedoMap_ST.zw;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy * Globals._MainTex_ST.xy + Globals._MainTex_ST.zw;
    u_xlat0.xyz = input.POSITION0.yyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * input.POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * input.POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * input.POSITION0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-Globals._WorldSpaceCameraPos.xyzx.xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = rsqrt(u_xlat6);
    u_xlat1.xyz = float3(u_xlat6) * u_xlat1.xyz;
    output.TEXCOORD1.xyz = half3(u_xlat1.xyz);
    u_xlat1.xyz = (-u_xlat0.xyz) * Globals._WorldSpaceLightPos0.www + Globals._WorldSpaceLightPos0.xyz;
    output.TEXCOORD5.xyz = u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = rsqrt(u_xlat0.x);
    u_xlat0.xyw = u_xlat0.xxx * u_xlat1.xyz;
    output.TEXCOORD2.w = half(u_xlat0.x);
    output.TEXCOORD2.xyz = half3(0.0, 0.0, 0.0);
    output.TEXCOORD3.w = half(u_xlat0.y);
    output.TEXCOORD3.xyz = half3(0.0, 0.0, 0.0);
    u_xlat1.x = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat7 = rsqrt(u_xlat7);
    u_xlat0.xyz = float3(u_xlat7) * u_xlat1.xyz;
    output.TEXCOORD4 = half4(u_xlat0);
    output.TEXCOORD6.xy = float2(0.0, 0.0);
    return output;
}


-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0 sampler slot 2
Set CUBE Texture "_ShadowMapTexture" to slot 1
Set 2D Texture "_LightTexture0" to slot 2 sampler slot 3
Set 2D Texture "unity_NHxRoughness" to slot 3 sampler slot 0

Constant Buffer "Globals" (112 bytes) on slot 0 {
  Matrix4x4 unity_WorldToLight at 48
  Vector4 _LightPositionRange at 0
  VectorHalf4 _LightShadowData at 16
  VectorHalf4 _LightColor0 at 24
  VectorHalf4 _Color at 32
  ScalarHalf _Metallic at 40
  ScalarHalf _Glossiness at 42
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float4 _LightPositionRange;
    half4 _LightShadowData;
    half4 _LightColor0;
    half4 _Color;
    half _Metallic;
    half _Glossiness;
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(0) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    sampler samplerunity_NHxRoughness [[ sampler (0) ]],
    sampler sampler_ShadowMapTexture [[ sampler (1) ]],
    sampler sampler_MainTex [[ sampler (2) ]],
    sampler sampler_LightTexture0 [[ sampler (3) ]],
    texture2d<half, access::sample > _MainTex [[ texture (0) ]] ,
    texturecube<float, access::sample > _ShadowMapTexture [[ texture (1) ]] ,
    texture2d<half, access::sample > _LightTexture0 [[ texture (2) ]] ,
    texture2d<half, access::sample > unity_NHxRoughness [[ texture (3) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    half3 u_xlat16_2;
    float3 u_xlat3;
    half u_xlat16_3;
    bool u_xlatb3;
    half3 u_xlat16_4;
    float u_xlat7;
    half3 u_xlat16_7;
    half u_xlat16_12;
    float u_xlat15;
    u_xlat16_0.x = dot(input.TEXCOORD4.xyz, input.TEXCOORD4.xyz);
    u_xlat16_0.x = rsqrt(u_xlat16_0.x);
    u_xlat16_0.xyz = u_xlat16_0.xxx * input.TEXCOORD4.xyz;
    u_xlat16_12 = dot((-input.TEXCOORD1.xyz), u_xlat16_0.xyz);
    u_xlat16_12 = u_xlat16_12 + u_xlat16_12;
    u_xlat16_1.xyz = u_xlat16_0.xyz * (-half3(u_xlat16_12)) + (-input.TEXCOORD1.xyz);
    u_xlat16_2.x = input.TEXCOORD2.w;
    u_xlat16_2.y = input.TEXCOORD3.w;
    u_xlat16_2.z = input.TEXCOORD4.w;
    u_xlat16_12 = dot(u_xlat16_1.xyz, u_xlat16_2.xyz);
    u_xlat16_0.x = dot(u_xlat16_0.xyz, u_xlat16_2.xyz);
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0h, 1.0h);
    u_xlat16_4.x = u_xlat16_12 * u_xlat16_12;
    u_xlat16_1.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_1.y = (-Globals._Glossiness) + half(1.0);
    u_xlat16_3 = unity_NHxRoughness.sample(samplerunity_NHxRoughness, float2(u_xlat16_1.xy)).w;
    u_xlat16_3 = u_xlat16_3 * half(16.0);
    u_xlat16_7.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_4.xyz = Globals._Color.xyz * u_xlat16_7.xyz + half3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat16_7.xyz = u_xlat16_7.xyz * Globals._Color.xyz;
    u_xlat16_4.xyz = half3(Globals._Metallic) * u_xlat16_4.xyz + half3(0.220916301, 0.220916301, 0.220916301);
    u_xlat16_4.xyz = u_xlat16_4.xyz * half3(u_xlat16_3);
    u_xlat16_1.x = (-Globals._Metallic) * half(0.779083729) + half(0.779083729);
    u_xlat16_4.xyz = u_xlat16_7.xyz * u_xlat16_1.xxx + u_xlat16_4.xyz;
    u_xlat3.xyz = input.TEXCOORD5.xyz + (-Globals._LightPositionRange.xyz);
    u_xlat15 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat3.x = _ShadowMapTexture.sample(sampler_ShadowMapTexture, u_xlat3.xyz, level(0.0)).x;
    u_xlat7 = sqrt(u_xlat15);
    u_xlat7 = u_xlat7 * Globals._LightPositionRange.w;
    u_xlat7 = u_xlat7 * 0.970000029;
    u_xlatb3 = u_xlat3.x<u_xlat7;
    u_xlat16_1.x = (u_xlatb3) ? Globals._LightShadowData.x : half(1.0);
    u_xlat3.xyz = input.TEXCOORD5.yyy * Globals.hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat3.xyz = Globals.hlslcc_mtx4x4unity_WorldToLight[0].xyz * input.TEXCOORD5.xxx + u_xlat3.xyz;
    u_xlat3.xyz = Globals.hlslcc_mtx4x4unity_WorldToLight[2].xyz * input.TEXCOORD5.zzz + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + Globals.hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat3.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat16_3 = _LightTexture0.sample(sampler_LightTexture0, u_xlat3.xx).w;
    u_xlat16_3 = u_xlat16_1.x * u_xlat16_3;
    u_xlat16_1.xyz = half3(u_xlat16_3) * Globals._LightColor0.xyz;
    u_xlat16_1.xyz = u_xlat16_0.xxx * u_xlat16_1.xyz;
    output.SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_1.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}


-- Hardware tier variant: Tier 2
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"
Uses vertex data channel "TexCoord0"

Constant Buffer "Globals" (258 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 32
  Matrix4x4 unity_WorldToObject at 96
  Matrix4x4 unity_MatrixVP at 160
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 _MainTex_ST at 224
  Vector4 _DetailAlbedoMap_ST at 240
  ScalarHalf _UVSec at 256
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    float4 _DetailAlbedoMap_ST;
    half _UVSec;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    half3 NORMAL0 [[ attribute(1) ]] ;
    float2 TEXCOORD0 [[ attribute(2) ]] ;
    float2 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float2 TEXCOORD6 [[ user(TEXCOORD6) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool u_xlatb0;
    float4 u_xlat1;
    float u_xlat6;
    float u_xlat7;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0] * input.POSITION0.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2] * input.POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    output.mtl_Position = Globals.hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlatb0 = Globals._UVSec==half(0.0);
    u_xlat0.xy = (bool(u_xlatb0)) ? input.TEXCOORD0.xy : input.TEXCOORD1.xy;
    output.TEXCOORD0.zw = u_xlat0.xy * Globals._DetailAlbedoMap_ST.xy + Globals._DetailAlbedoMap_ST.zw;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy * Globals._MainTex_ST.xy + Globals._MainTex_ST.zw;
    u_xlat0.xyz = input.POSITION0.yyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * input.POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * input.POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * input.POSITION0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-Globals._WorldSpaceCameraPos.xyzx.xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = rsqrt(u_xlat6);
    u_xlat1.xyz = float3(u_xlat6) * u_xlat1.xyz;
    output.TEXCOORD1.xyz = half3(u_xlat1.xyz);
    u_xlat1.xyz = (-u_xlat0.xyz) * Globals._WorldSpaceLightPos0.www + Globals._WorldSpaceLightPos0.xyz;
    output.TEXCOORD5.xyz = u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = rsqrt(u_xlat0.x);
    u_xlat0.xyw = u_xlat0.xxx * u_xlat1.xyz;
    output.TEXCOORD2.w = half(u_xlat0.x);
    output.TEXCOORD2.xyz = half3(0.0, 0.0, 0.0);
    output.TEXCOORD3.w = half(u_xlat0.y);
    output.TEXCOORD3.xyz = half3(0.0, 0.0, 0.0);
    u_xlat1.x = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat7 = rsqrt(u_xlat7);
    u_xlat0.xyz = float3(u_xlat7) * u_xlat1.xyz;
    output.TEXCOORD4 = half4(u_xlat0);
    output.TEXCOORD6.xy = float2(0.0, 0.0);
    return output;
}


-- Hardware tier variant: Tier 2
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0 sampler slot 2
Set CUBE Texture "_ShadowMapTexture" to slot 1
Set 2D Texture "_LightTexture0" to slot 2 sampler slot 3
Set 2D Texture "unity_NHxRoughness" to slot 3 sampler slot 0

Constant Buffer "Globals" (112 bytes) on slot 0 {
  Matrix4x4 unity_WorldToLight at 48
  Vector4 _LightPositionRange at 0
  VectorHalf4 _LightShadowData at 16
  VectorHalf4 _LightColor0 at 24
  VectorHalf4 _Color at 32
  ScalarHalf _Metallic at 40
  ScalarHalf _Glossiness at 42
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float4 _LightPositionRange;
    half4 _LightShadowData;
    half4 _LightColor0;
    half4 _Color;
    half _Metallic;
    half _Glossiness;
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(0) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    sampler samplerunity_NHxRoughness [[ sampler (0) ]],
    sampler sampler_ShadowMapTexture [[ sampler (1) ]],
    sampler sampler_MainTex [[ sampler (2) ]],
    sampler sampler_LightTexture0 [[ sampler (3) ]],
    texture2d<half, access::sample > _MainTex [[ texture (0) ]] ,
    texturecube<float, access::sample > _ShadowMapTexture [[ texture (1) ]] ,
    texture2d<half, access::sample > _LightTexture0 [[ texture (2) ]] ,
    texture2d<half, access::sample > unity_NHxRoughness [[ texture (3) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    half3 u_xlat16_2;
    float3 u_xlat3;
    half u_xlat16_3;
    bool u_xlatb3;
    half3 u_xlat16_4;
    float u_xlat7;
    half3 u_xlat16_7;
    half u_xlat16_12;
    float u_xlat15;
    u_xlat16_0.x = dot(input.TEXCOORD4.xyz, input.TEXCOORD4.xyz);
    u_xlat16_0.x = rsqrt(u_xlat16_0.x);
    u_xlat16_0.xyz = u_xlat16_0.xxx * input.TEXCOORD4.xyz;
    u_xlat16_12 = dot((-input.TEXCOORD1.xyz), u_xlat16_0.xyz);
    u_xlat16_12 = u_xlat16_12 + u_xlat16_12;
    u_xlat16_1.xyz = u_xlat16_0.xyz * (-half3(u_xlat16_12)) + (-input.TEXCOORD1.xyz);
    u_xlat16_2.x = input.TEXCOORD2.w;
    u_xlat16_2.y = input.TEXCOORD3.w;
    u_xlat16_2.z = input.TEXCOORD4.w;
    u_xlat16_12 = dot(u_xlat16_1.xyz, u_xlat16_2.xyz);
    u_xlat16_0.x = dot(u_xlat16_0.xyz, u_xlat16_2.xyz);
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0h, 1.0h);
    u_xlat16_4.x = u_xlat16_12 * u_xlat16_12;
    u_xlat16_1.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_1.y = (-Globals._Glossiness) + half(1.0);
    u_xlat16_3 = unity_NHxRoughness.sample(samplerunity_NHxRoughness, float2(u_xlat16_1.xy)).w;
    u_xlat16_3 = u_xlat16_3 * half(16.0);
    u_xlat16_7.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_4.xyz = Globals._Color.xyz * u_xlat16_7.xyz + half3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat16_7.xyz = u_xlat16_7.xyz * Globals._Color.xyz;
    u_xlat16_4.xyz = half3(Globals._Metallic) * u_xlat16_4.xyz + half3(0.220916301, 0.220916301, 0.220916301);
    u_xlat16_4.xyz = u_xlat16_4.xyz * half3(u_xlat16_3);
    u_xlat16_1.x = (-Globals._Metallic) * half(0.779083729) + half(0.779083729);
    u_xlat16_4.xyz = u_xlat16_7.xyz * u_xlat16_1.xxx + u_xlat16_4.xyz;
    u_xlat3.xyz = input.TEXCOORD5.xyz + (-Globals._LightPositionRange.xyz);
    u_xlat15 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat3.x = _ShadowMapTexture.sample(sampler_ShadowMapTexture, u_xlat3.xyz, level(0.0)).x;
    u_xlat7 = sqrt(u_xlat15);
    u_xlat7 = u_xlat7 * Globals._LightPositionRange.w;
    u_xlat7 = u_xlat7 * 0.970000029;
    u_xlatb3 = u_xlat3.x<u_xlat7;
    u_xlat16_1.x = (u_xlatb3) ? Globals._LightShadowData.x : half(1.0);
    u_xlat3.xyz = input.TEXCOORD5.yyy * Globals.hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat3.xyz = Globals.hlslcc_mtx4x4unity_WorldToLight[0].xyz * input.TEXCOORD5.xxx + u_xlat3.xyz;
    u_xlat3.xyz = Globals.hlslcc_mtx4x4unity_WorldToLight[2].xyz * input.TEXCOORD5.zzz + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + Globals.hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat3.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat16_3 = _LightTexture0.sample(sampler_LightTexture0, u_xlat3.xx).w;
    u_xlat16_3 = u_xlat16_1.x * u_xlat16_3;
    u_xlat16_1.xyz = half3(u_xlat16_3) * Globals._LightColor0.xyz;
    u_xlat16_1.xyz = u_xlat16_0.xxx * u_xlat16_1.xyz;
    output.SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_1.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}


-- Hardware tier variant: Tier 3
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"
Uses vertex data channel "TexCoord0"

Constant Buffer "Globals" (258 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 32
  Matrix4x4 unity_WorldToObject at 96
  Matrix4x4 unity_MatrixVP at 160
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 _MainTex_ST at 224
  Vector4 _DetailAlbedoMap_ST at 240
  ScalarHalf _UVSec at 256
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    float4 _DetailAlbedoMap_ST;
    half _UVSec;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    half3 NORMAL0 [[ attribute(1) ]] ;
    float2 TEXCOORD0 [[ attribute(2) ]] ;
    float2 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float2 TEXCOORD6 [[ user(TEXCOORD6) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool u_xlatb0;
    float4 u_xlat1;
    float u_xlat6;
    float u_xlat7;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0] * input.POSITION0.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2] * input.POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    output.mtl_Position = Globals.hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlatb0 = Globals._UVSec==half(0.0);
    u_xlat0.xy = (bool(u_xlatb0)) ? input.TEXCOORD0.xy : input.TEXCOORD1.xy;
    output.TEXCOORD0.zw = u_xlat0.xy * Globals._DetailAlbedoMap_ST.xy + Globals._DetailAlbedoMap_ST.zw;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy * Globals._MainTex_ST.xy + Globals._MainTex_ST.zw;
    u_xlat0.xyz = input.POSITION0.yyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * input.POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * input.POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * input.POSITION0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-Globals._WorldSpaceCameraPos.xyzx.xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = rsqrt(u_xlat6);
    u_xlat1.xyz = float3(u_xlat6) * u_xlat1.xyz;
    output.TEXCOORD1.xyz = half3(u_xlat1.xyz);
    u_xlat1.xyz = (-u_xlat0.xyz) * Globals._WorldSpaceLightPos0.www + Globals._WorldSpaceLightPos0.xyz;
    output.TEXCOORD5.xyz = u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = rsqrt(u_xlat0.x);
    u_xlat0.xyw = u_xlat0.xxx * u_xlat1.xyz;
    output.TEXCOORD2.w = half(u_xlat0.x);
    output.TEXCOORD2.xyz = half3(0.0, 0.0, 0.0);
    output.TEXCOORD3.w = half(u_xlat0.y);
    output.TEXCOORD3.xyz = half3(0.0, 0.0, 0.0);
    u_xlat1.x = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat7 = rsqrt(u_xlat7);
    u_xlat0.xyz = float3(u_xlat7) * u_xlat1.xyz;
    output.TEXCOORD4 = half4(u_xlat0);
    output.TEXCOORD6.xy = float2(0.0, 0.0);
    return output;
}


-- Hardware tier variant: Tier 3
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0 sampler slot 2
Set CUBE Texture "_ShadowMapTexture" to slot 1
Set 2D Texture "_LightTexture0" to slot 2 sampler slot 3
Set 2D Texture "unity_NHxRoughness" to slot 3 sampler slot 0

Constant Buffer "Globals" (112 bytes) on slot 0 {
  Matrix4x4 unity_WorldToLight at 48
  Vector4 _LightPositionRange at 0
  VectorHalf4 _LightShadowData at 16
  VectorHalf4 _LightColor0 at 24
  VectorHalf4 _Color at 32
  ScalarHalf _Metallic at 40
  ScalarHalf _Glossiness at 42
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float4 _LightPositionRange;
    half4 _LightShadowData;
    half4 _LightColor0;
    half4 _Color;
    half _Metallic;
    half _Glossiness;
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(0) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    sampler samplerunity_NHxRoughness [[ sampler (0) ]],
    sampler sampler_ShadowMapTexture [[ sampler (1) ]],
    sampler sampler_MainTex [[ sampler (2) ]],
    sampler sampler_LightTexture0 [[ sampler (3) ]],
    texture2d<half, access::sample > _MainTex [[ texture (0) ]] ,
    texturecube<float, access::sample > _ShadowMapTexture [[ texture (1) ]] ,
    texture2d<half, access::sample > _LightTexture0 [[ texture (2) ]] ,
    texture2d<half, access::sample > unity_NHxRoughness [[ texture (3) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    half3 u_xlat16_2;
    float3 u_xlat3;
    half u_xlat16_3;
    bool u_xlatb3;
    half3 u_xlat16_4;
    float u_xlat7;
    half3 u_xlat16_7;
    half u_xlat16_12;
    float u_xlat15;
    u_xlat16_0.x = dot(input.TEXCOORD4.xyz, input.TEXCOORD4.xyz);
    u_xlat16_0.x = rsqrt(u_xlat16_0.x);
    u_xlat16_0.xyz = u_xlat16_0.xxx * input.TEXCOORD4.xyz;
    u_xlat16_12 = dot((-input.TEXCOORD1.xyz), u_xlat16_0.xyz);
    u_xlat16_12 = u_xlat16_12 + u_xlat16_12;
    u_xlat16_1.xyz = u_xlat16_0.xyz * (-half3(u_xlat16_12)) + (-input.TEXCOORD1.xyz);
    u_xlat16_2.x = input.TEXCOORD2.w;
    u_xlat16_2.y = input.TEXCOORD3.w;
    u_xlat16_2.z = input.TEXCOORD4.w;
    u_xlat16_12 = dot(u_xlat16_1.xyz, u_xlat16_2.xyz);
    u_xlat16_0.x = dot(u_xlat16_0.xyz, u_xlat16_2.xyz);
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0h, 1.0h);
    u_xlat16_4.x = u_xlat16_12 * u_xlat16_12;
    u_xlat16_1.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_1.y = (-Globals._Glossiness) + half(1.0);
    u_xlat16_3 = unity_NHxRoughness.sample(samplerunity_NHxRoughness, float2(u_xlat16_1.xy)).w;
    u_xlat16_3 = u_xlat16_3 * half(16.0);
    u_xlat16_7.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_4.xyz = Globals._Color.xyz * u_xlat16_7.xyz + half3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat16_7.xyz = u_xlat16_7.xyz * Globals._Color.xyz;
    u_xlat16_4.xyz = half3(Globals._Metallic) * u_xlat16_4.xyz + half3(0.220916301, 0.220916301, 0.220916301);
    u_xlat16_4.xyz = u_xlat16_4.xyz * half3(u_xlat16_3);
    u_xlat16_1.x = (-Globals._Metallic) * half(0.779083729) + half(0.779083729);
    u_xlat16_4.xyz = u_xlat16_7.xyz * u_xlat16_1.xxx + u_xlat16_4.xyz;
    u_xlat3.xyz = input.TEXCOORD5.xyz + (-Globals._LightPositionRange.xyz);
    u_xlat15 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat3.x = _ShadowMapTexture.sample(sampler_ShadowMapTexture, u_xlat3.xyz, level(0.0)).x;
    u_xlat7 = sqrt(u_xlat15);
    u_xlat7 = u_xlat7 * Globals._LightPositionRange.w;
    u_xlat7 = u_xlat7 * 0.970000029;
    u_xlatb3 = u_xlat3.x<u_xlat7;
    u_xlat16_1.x = (u_xlatb3) ? Globals._LightShadowData.x : half(1.0);
    u_xlat3.xyz = input.TEXCOORD5.yyy * Globals.hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat3.xyz = Globals.hlslcc_mtx4x4unity_WorldToLight[0].xyz * input.TEXCOORD5.xxx + u_xlat3.xyz;
    u_xlat3.xyz = Globals.hlslcc_mtx4x4unity_WorldToLight[2].xyz * input.TEXCOORD5.zzz + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + Globals.hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat3.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat16_3 = _LightTexture0.sample(sampler_LightTexture0, u_xlat3.xx).w;
    u_xlat16_3 = u_xlat16_1.x * u_xlat16_3;
    u_xlat16_1.xyz = half3(u_xlat16_3) * Globals._LightColor0.xyz;
    u_xlat16_1.xyz = u_xlat16_0.xxx * u_xlat16_1.xyz;
    output.SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_1.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}


//////////////////////////////////////////////////////
Keywords set in this variant: POINT_COOKIE SHADOWS_CUBE 
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"
Uses vertex data channel "TexCoord0"

Constant Buffer "Globals" (258 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 32
  Matrix4x4 unity_WorldToObject at 96
  Matrix4x4 unity_MatrixVP at 160
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 _MainTex_ST at 224
  Vector4 _DetailAlbedoMap_ST at 240
  ScalarHalf _UVSec at 256
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    float4 _DetailAlbedoMap_ST;
    half _UVSec;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    half3 NORMAL0 [[ attribute(1) ]] ;
    float2 TEXCOORD0 [[ attribute(2) ]] ;
    float2 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float2 TEXCOORD6 [[ user(TEXCOORD6) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool u_xlatb0;
    float4 u_xlat1;
    float u_xlat6;
    float u_xlat7;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0] * input.POSITION0.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2] * input.POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    output.mtl_Position = Globals.hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlatb0 = Globals._UVSec==half(0.0);
    u_xlat0.xy = (bool(u_xlatb0)) ? input.TEXCOORD0.xy : input.TEXCOORD1.xy;
    output.TEXCOORD0.zw = u_xlat0.xy * Globals._DetailAlbedoMap_ST.xy + Globals._DetailAlbedoMap_ST.zw;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy * Globals._MainTex_ST.xy + Globals._MainTex_ST.zw;
    u_xlat0.xyz = input.POSITION0.yyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * input.POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * input.POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * input.POSITION0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-Globals._WorldSpaceCameraPos.xyzx.xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = rsqrt(u_xlat6);
    u_xlat1.xyz = float3(u_xlat6) * u_xlat1.xyz;
    output.TEXCOORD1.xyz = half3(u_xlat1.xyz);
    u_xlat1.xyz = (-u_xlat0.xyz) * Globals._WorldSpaceLightPos0.www + Globals._WorldSpaceLightPos0.xyz;
    output.TEXCOORD5.xyz = u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = rsqrt(u_xlat0.x);
    u_xlat0.xyw = u_xlat0.xxx * u_xlat1.xyz;
    output.TEXCOORD2.w = half(u_xlat0.x);
    output.TEXCOORD2.xyz = half3(0.0, 0.0, 0.0);
    output.TEXCOORD3.w = half(u_xlat0.y);
    output.TEXCOORD3.xyz = half3(0.0, 0.0, 0.0);
    u_xlat1.x = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat7 = rsqrt(u_xlat7);
    u_xlat0.xyz = float3(u_xlat7) * u_xlat1.xyz;
    output.TEXCOORD4 = half4(u_xlat0);
    output.TEXCOORD6.xy = float2(0.0, 0.0);
    return output;
}


-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0 sampler slot 2
Set CUBE Texture "_ShadowMapTexture" to slot 1
Set 2D Texture "_LightTextureB0" to slot 2 sampler slot 4
Set CUBE Texture "_LightTexture0" to slot 3
Set 2D Texture "unity_NHxRoughness" to slot 4 sampler slot 0

Constant Buffer "Globals" (112 bytes) on slot 0 {
  Matrix4x4 unity_WorldToLight at 48
  Vector4 _LightPositionRange at 0
  VectorHalf4 _LightShadowData at 16
  VectorHalf4 _LightColor0 at 24
  VectorHalf4 _Color at 32
  ScalarHalf _Metallic at 40
  ScalarHalf _Glossiness at 42
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float4 _LightPositionRange;
    half4 _LightShadowData;
    half4 _LightColor0;
    half4 _Color;
    half _Metallic;
    half _Glossiness;
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(0) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    sampler samplerunity_NHxRoughness [[ sampler (0) ]],
    sampler sampler_ShadowMapTexture [[ sampler (1) ]],
    sampler sampler_MainTex [[ sampler (2) ]],
    sampler sampler_LightTexture0 [[ sampler (3) ]],
    sampler sampler_LightTextureB0 [[ sampler (4) ]],
    texture2d<half, access::sample > _MainTex [[ texture (0) ]] ,
    texturecube<float, access::sample > _ShadowMapTexture [[ texture (1) ]] ,
    texture2d<half, access::sample > _LightTextureB0 [[ texture (2) ]] ,
    texturecube<half, access::sample > _LightTexture0 [[ texture (3) ]] ,
    texture2d<half, access::sample > unity_NHxRoughness [[ texture (4) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    half3 u_xlat16_2;
    float3 u_xlat3;
    half u_xlat16_3;
    bool u_xlatb3;
    half3 u_xlat16_4;
    float u_xlat7;
    half3 u_xlat16_7;
    half u_xlat16_12;
    float u_xlat15;
    u_xlat16_0.x = dot(input.TEXCOORD4.xyz, input.TEXCOORD4.xyz);
    u_xlat16_0.x = rsqrt(u_xlat16_0.x);
    u_xlat16_0.xyz = u_xlat16_0.xxx * input.TEXCOORD4.xyz;
    u_xlat16_12 = dot((-input.TEXCOORD1.xyz), u_xlat16_0.xyz);
    u_xlat16_12 = u_xlat16_12 + u_xlat16_12;
    u_xlat16_1.xyz = u_xlat16_0.xyz * (-half3(u_xlat16_12)) + (-input.TEXCOORD1.xyz);
    u_xlat16_2.x = input.TEXCOORD2.w;
    u_xlat16_2.y = input.TEXCOORD3.w;
    u_xlat16_2.z = input.TEXCOORD4.w;
    u_xlat16_12 = dot(u_xlat16_1.xyz, u_xlat16_2.xyz);
    u_xlat16_0.x = dot(u_xlat16_0.xyz, u_xlat16_2.xyz);
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0h, 1.0h);
    u_xlat16_4.x = u_xlat16_12 * u_xlat16_12;
    u_xlat16_1.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_1.y = (-Globals._Glossiness) + half(1.0);
    u_xlat16_3 = unity_NHxRoughness.sample(samplerunity_NHxRoughness, float2(u_xlat16_1.xy)).w;
    u_xlat16_3 = u_xlat16_3 * half(16.0);
    u_xlat16_7.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_4.xyz = Globals._Color.xyz * u_xlat16_7.xyz + half3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat16_7.xyz = u_xlat16_7.xyz * Globals._Color.xyz;
    u_xlat16_4.xyz = half3(Globals._Metallic) * u_xlat16_4.xyz + half3(0.220916301, 0.220916301, 0.220916301);
    u_xlat16_4.xyz = u_xlat16_4.xyz * half3(u_xlat16_3);
    u_xlat16_1.x = (-Globals._Metallic) * half(0.779083729) + half(0.779083729);
    u_xlat16_4.xyz = u_xlat16_7.xyz * u_xlat16_1.xxx + u_xlat16_4.xyz;
    u_xlat3.xyz = input.TEXCOORD5.xyz + (-Globals._LightPositionRange.xyz);
    u_xlat15 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat3.x = _ShadowMapTexture.sample(sampler_ShadowMapTexture, u_xlat3.xyz, level(0.0)).x;
    u_xlat7 = sqrt(u_xlat15);
    u_xlat7 = u_xlat7 * Globals._LightPositionRange.w;
    u_xlat7 = u_xlat7 * 0.970000029;
    u_xlatb3 = u_xlat3.x<u_xlat7;
    u_xlat16_1.x = (u_xlatb3) ? Globals._LightShadowData.x : half(1.0);
    u_xlat3.xyz = input.TEXCOORD5.yyy * Globals.hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat3.xyz = Globals.hlslcc_mtx4x4unity_WorldToLight[0].xyz * input.TEXCOORD5.xxx + u_xlat3.xyz;
    u_xlat3.xyz = Globals.hlslcc_mtx4x4unity_WorldToLight[2].xyz * input.TEXCOORD5.zzz + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + Globals.hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat15 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat16_3 = _LightTexture0.sample(sampler_LightTexture0, u_xlat3.xyz).w;
    u_xlat16_7.x = _LightTextureB0.sample(sampler_LightTextureB0, float2(u_xlat15)).w;
    u_xlat16_3 = u_xlat16_3 * u_xlat16_7.x;
    u_xlat16_3 = u_xlat16_1.x * u_xlat16_3;
    u_xlat16_1.xyz = half3(u_xlat16_3) * Globals._LightColor0.xyz;
    u_xlat16_1.xyz = u_xlat16_0.xxx * u_xlat16_1.xyz;
    output.SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_1.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}


-- Hardware tier variant: Tier 2
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"
Uses vertex data channel "TexCoord0"

Constant Buffer "Globals" (258 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 32
  Matrix4x4 unity_WorldToObject at 96
  Matrix4x4 unity_MatrixVP at 160
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 _MainTex_ST at 224
  Vector4 _DetailAlbedoMap_ST at 240
  ScalarHalf _UVSec at 256
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    float4 _DetailAlbedoMap_ST;
    half _UVSec;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    half3 NORMAL0 [[ attribute(1) ]] ;
    float2 TEXCOORD0 [[ attribute(2) ]] ;
    float2 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float2 TEXCOORD6 [[ user(TEXCOORD6) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool u_xlatb0;
    float4 u_xlat1;
    float u_xlat6;
    float u_xlat7;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0] * input.POSITION0.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2] * input.POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    output.mtl_Position = Globals.hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlatb0 = Globals._UVSec==half(0.0);
    u_xlat0.xy = (bool(u_xlatb0)) ? input.TEXCOORD0.xy : input.TEXCOORD1.xy;
    output.TEXCOORD0.zw = u_xlat0.xy * Globals._DetailAlbedoMap_ST.xy + Globals._DetailAlbedoMap_ST.zw;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy * Globals._MainTex_ST.xy + Globals._MainTex_ST.zw;
    u_xlat0.xyz = input.POSITION0.yyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * input.POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * input.POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * input.POSITION0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-Globals._WorldSpaceCameraPos.xyzx.xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = rsqrt(u_xlat6);
    u_xlat1.xyz = float3(u_xlat6) * u_xlat1.xyz;
    output.TEXCOORD1.xyz = half3(u_xlat1.xyz);
    u_xlat1.xyz = (-u_xlat0.xyz) * Globals._WorldSpaceLightPos0.www + Globals._WorldSpaceLightPos0.xyz;
    output.TEXCOORD5.xyz = u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = rsqrt(u_xlat0.x);
    u_xlat0.xyw = u_xlat0.xxx * u_xlat1.xyz;
    output.TEXCOORD2.w = half(u_xlat0.x);
    output.TEXCOORD2.xyz = half3(0.0, 0.0, 0.0);
    output.TEXCOORD3.w = half(u_xlat0.y);
    output.TEXCOORD3.xyz = half3(0.0, 0.0, 0.0);
    u_xlat1.x = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat7 = rsqrt(u_xlat7);
    u_xlat0.xyz = float3(u_xlat7) * u_xlat1.xyz;
    output.TEXCOORD4 = half4(u_xlat0);
    output.TEXCOORD6.xy = float2(0.0, 0.0);
    return output;
}


-- Hardware tier variant: Tier 2
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0 sampler slot 2
Set CUBE Texture "_ShadowMapTexture" to slot 1
Set 2D Texture "_LightTextureB0" to slot 2 sampler slot 4
Set CUBE Texture "_LightTexture0" to slot 3
Set 2D Texture "unity_NHxRoughness" to slot 4 sampler slot 0

Constant Buffer "Globals" (112 bytes) on slot 0 {
  Matrix4x4 unity_WorldToLight at 48
  Vector4 _LightPositionRange at 0
  VectorHalf4 _LightShadowData at 16
  VectorHalf4 _LightColor0 at 24
  VectorHalf4 _Color at 32
  ScalarHalf _Metallic at 40
  ScalarHalf _Glossiness at 42
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float4 _LightPositionRange;
    half4 _LightShadowData;
    half4 _LightColor0;
    half4 _Color;
    half _Metallic;
    half _Glossiness;
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(0) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    sampler samplerunity_NHxRoughness [[ sampler (0) ]],
    sampler sampler_ShadowMapTexture [[ sampler (1) ]],
    sampler sampler_MainTex [[ sampler (2) ]],
    sampler sampler_LightTexture0 [[ sampler (3) ]],
    sampler sampler_LightTextureB0 [[ sampler (4) ]],
    texture2d<half, access::sample > _MainTex [[ texture (0) ]] ,
    texturecube<float, access::sample > _ShadowMapTexture [[ texture (1) ]] ,
    texture2d<half, access::sample > _LightTextureB0 [[ texture (2) ]] ,
    texturecube<half, access::sample > _LightTexture0 [[ texture (3) ]] ,
    texture2d<half, access::sample > unity_NHxRoughness [[ texture (4) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    half3 u_xlat16_2;
    float3 u_xlat3;
    half u_xlat16_3;
    bool u_xlatb3;
    half3 u_xlat16_4;
    float u_xlat7;
    half3 u_xlat16_7;
    half u_xlat16_12;
    float u_xlat15;
    u_xlat16_0.x = dot(input.TEXCOORD4.xyz, input.TEXCOORD4.xyz);
    u_xlat16_0.x = rsqrt(u_xlat16_0.x);
    u_xlat16_0.xyz = u_xlat16_0.xxx * input.TEXCOORD4.xyz;
    u_xlat16_12 = dot((-input.TEXCOORD1.xyz), u_xlat16_0.xyz);
    u_xlat16_12 = u_xlat16_12 + u_xlat16_12;
    u_xlat16_1.xyz = u_xlat16_0.xyz * (-half3(u_xlat16_12)) + (-input.TEXCOORD1.xyz);
    u_xlat16_2.x = input.TEXCOORD2.w;
    u_xlat16_2.y = input.TEXCOORD3.w;
    u_xlat16_2.z = input.TEXCOORD4.w;
    u_xlat16_12 = dot(u_xlat16_1.xyz, u_xlat16_2.xyz);
    u_xlat16_0.x = dot(u_xlat16_0.xyz, u_xlat16_2.xyz);
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0h, 1.0h);
    u_xlat16_4.x = u_xlat16_12 * u_xlat16_12;
    u_xlat16_1.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_1.y = (-Globals._Glossiness) + half(1.0);
    u_xlat16_3 = unity_NHxRoughness.sample(samplerunity_NHxRoughness, float2(u_xlat16_1.xy)).w;
    u_xlat16_3 = u_xlat16_3 * half(16.0);
    u_xlat16_7.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_4.xyz = Globals._Color.xyz * u_xlat16_7.xyz + half3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat16_7.xyz = u_xlat16_7.xyz * Globals._Color.xyz;
    u_xlat16_4.xyz = half3(Globals._Metallic) * u_xlat16_4.xyz + half3(0.220916301, 0.220916301, 0.220916301);
    u_xlat16_4.xyz = u_xlat16_4.xyz * half3(u_xlat16_3);
    u_xlat16_1.x = (-Globals._Metallic) * half(0.779083729) + half(0.779083729);
    u_xlat16_4.xyz = u_xlat16_7.xyz * u_xlat16_1.xxx + u_xlat16_4.xyz;
    u_xlat3.xyz = input.TEXCOORD5.xyz + (-Globals._LightPositionRange.xyz);
    u_xlat15 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat3.x = _ShadowMapTexture.sample(sampler_ShadowMapTexture, u_xlat3.xyz, level(0.0)).x;
    u_xlat7 = sqrt(u_xlat15);
    u_xlat7 = u_xlat7 * Globals._LightPositionRange.w;
    u_xlat7 = u_xlat7 * 0.970000029;
    u_xlatb3 = u_xlat3.x<u_xlat7;
    u_xlat16_1.x = (u_xlatb3) ? Globals._LightShadowData.x : half(1.0);
    u_xlat3.xyz = input.TEXCOORD5.yyy * Globals.hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat3.xyz = Globals.hlslcc_mtx4x4unity_WorldToLight[0].xyz * input.TEXCOORD5.xxx + u_xlat3.xyz;
    u_xlat3.xyz = Globals.hlslcc_mtx4x4unity_WorldToLight[2].xyz * input.TEXCOORD5.zzz + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + Globals.hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat15 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat16_3 = _LightTexture0.sample(sampler_LightTexture0, u_xlat3.xyz).w;
    u_xlat16_7.x = _LightTextureB0.sample(sampler_LightTextureB0, float2(u_xlat15)).w;
    u_xlat16_3 = u_xlat16_3 * u_xlat16_7.x;
    u_xlat16_3 = u_xlat16_1.x * u_xlat16_3;
    u_xlat16_1.xyz = half3(u_xlat16_3) * Globals._LightColor0.xyz;
    u_xlat16_1.xyz = u_xlat16_0.xxx * u_xlat16_1.xyz;
    output.SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_1.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}


-- Hardware tier variant: Tier 3
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"
Uses vertex data channel "TexCoord0"

Constant Buffer "Globals" (258 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 32
  Matrix4x4 unity_WorldToObject at 96
  Matrix4x4 unity_MatrixVP at 160
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 _MainTex_ST at 224
  Vector4 _DetailAlbedoMap_ST at 240
  ScalarHalf _UVSec at 256
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
    float4 _DetailAlbedoMap_ST;
    half _UVSec;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    half3 NORMAL0 [[ attribute(1) ]] ;
    float2 TEXCOORD0 [[ attribute(2) ]] ;
    float2 TEXCOORD1 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float2 TEXCOORD6 [[ user(TEXCOORD6) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool u_xlatb0;
    float4 u_xlat1;
    float u_xlat6;
    float u_xlat7;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0] * input.POSITION0.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2] * input.POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    output.mtl_Position = Globals.hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlatb0 = Globals._UVSec==half(0.0);
    u_xlat0.xy = (bool(u_xlatb0)) ? input.TEXCOORD0.xy : input.TEXCOORD1.xy;
    output.TEXCOORD0.zw = u_xlat0.xy * Globals._DetailAlbedoMap_ST.xy + Globals._DetailAlbedoMap_ST.zw;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy * Globals._MainTex_ST.xy + Globals._MainTex_ST.zw;
    u_xlat0.xyz = input.POSITION0.yyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * input.POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * input.POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * input.POSITION0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-Globals._WorldSpaceCameraPos.xyzx.xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = rsqrt(u_xlat6);
    u_xlat1.xyz = float3(u_xlat6) * u_xlat1.xyz;
    output.TEXCOORD1.xyz = half3(u_xlat1.xyz);
    u_xlat1.xyz = (-u_xlat0.xyz) * Globals._WorldSpaceLightPos0.www + Globals._WorldSpaceLightPos0.xyz;
    output.TEXCOORD5.xyz = u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = rsqrt(u_xlat0.x);
    u_xlat0.xyw = u_xlat0.xxx * u_xlat1.xyz;
    output.TEXCOORD2.w = half(u_xlat0.x);
    output.TEXCOORD2.xyz = half3(0.0, 0.0, 0.0);
    output.TEXCOORD3.w = half(u_xlat0.y);
    output.TEXCOORD3.xyz = half3(0.0, 0.0, 0.0);
    u_xlat1.x = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(float3(input.NORMAL0.xyz), Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat7 = rsqrt(u_xlat7);
    u_xlat0.xyz = float3(u_xlat7) * u_xlat1.xyz;
    output.TEXCOORD4 = half4(u_xlat0);
    output.TEXCOORD6.xy = float2(0.0, 0.0);
    return output;
}


-- Hardware tier variant: Tier 3
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0 sampler slot 2
Set CUBE Texture "_ShadowMapTexture" to slot 1
Set 2D Texture "_LightTextureB0" to slot 2 sampler slot 4
Set CUBE Texture "_LightTexture0" to slot 3
Set 2D Texture "unity_NHxRoughness" to slot 4 sampler slot 0

Constant Buffer "Globals" (112 bytes) on slot 0 {
  Matrix4x4 unity_WorldToLight at 48
  Vector4 _LightPositionRange at 0
  VectorHalf4 _LightShadowData at 16
  VectorHalf4 _LightColor0 at 24
  VectorHalf4 _Color at 32
  ScalarHalf _Metallic at 40
  ScalarHalf _Glossiness at 42
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float4 _LightPositionRange;
    half4 _LightShadowData;
    half4 _LightColor0;
    half4 _Color;
    half _Metallic;
    half _Glossiness;
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    half4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(0) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    sampler samplerunity_NHxRoughness [[ sampler (0) ]],
    sampler sampler_ShadowMapTexture [[ sampler (1) ]],
    sampler sampler_MainTex [[ sampler (2) ]],
    sampler sampler_LightTexture0 [[ sampler (3) ]],
    sampler sampler_LightTextureB0 [[ sampler (4) ]],
    texture2d<half, access::sample > _MainTex [[ texture (0) ]] ,
    texturecube<float, access::sample > _ShadowMapTexture [[ texture (1) ]] ,
    texture2d<half, access::sample > _LightTextureB0 [[ texture (2) ]] ,
    texturecube<half, access::sample > _LightTexture0 [[ texture (3) ]] ,
    texture2d<half, access::sample > unity_NHxRoughness [[ texture (4) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half3 u_xlat16_0;
    half3 u_xlat16_1;
    half3 u_xlat16_2;
    float3 u_xlat3;
    half u_xlat16_3;
    bool u_xlatb3;
    half3 u_xlat16_4;
    float u_xlat7;
    half3 u_xlat16_7;
    half u_xlat16_12;
    float u_xlat15;
    u_xlat16_0.x = dot(input.TEXCOORD4.xyz, input.TEXCOORD4.xyz);
    u_xlat16_0.x = rsqrt(u_xlat16_0.x);
    u_xlat16_0.xyz = u_xlat16_0.xxx * input.TEXCOORD4.xyz;
    u_xlat16_12 = dot((-input.TEXCOORD1.xyz), u_xlat16_0.xyz);
    u_xlat16_12 = u_xlat16_12 + u_xlat16_12;
    u_xlat16_1.xyz = u_xlat16_0.xyz * (-half3(u_xlat16_12)) + (-input.TEXCOORD1.xyz);
    u_xlat16_2.x = input.TEXCOORD2.w;
    u_xlat16_2.y = input.TEXCOORD3.w;
    u_xlat16_2.z = input.TEXCOORD4.w;
    u_xlat16_12 = dot(u_xlat16_1.xyz, u_xlat16_2.xyz);
    u_xlat16_0.x = dot(u_xlat16_0.xyz, u_xlat16_2.xyz);
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0h, 1.0h);
    u_xlat16_4.x = u_xlat16_12 * u_xlat16_12;
    u_xlat16_1.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_1.y = (-Globals._Glossiness) + half(1.0);
    u_xlat16_3 = unity_NHxRoughness.sample(samplerunity_NHxRoughness, float2(u_xlat16_1.xy)).w;
    u_xlat16_3 = u_xlat16_3 * half(16.0);
    u_xlat16_7.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat16_4.xyz = Globals._Color.xyz * u_xlat16_7.xyz + half3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat16_7.xyz = u_xlat16_7.xyz * Globals._Color.xyz;
    u_xlat16_4.xyz = half3(Globals._Metallic) * u_xlat16_4.xyz + half3(0.220916301, 0.220916301, 0.220916301);
    u_xlat16_4.xyz = u_xlat16_4.xyz * half3(u_xlat16_3);
    u_xlat16_1.x = (-Globals._Metallic) * half(0.779083729) + half(0.779083729);
    u_xlat16_4.xyz = u_xlat16_7.xyz * u_xlat16_1.xxx + u_xlat16_4.xyz;
    u_xlat3.xyz = input.TEXCOORD5.xyz + (-Globals._LightPositionRange.xyz);
    u_xlat15 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat3.x = _ShadowMapTexture.sample(sampler_ShadowMapTexture, u_xlat3.xyz, level(0.0)).x;
    u_xlat7 = sqrt(u_xlat15);
    u_xlat7 = u_xlat7 * Globals._LightPositionRange.w;
    u_xlat7 = u_xlat7 * 0.970000029;
    u_xlatb3 = u_xlat3.x<u_xlat7;
    u_xlat16_1.x = (u_xlatb3) ? Globals._LightShadowData.x : half(1.0);
    u_xlat3.xyz = input.TEXCOORD5.yyy * Globals.hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat3.xyz = Globals.hlslcc_mtx4x4unity_WorldToLight[0].xyz * input.TEXCOORD5.xxx + u_xlat3.xyz;
    u_xlat3.xyz = Globals.hlslcc_mtx4x4unity_WorldToLight[2].xyz * input.TEXCOORD5.zzz + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + Globals.hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat15 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat16_3 = _LightTexture0.sample(sampler_LightTexture0, u_xlat3.xyz).w;
    u_xlat16_7.x = _LightTextureB0.sample(sampler_LightTextureB0, float2(u_xlat15)).w;
    u_xlat16_3 = u_xlat16_3 * u_xlat16_7.x;
    u_xlat16_3 = u_xlat16_1.x * u_xlat16_3;
    u_xlat16_1.xyz = half3(u_xlat16_3) * Globals._LightColor0.xyz;
    u_xlat16_1.xyz = u_xlat16_0.xxx * u_xlat16_1.xyz;
    output.SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_1.xyz;
    output.SV_Target0.w = half(1.0);
    return output;
}


 }
 Pass {
  Name "SHADOWCASTER"
  Tags { "LIGHTMODE"="SHADOWCASTER" "SHADOWSUPPORT"="true" "RenderType"="Opaque" "PerformanceChecks"="False" }
  //////////////////////////////////
  //                              //
  //      Compiled programs       //
  //                              //
  //////////////////////////////////
//////////////////////////////////////////////////////
Keywords set in this variant: SHADOWS_DEPTH 
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"

Constant Buffer "Globals" (224 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 32
  Matrix4x4 unity_WorldToObject at 96
  Matrix4x4 unity_MatrixVP at 160
  Vector4 _WorldSpaceLightPos0 at 0
  Vector4 unity_LightShadowBias at 16
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float4 _WorldSpaceLightPos0;
    float4 unity_LightShadowBias;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    float u_xlat6;
    float u_xlat9;
    bool u_xlatb9;
    u_xlat0.x = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = rsqrt(u_xlat9);
    u_xlat0.xyz = float3(u_xlat9) * u_xlat0.xyz;
    u_xlat1 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0] * input.POSITION0.xxxx + u_xlat1;
    u_xlat1 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2] * input.POSITION0.zzzz + u_xlat1;
    u_xlat1 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[3] * input.POSITION0.wwww + u_xlat1;
    u_xlat2.xyz = (-u_xlat1.xyz) * Globals._WorldSpaceLightPos0.www + Globals._WorldSpaceLightPos0.xyz;
    u_xlat9 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat9 = rsqrt(u_xlat9);
    u_xlat2.xyz = float3(u_xlat9) * u_xlat2.xyz;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat2.xyz);
    u_xlat9 = (-u_xlat9) * u_xlat9 + 1.0;
    u_xlat9 = sqrt(u_xlat9);
    u_xlat9 = u_xlat9 * Globals.unity_LightShadowBias.z;
    u_xlat0.xyz = (-u_xlat0.xyz) * float3(u_xlat9) + u_xlat1.xyz;
    u_xlatb9 = Globals.unity_LightShadowBias.z!=0.0;
    u_xlat0.xyz = (bool(u_xlatb9)) ? u_xlat0.xyz : u_xlat1.xyz;
    u_xlat2 = u_xlat0.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = Globals.hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat2;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat1.x = Globals.unity_LightShadowBias.x / u_xlat0.w;
    u_xlat1.x = min(u_xlat1.x, 0.0);
    u_xlat1.x = max(u_xlat1.x, -1.0);
    u_xlat6 = u_xlat0.z + u_xlat1.x;
    u_xlat1.x = min(u_xlat0.w, u_xlat6);
    output.mtl_Position.xyw = u_xlat0.xyw;
    u_xlat0.x = (-u_xlat6) + u_xlat1.x;
    output.mtl_Position.z = Globals.unity_LightShadowBias.y * u_xlat0.x + u_xlat6;
    return output;
}


-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(0) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
)
{
    Mtl_FragmentOut output;
    output.SV_Target0 = half4(0.0, 0.0, 0.0, 0.0);
    return output;
}


-- Hardware tier variant: Tier 2
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"

Constant Buffer "Globals" (224 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 32
  Matrix4x4 unity_WorldToObject at 96
  Matrix4x4 unity_MatrixVP at 160
  Vector4 _WorldSpaceLightPos0 at 0
  Vector4 unity_LightShadowBias at 16
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float4 _WorldSpaceLightPos0;
    float4 unity_LightShadowBias;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    float u_xlat6;
    float u_xlat9;
    bool u_xlatb9;
    u_xlat0.x = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = rsqrt(u_xlat9);
    u_xlat0.xyz = float3(u_xlat9) * u_xlat0.xyz;
    u_xlat1 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0] * input.POSITION0.xxxx + u_xlat1;
    u_xlat1 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2] * input.POSITION0.zzzz + u_xlat1;
    u_xlat1 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[3] * input.POSITION0.wwww + u_xlat1;
    u_xlat2.xyz = (-u_xlat1.xyz) * Globals._WorldSpaceLightPos0.www + Globals._WorldSpaceLightPos0.xyz;
    u_xlat9 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat9 = rsqrt(u_xlat9);
    u_xlat2.xyz = float3(u_xlat9) * u_xlat2.xyz;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat2.xyz);
    u_xlat9 = (-u_xlat9) * u_xlat9 + 1.0;
    u_xlat9 = sqrt(u_xlat9);
    u_xlat9 = u_xlat9 * Globals.unity_LightShadowBias.z;
    u_xlat0.xyz = (-u_xlat0.xyz) * float3(u_xlat9) + u_xlat1.xyz;
    u_xlatb9 = Globals.unity_LightShadowBias.z!=0.0;
    u_xlat0.xyz = (bool(u_xlatb9)) ? u_xlat0.xyz : u_xlat1.xyz;
    u_xlat2 = u_xlat0.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = Globals.hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat2;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat1.x = Globals.unity_LightShadowBias.x / u_xlat0.w;
    u_xlat1.x = min(u_xlat1.x, 0.0);
    u_xlat1.x = max(u_xlat1.x, -1.0);
    u_xlat6 = u_xlat0.z + u_xlat1.x;
    u_xlat1.x = min(u_xlat0.w, u_xlat6);
    output.mtl_Position.xyw = u_xlat0.xyw;
    u_xlat0.x = (-u_xlat6) + u_xlat1.x;
    output.mtl_Position.z = Globals.unity_LightShadowBias.y * u_xlat0.x + u_xlat6;
    return output;
}


-- Hardware tier variant: Tier 2
-- Fragment shader for "metal":
Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(0) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
)
{
    Mtl_FragmentOut output;
    output.SV_Target0 = half4(0.0, 0.0, 0.0, 0.0);
    return output;
}


-- Hardware tier variant: Tier 3
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"

Constant Buffer "Globals" (224 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 32
  Matrix4x4 unity_WorldToObject at 96
  Matrix4x4 unity_MatrixVP at 160
  Vector4 _WorldSpaceLightPos0 at 0
  Vector4 unity_LightShadowBias at 16
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float4 _WorldSpaceLightPos0;
    float4 unity_LightShadowBias;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    float u_xlat6;
    float u_xlat9;
    bool u_xlatb9;
    u_xlat0.x = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = rsqrt(u_xlat9);
    u_xlat0.xyz = float3(u_xlat9) * u_xlat0.xyz;
    u_xlat1 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0] * input.POSITION0.xxxx + u_xlat1;
    u_xlat1 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2] * input.POSITION0.zzzz + u_xlat1;
    u_xlat1 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[3] * input.POSITION0.wwww + u_xlat1;
    u_xlat2.xyz = (-u_xlat1.xyz) * Globals._WorldSpaceLightPos0.www + Globals._WorldSpaceLightPos0.xyz;
    u_xlat9 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat9 = rsqrt(u_xlat9);
    u_xlat2.xyz = float3(u_xlat9) * u_xlat2.xyz;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat2.xyz);
    u_xlat9 = (-u_xlat9) * u_xlat9 + 1.0;
    u_xlat9 = sqrt(u_xlat9);
    u_xlat9 = u_xlat9 * Globals.unity_LightShadowBias.z;
    u_xlat0.xyz = (-u_xlat0.xyz) * float3(u_xlat9) + u_xlat1.xyz;
    u_xlatb9 = Globals.unity_LightShadowBias.z!=0.0;
    u_xlat0.xyz = (bool(u_xlatb9)) ? u_xlat0.xyz : u_xlat1.xyz;
    u_xlat2 = u_xlat0.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = Globals.hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat2;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat1.x = Globals.unity_LightShadowBias.x / u_xlat0.w;
    u_xlat1.x = min(u_xlat1.x, 0.0);
    u_xlat1.x = max(u_xlat1.x, -1.0);
    u_xlat6 = u_xlat0.z + u_xlat1.x;
    u_xlat1.x = min(u_xlat0.w, u_xlat6);
    output.mtl_Position.xyw = u_xlat0.xyw;
    u_xlat0.x = (-u_xlat6) + u_xlat1.x;
    output.mtl_Position.z = Globals.unity_LightShadowBias.y * u_xlat0.x + u_xlat6;
    return output;
}


-- Hardware tier variant: Tier 3
-- Fragment shader for "metal":
Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(0) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
)
{
    Mtl_FragmentOut output;
    output.SV_Target0 = half4(0.0, 0.0, 0.0, 0.0);
    return output;
}


//////////////////////////////////////////////////////
Keywords set in this variant: SHADOWS_CUBE 
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"

Constant Buffer "Globals" (144 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 16
  Matrix4x4 unity_MatrixVP at 80
  Vector4 _LightPositionRange at 0
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float4 _LightPositionRange;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 mtl_Position [[ position ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    u_xlat0.xyz = input.POSITION0.yyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * input.POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * input.POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * input.POSITION0.www + u_xlat0.xyz;
    output.TEXCOORD0.xyz = u_xlat0.xyz + (-Globals._LightPositionRange.xyz);
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0] * input.POSITION0.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2] * input.POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    output.mtl_Position = Globals.hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    return output;
}


-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Constant Buffer "Globals" (32 bytes) on slot 0 {
  Vector4 _LightPositionRange at 0
  Vector4 unity_LightShadowBias at 16
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float4 _LightPositionRange;
    float4 unity_LightShadowBias;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(0) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    u_xlat0.x = dot(input.TEXCOORD0.xyz, input.TEXCOORD0.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = u_xlat0.x + Globals.unity_LightShadowBias.x;
    u_xlat0 = u_xlat0.xxxx * Globals._LightPositionRange.wwww;
    output.SV_Target0 = half4(u_xlat0);
    return output;
}


-- Hardware tier variant: Tier 2
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"

Constant Buffer "Globals" (144 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 16
  Matrix4x4 unity_MatrixVP at 80
  Vector4 _LightPositionRange at 0
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float4 _LightPositionRange;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 mtl_Position [[ position ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    u_xlat0.xyz = input.POSITION0.yyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * input.POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * input.POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * input.POSITION0.www + u_xlat0.xyz;
    output.TEXCOORD0.xyz = u_xlat0.xyz + (-Globals._LightPositionRange.xyz);
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0] * input.POSITION0.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2] * input.POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    output.mtl_Position = Globals.hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    return output;
}


-- Hardware tier variant: Tier 2
-- Fragment shader for "metal":
Constant Buffer "Globals" (32 bytes) on slot 0 {
  Vector4 _LightPositionRange at 0
  Vector4 unity_LightShadowBias at 16
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float4 _LightPositionRange;
    float4 unity_LightShadowBias;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(0) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    u_xlat0.x = dot(input.TEXCOORD0.xyz, input.TEXCOORD0.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = u_xlat0.x + Globals.unity_LightShadowBias.x;
    u_xlat0 = u_xlat0.xxxx * Globals._LightPositionRange.wwww;
    output.SV_Target0 = half4(u_xlat0);
    return output;
}


-- Hardware tier variant: Tier 3
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"

Constant Buffer "Globals" (144 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 16
  Matrix4x4 unity_MatrixVP at 80
  Vector4 _LightPositionRange at 0
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float4 _LightPositionRange;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 mtl_Position [[ position ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    u_xlat0.xyz = input.POSITION0.yyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * input.POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * input.POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * input.POSITION0.www + u_xlat0.xyz;
    output.TEXCOORD0.xyz = u_xlat0.xyz + (-Globals._LightPositionRange.xyz);
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0] * input.POSITION0.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2] * input.POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    output.mtl_Position = Globals.hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    return output;
}


-- Hardware tier variant: Tier 3
-- Fragment shader for "metal":
Constant Buffer "Globals" (32 bytes) on slot 0 {
  Vector4 _LightPositionRange at 0
  Vector4 unity_LightShadowBias at 16
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float4 _LightPositionRange;
    float4 unity_LightShadowBias;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(0) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    u_xlat0.x = dot(input.TEXCOORD0.xyz, input.TEXCOORD0.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = u_xlat0.x + Globals.unity_LightShadowBias.x;
    u_xlat0 = u_xlat0.xxxx * Globals._LightPositionRange.wwww;
    output.SV_Target0 = half4(u_xlat0);
    return output;
}


 }
}
CustomEditor "StandardShaderGUI"
Fallback "VertexLit"
}